query,total_exec_time,calls,mean_exec_time
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,20195977.5458012,7220953,2.796857637184813
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,20195977.5458012,7220953,2.796857637184813
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,20195977.5458012,7220953,2.796857637184813
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,20195977.5458012,7220953,2.796857637184813
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,20195977.5458012,7220953,2.796857637184813
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,5063636.835831569,7220955,0.7012419874976142
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,5063636.835831569,7220955,0.7012419874976142
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,5063636.835831569,7220955,0.7012419874976142
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,5063636.835831569,7220955,0.7012419874976142
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,5063636.835831569,7220955,0.7012419874976142
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,1420076.0603030575,1099350,1.291741538457284
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,1420076.0603030575,1099350,1.291741538457284
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,1420076.0603030575,1099350,1.291741538457284
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,1420076.0603030575,1099350,1.291741538457284
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,1420076.0603030575,1099350,1.291741538457284
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,1266946.045501975,749742,1.6898426998914002
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,1171978.479483996,695299,1.685574809519329
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,1080175.7893439909,639769,1.6883840719759504
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,986469.4333569985,584031,1.6890703290698397
UPDATE pgbench_branches SET bbalance = bbalance + $1 WHERE bid = $2,893219.8894270015,528166,1.6911726416069846
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,264707.90235199657,1099350,0.2407858301287136
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,264707.90235199657,1099350,0.2407858301287136
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,264707.90235199657,1099350,0.2407858301287136
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,264707.90235199657,1099350,0.2407858301287136
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,264707.90235199657,1099350,0.2407858301287136
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,232136.62139300178,749747,0.30961994031722206
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,214951.65106900153,695304,0.3091477268489964
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,197456.0897610024,639770,0.30863605633432384
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,180443.1306280048,584035,0.3089594469989069
UPDATE pgbench_tellers SET tbalance = tbalance + $1 WHERE tid = $2,163040.1100440044,528169,0.30868928324836375
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,162537.75111198844,7220955,0.022509176571796945
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,162537.75111198844,7220955,0.022509176571796945
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,162537.75111198844,7220955,0.022509176571796945
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,162537.75111198844,7220955,0.022509176571796945
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,162537.75111198844,7220955,0.022509176571796945
SELECT abalance FROM pgbench_accounts WHERE aid = $1,49248.51726801877,7220955,0.00682022215454901
SELECT abalance FROM pgbench_accounts WHERE aid = $1,49248.51726801877,7220955,0.00682022215454901
SELECT abalance FROM pgbench_accounts WHERE aid = $1,49248.51726801877,7220955,0.00682022215454901
SELECT abalance FROM pgbench_accounts WHERE aid = $1,49248.51726801877,7220955,0.00682022215454901
SELECT abalance FROM pgbench_accounts WHERE aid = $1,49248.51726801877,7220955,0.00682022215454901
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",43160.684462990524,7220945,0.005977151808108482
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",43160.684462990524,7220945,0.005977151808108482
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",43160.684462990524,7220945,0.005977151808108482
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",43160.684462990524,7220945,0.005977151808108482
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",43160.684462990524,7220945,0.005977151808108482
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,29729.888466000884,1099350,0.027043151376723078
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,29729.888466000884,1099350,0.027043151376723078
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,29729.888466000884,1099350,0.027043151376723078
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,29729.888466000884,1099350,0.027043151376723078
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,29729.888466000884,1099350,0.027043151376723078
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,20179.630613999594,749747,0.026915253564203073
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,18670.359265999592,695306,0.02685200367320322
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,17303.663169000072,639772,0.0270466090560388
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,15815.956305000376,584036,0.027080447617955083
UPDATE pgbench_accounts SET abalance = abalance + $1 WHERE aid = $2,14164.701169000398,528171,0.02681840004278923
SELECT abalance FROM pgbench_accounts WHERE aid = $1,12060.989355000273,1099350,0.010971018651930975
SELECT abalance FROM pgbench_accounts WHERE aid = $1,12060.989355000273,1099350,0.010971018651930975
SELECT abalance FROM pgbench_accounts WHERE aid = $1,12060.989355000273,1099350,0.010971018651930975
SELECT abalance FROM pgbench_accounts WHERE aid = $1,12060.989355000273,1099350,0.010971018651930975
SELECT abalance FROM pgbench_accounts WHERE aid = $1,12060.989355000273,1099350,0.010971018651930975
commit,8822.64647699021,9070043,0.0009727237761717413
commit,8759.453056990871,9015598,0.0009715886907335583
commit,8697.461116991615,8960049,0.0009706934768995212
commit,8625.93844599213,8904329,0.0009687353697285997
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",8598.859675999971,1099350,0.007821767113294402
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",8598.859675999971,1099350,0.007821767113294402
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",8598.859675999971,1099350,0.007821767113294402
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",8598.859675999971,1099350,0.007821767113294402
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",8598.859675999971,1099350,0.007821767113294402
commit,8560.121709992729,8848466,0.000967413075893628
SELECT abalance FROM pgbench_accounts WHERE aid = $1,8437.836447000285,749747,0.011254245027989657
begin,8411.09079299508,9070055,0.0009273472755126086
begin,8355.995521995332,9015615,0.0009268358866255308
begin,8298.319045995557,8960058,0.0009261456841015293
begin,8241.668334995902,8904344,0.0009255783845502168
begin,8186.645477996184,8848479,0.0009252036963640291
SELECT abalance FROM pgbench_accounts WHERE aid = $1,7769.2003220003135,695305,0.011173801888380039
SELECT abalance FROM pgbench_accounts WHERE aid = $1,7159.485921000258,639772,0.011190683432535422
SELECT abalance FROM pgbench_accounts WHERE aid = $1,6493.830987000227,584036,0.01111888819696051
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",6009.422632000171,749742,0.008015320779681397
SELECT abalance FROM pgbench_accounts WHERE aid = $1,5862.65475300011,528170,0.011099938945794016
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",5560.884800000259,695298,0.007997843802225523
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",5128.479376000218,639747,0.008016418015246404
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",4645.760366000144,584030,0.007954660490043003
"INSERT INTO pgbench_history (tid, bid, aid, delta, mtime) VALUES ($1, $2, $3, $4, CURRENT_TIMESTAMP)",4213.73141900015,528166,0.007978043681342303
SELECT statistics.load_ash_waits_data(),3810.032475000001,48,79.3756765625
SELECT statistics.load_ash_waits_data(),3710.5484420000007,47,78.94783919148936
SELECT statistics.load_ash_waits_data(),3581.3776820000007,46,77.8560365652174
SELECT statistics.load_ash_waits_data(),3406.0309350000007,45,75.68957633333333
SELECT statistics.load_ash_waits_data(),3244.1471480000005,44,73.730617
copy pgbench_accounts from stdin with (freeze on),2959.924382,3,986.6414606666667
copy pgbench_accounts from stdin with (freeze on),2959.924382,3,986.6414606666667
copy pgbench_accounts from stdin with (freeze on),2959.924382,3,986.6414606666667
copy pgbench_accounts from stdin with (freeze on),2959.924382,3,986.6414606666667
copy pgbench_accounts from stdin with (freeze on),2959.924382,3,986.6414606666667
SELECT statistics.run_health_check(),1342.960364,23,58.389581043478266
SELECT statistics.run_health_check(),1342.960364,23,58.389581043478266
SELECT statistics.run_health_check(),1342.960364,23,58.389581043478266
SELECT statistics.run_health_check(),1342.960364,23,58.389581043478266
SELECT statistics.run_health_check(),1342.960364,23,58.389581043478266
alter table pgbench_accounts add primary key (aid),1285.029395,3,428.3431316666667
alter table pgbench_accounts add primary key (aid),1285.029395,3,428.3431316666667
alter table pgbench_accounts add primary key (aid),1285.029395,3,428.3431316666667
alter table pgbench_accounts add primary key (aid),1285.029395,3,428.3431316666667
alter table pgbench_accounts add primary key (aid),1285.029395,3,428.3431316666667
"DO $$
BEGIN
  insert into statistics.query_details
 select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details);
EXCEPTION
  WHEN unique_violation THEN
    null;
END $$",1280.806123,35,36.594460657142854
"DO $$
BEGIN
  insert into statistics.query_details
 select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details);
EXCEPTION
  WHEN unique_violation THEN
    null;
END $$",1280.806123,35,36.594460657142854
"DO $$
BEGIN
  insert into statistics.query_details
 select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details);
EXCEPTION
  WHEN unique_violation THEN
    null;
END $$",1280.806123,35,36.594460657142854
"DO $$
BEGIN
  insert into statistics.query_details
 select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details);
EXCEPTION
  WHEN unique_violation THEN
    null;
END $$",1280.806123,35,36.594460657142854
"DO $$
BEGIN
  insert into statistics.query_details
 select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details);
EXCEPTION
  WHEN unique_violation THEN
    null;
END $$",1280.806123,35,36.594460657142854
"insert into statistics.temp_pg_wait_sampling_get_history
select now(),a.* from pg_wait_sampling_get_history() a",1188.3761800000002,38,31.273057368421046
"insert into statistics.temp_pg_wait_sampling_get_history
select now(),a.* from pg_wait_sampling_get_history() a",1188.3761800000002,38,31.273057368421046
"insert into statistics.temp_pg_wait_sampling_get_history
select now(),a.* from pg_wait_sampling_get_history() a",1188.3761800000002,38,31.273057368421046
"insert into statistics.temp_pg_wait_sampling_get_history
select now(),a.* from pg_wait_sampling_get_history() a",1188.3761800000002,38,31.273057368421046
"insert into statistics.temp_pg_wait_sampling_get_history
select now(),a.* from pg_wait_sampling_get_history() a",1188.3761800000002,38,31.273057368421046
SELECT statistics.dump_activity_snapshot(),875.033484,6,145.838914
SELECT statistics.dump_activity_snapshot(),875.033484,6,145.838914
SELECT statistics.dump_activity_snapshot(),875.033484,6,145.838914
SELECT statistics.dump_activity_snapshot(),875.033484,6,145.838914
"insert into statistics.temp_pg_wait_sampling_get_profile
select now(),a.* from pg_wait_sampling_get_profile() a",728.1387779999999,44,16.548608590909087
"insert into statistics.temp_pg_wait_sampling_get_profile
select now(),a.* from pg_wait_sampling_get_profile() a",728.1387779999999,44,16.548608590909087
"insert into statistics.temp_pg_wait_sampling_get_profile
select now(),a.* from pg_wait_sampling_get_profile() a",728.1387779999999,44,16.548608590909087
"insert into statistics.temp_pg_wait_sampling_get_profile
select now(),a.* from pg_wait_sampling_get_profile() a",728.1387779999999,44,16.548608590909087
"insert into statistics.temp_pg_wait_sampling_get_profile
select now(),a.* from pg_wait_sampling_get_profile() a",728.1387779999999,44,16.548608590909087
select * from pgbench_accounts,617.559132,1,617.559132
select * from pgbench_accounts,617.559132,1,617.559132
select * from pgbench_accounts,617.559132,1,617.559132
select * from pgbench_accounts,617.559132,1,617.559132
select * from pgbench_accounts,617.559132,1,617.559132
"insert into statistics.temp_database_connections
SELECT now(),datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database
ORDER BY pg_database_size(datname) DESC",602.2270349999999,44,13.686978068181817
"insert into statistics.temp_database_connections
SELECT now(),datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database
ORDER BY pg_database_size(datname) DESC",602.2270349999999,44,13.686978068181817
"insert into statistics.temp_database_connections
SELECT now(),datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database
ORDER BY pg_database_size(datname) DESC",602.2270349999999,44,13.686978068181817
"insert into statistics.temp_database_connections
SELECT now(),datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database
ORDER BY pg_database_size(datname) DESC",602.2270349999999,44,13.686978068181817
"insert into statistics.temp_database_connections
SELECT now(),datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database
ORDER BY pg_database_size(datname) DESC",602.2270349999999,44,13.686978068181817
SELECT statistics.dump_activity_snapshot(),457.893216,5,91.57864319999999
vacuum analyze pgbench_accounts,344.903021,3,114.96767366666667
vacuum analyze pgbench_accounts,344.903021,3,114.96767366666667
vacuum analyze pgbench_accounts,344.903021,3,114.96767366666667
vacuum analyze pgbench_accounts,344.903021,3,114.96767366666667
vacuum analyze pgbench_accounts,344.903021,3,114.96767366666667
"DO $$
BEGIN
  insert into statistics.query_details
 select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details);
EXCEPTION
  WHEN unique_violation THEN
    null;
END $$",318.41843600000004,9,35.37982622222222
"DO $$
BEGIN
  insert into statistics.query_details
 select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details);
EXCEPTION
  WHEN unique_violation THEN
    null;
END $$",318.41843600000004,9,35.37982622222222
"DO $$
BEGIN
  insert into statistics.query_details
 select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details);
EXCEPTION
  WHEN unique_violation THEN
    null;
END $$",318.41843600000004,9,35.37982622222222
"DO $$
BEGIN
  insert into statistics.query_details
 select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details);
EXCEPTION
  WHEN unique_violation THEN
    null;
END $$",318.41843600000004,9,35.37982622222222
"DO $$
BEGIN
  insert into statistics.query_details
 select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details);
EXCEPTION
  WHEN unique_violation THEN
    null;
END $$",318.41843600000004,9,35.37982622222222
"insert into statistics.temp_blocked_sessions
SELECT now(),blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted",278.045085,44,6.3192064772727266
"insert into statistics.temp_blocked_sessions
SELECT now(),blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted",278.045085,44,6.3192064772727266
"insert into statistics.temp_blocked_sessions
SELECT now(),blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted",278.045085,44,6.3192064772727266
"insert into statistics.temp_blocked_sessions
SELECT now(),blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted",278.045085,44,6.3192064772727266
"insert into statistics.temp_blocked_sessions
SELECT now(),blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted",278.045085,44,6.3192064772727266
"insert into statistics.temp_pg_stat_statements
select now() as current_date,a.* from pg_stat_statements a",210.21239800000004,39,5.390061487179486
"insert into statistics.temp_pg_stat_statements
select now() as current_date,a.* from pg_stat_statements a",210.21239800000004,39,5.390061487179486
"insert into statistics.temp_pg_stat_statements
select now() as current_date,a.* from pg_stat_statements a",210.21239800000004,39,5.390061487179486
"insert into statistics.temp_pg_stat_statements
select now() as current_date,a.* from pg_stat_statements a",210.21239800000004,39,5.390061487179486
"insert into statistics.temp_pg_stat_statements
select now() as current_date,a.* from pg_stat_statements a",210.21239800000004,39,5.390061487179486
"SELECT
    n.nspname AS schema_name,
    c.relkind AS segment_type,
    t.spcname AS tablespace_name,
    c.relname AS segment_name,
    pg_table_size(c.oid) AS size_bytes
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE pg_table_size(c.oid) > $1  -- larger than ~1GB
ORDER BY
    size_bytes DESC",185.21178199999997,8,23.15147275
"SELECT
    n.nspname AS schema_name,
    c.relkind AS segment_type,
    t.spcname AS tablespace_name,
    c.relname AS segment_name,
    pg_table_size(c.oid) AS size_bytes
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE pg_table_size(c.oid) > $1  -- larger than ~1GB
ORDER BY
    size_bytes DESC",185.21178199999997,8,23.15147275
"SELECT
    n.nspname AS schema_name,
    c.relkind AS segment_type,
    t.spcname AS tablespace_name,
    c.relname AS segment_name,
    pg_table_size(c.oid) AS size_bytes
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE pg_table_size(c.oid) > $1  -- larger than ~1GB
ORDER BY
    size_bytes DESC",185.21178199999997,8,23.15147275
"SELECT
    n.nspname AS schema_name,
    c.relkind AS segment_type,
    t.spcname AS tablespace_name,
    c.relname AS segment_name,
    pg_table_size(c.oid) AS size_bytes
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE pg_table_size(c.oid) > $1  -- larger than ~1GB
ORDER BY
    size_bytes DESC",185.21178199999997,8,23.15147275
"SELECT
    n.nspname AS schema_name,
    c.relkind AS segment_type,
    t.spcname AS tablespace_name,
    c.relname AS segment_name,
    pg_table_size(c.oid) AS size_bytes
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE pg_table_size(c.oid) > $1  -- larger than ~1GB
ORDER BY
    size_bytes DESC",185.21178199999997,8,23.15147275
"SELECT
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $2 / $3 / $4 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE pg_total_relation_size(c.oid) / $5 / $6 > $7
ORDER BY gbytes DESC, c.relname",148.668858,6,24.778143
"SELECT
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $2 / $3 / $4 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE pg_total_relation_size(c.oid) / $5 / $6 > $7
ORDER BY gbytes DESC, c.relname",148.668858,6,24.778143
"SELECT
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $2 / $3 / $4 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE pg_total_relation_size(c.oid) / $5 / $6 > $7
ORDER BY gbytes DESC, c.relname",148.668858,6,24.778143
"SELECT
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $2 / $3 / $4 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE pg_total_relation_size(c.oid) / $5 / $6 > $7
ORDER BY gbytes DESC, c.relname",148.668858,6,24.778143
"SELECT
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $2 / $3 / $4 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE pg_total_relation_size(c.oid) / $5 / $6 > $7
ORDER BY gbytes DESC, c.relname",148.668858,6,24.778143
"insert into statistics.temp_user_calls
SELECT now(),
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname
ORDER BY total_exec_time_ms DESC",137.28156900000005,44,3.120035659090909
"insert into statistics.temp_user_calls
SELECT now(),
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname
ORDER BY total_exec_time_ms DESC",137.28156900000005,44,3.120035659090909
"insert into statistics.temp_user_calls
SELECT now(),
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname
ORDER BY total_exec_time_ms DESC",137.28156900000005,44,3.120035659090909
"insert into statistics.temp_user_calls
SELECT now(),
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname
ORDER BY total_exec_time_ms DESC",137.28156900000005,44,3.120035659090909
"insert into statistics.temp_user_calls
SELECT now(),
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname
ORDER BY total_exec_time_ms DESC",137.28156900000005,44,3.120035659090909
"insert into statistics.temp_pg_stat_activity
select now() as current_date,a.* from pg_stat_activity a",123.75120299999999,39,3.1731077692307696
"insert into statistics.temp_pg_stat_activity
select now() as current_date,a.* from pg_stat_activity a",123.75120299999999,39,3.1731077692307696
"insert into statistics.temp_pg_stat_activity
select now() as current_date,a.* from pg_stat_activity a",123.75120299999999,39,3.1731077692307696
"insert into statistics.temp_pg_stat_activity
select now() as current_date,a.* from pg_stat_activity a",123.75120299999999,39,3.1731077692307696
"insert into statistics.temp_pg_stat_activity
select now() as current_date,a.* from pg_stat_activity a",123.75120299999999,39,3.1731077692307696
select * from statistics.temp_pg_wait_sampling_get_history,115.67004,1,115.67004
select * from statistics.temp_pg_wait_sampling_get_history,115.67004,1,115.67004
select * from statistics.temp_pg_wait_sampling_get_history,115.67004,1,115.67004
select * from statistics.temp_pg_wait_sampling_get_history,115.67004,1,115.67004
select * from statistics.temp_pg_wait_sampling_get_history,115.67004,1,115.67004
"SELECT
    schemaname AS owner,
    tablename AS table_name,
    attname AS column_name,
    null_frac,
    avg_width,
    n_distinct,
    most_common_vals,
    most_common_freqs
FROM pg_stats
WHERE schemaname NOT IN ($1, $2)
ORDER BY owner, table_name, column_name",105.621836,9,11.735759555555555
"SELECT
    schemaname AS owner,
    tablename AS table_name,
    attname AS column_name,
    null_frac,
    avg_width,
    n_distinct,
    most_common_vals,
    most_common_freqs
FROM pg_stats
WHERE schemaname NOT IN ($1, $2)
ORDER BY owner, table_name, column_name",105.621836,9,11.735759555555555
"SELECT
    schemaname AS owner,
    tablename AS table_name,
    attname AS column_name,
    null_frac,
    avg_width,
    n_distinct,
    most_common_vals,
    most_common_freqs
FROM pg_stats
WHERE schemaname NOT IN ($1, $2)
ORDER BY owner, table_name, column_name",105.621836,9,11.735759555555555
"SELECT
    schemaname AS owner,
    tablename AS table_name,
    attname AS column_name,
    null_frac,
    avg_width,
    n_distinct,
    most_common_vals,
    most_common_freqs
FROM pg_stats
WHERE schemaname NOT IN ($1, $2)
ORDER BY owner, table_name, column_name",105.621836,9,11.735759555555555
"SELECT
    schemaname AS owner,
    tablename AS table_name,
    attname AS column_name,
    null_frac,
    avg_width,
    n_distinct,
    most_common_vals,
    most_common_freqs
FROM pg_stats
WHERE schemaname NOT IN ($1, $2)
ORDER BY owner, table_name, column_name",105.621836,9,11.735759555555555
"WITH bloat_info AS (
  SELECT 
    schemaname,
    tablename,
    reltuples::BIGINT AS live_tuples,
    relpages::BIGINT AS total_pages,
    otta::BIGINT AS expected_pages,
	$1 * (relpages - otta) / relpages as pct,
    ROUND($2 * (relpages - otta::BIGINT) / relpages, $3) AS bloat_pct,
    (relpages - otta) * $4 / $5 AS wasted_space_mb
  FROM (
    SELECT
      schemaname,
      tablename,
      reltuples,
      relpages,
      CEIL(reltuples / (block_size / (data_width + $6))) AS otta
    FROM (
      SELECT 
        schemaname, 
        tablename,
        reltuples,
        relpages,
        pg_table_size(schemaname || $7 || tablename) / $8 AS table_size_pages,
        current_setting($9)::NUMERIC AS block_size,
        SUM((CASE WHEN avg_width IS NOT NULL THEN avg_width ELSE $10 END)) AS data_width
      FROM pg_stats
      JOIN pg_class ON tablename = relname
	  where relpages > $11
      GROUP BY schemaname, tablename, reltuples, relpages
    ) AS table_info
  ) AS calc
)
SELECT * FROM bloat_info
ORDER BY bloat_pct DESC
LIMIT $12",102.048167,8,12.756020875
"WITH bloat_info AS (
  SELECT 
    schemaname,
    tablename,
    reltuples::BIGINT AS live_tuples,
    relpages::BIGINT AS total_pages,
    otta::BIGINT AS expected_pages,
	$1 * (relpages - otta) / relpages as pct,
    ROUND($2 * (relpages - otta::BIGINT) / relpages, $3) AS bloat_pct,
    (relpages - otta) * $4 / $5 AS wasted_space_mb
  FROM (
    SELECT
      schemaname,
      tablename,
      reltuples,
      relpages,
      CEIL(reltuples / (block_size / (data_width + $6))) AS otta
    FROM (
      SELECT 
        schemaname, 
        tablename,
        reltuples,
        relpages,
        pg_table_size(schemaname || $7 || tablename) / $8 AS table_size_pages,
        current_setting($9)::NUMERIC AS block_size,
        SUM((CASE WHEN avg_width IS NOT NULL THEN avg_width ELSE $10 END)) AS data_width
      FROM pg_stats
      JOIN pg_class ON tablename = relname
	  where relpages > $11
      GROUP BY schemaname, tablename, reltuples, relpages
    ) AS table_info
  ) AS calc
)
SELECT * FROM bloat_info
ORDER BY bloat_pct DESC
LIMIT $12",102.048167,8,12.756020875
"WITH bloat_info AS (
  SELECT 
    schemaname,
    tablename,
    reltuples::BIGINT AS live_tuples,
    relpages::BIGINT AS total_pages,
    otta::BIGINT AS expected_pages,
	$1 * (relpages - otta) / relpages as pct,
    ROUND($2 * (relpages - otta::BIGINT) / relpages, $3) AS bloat_pct,
    (relpages - otta) * $4 / $5 AS wasted_space_mb
  FROM (
    SELECT
      schemaname,
      tablename,
      reltuples,
      relpages,
      CEIL(reltuples / (block_size / (data_width + $6))) AS otta
    FROM (
      SELECT 
        schemaname, 
        tablename,
        reltuples,
        relpages,
        pg_table_size(schemaname || $7 || tablename) / $8 AS table_size_pages,
        current_setting($9)::NUMERIC AS block_size,
        SUM((CASE WHEN avg_width IS NOT NULL THEN avg_width ELSE $10 END)) AS data_width
      FROM pg_stats
      JOIN pg_class ON tablename = relname
	  where relpages > $11
      GROUP BY schemaname, tablename, reltuples, relpages
    ) AS table_info
  ) AS calc
)
SELECT * FROM bloat_info
ORDER BY bloat_pct DESC
LIMIT $12",102.048167,8,12.756020875
"WITH bloat_info AS (
  SELECT 
    schemaname,
    tablename,
    reltuples::BIGINT AS live_tuples,
    relpages::BIGINT AS total_pages,
    otta::BIGINT AS expected_pages,
	$1 * (relpages - otta) / relpages as pct,
    ROUND($2 * (relpages - otta::BIGINT) / relpages, $3) AS bloat_pct,
    (relpages - otta) * $4 / $5 AS wasted_space_mb
  FROM (
    SELECT
      schemaname,
      tablename,
      reltuples,
      relpages,
      CEIL(reltuples / (block_size / (data_width + $6))) AS otta
    FROM (
      SELECT 
        schemaname, 
        tablename,
        reltuples,
        relpages,
        pg_table_size(schemaname || $7 || tablename) / $8 AS table_size_pages,
        current_setting($9)::NUMERIC AS block_size,
        SUM((CASE WHEN avg_width IS NOT NULL THEN avg_width ELSE $10 END)) AS data_width
      FROM pg_stats
      JOIN pg_class ON tablename = relname
	  where relpages > $11
      GROUP BY schemaname, tablename, reltuples, relpages
    ) AS table_info
  ) AS calc
)
SELECT * FROM bloat_info
ORDER BY bloat_pct DESC
LIMIT $12",102.048167,8,12.756020875
"WITH bloat_info AS (
  SELECT 
    schemaname,
    tablename,
    reltuples::BIGINT AS live_tuples,
    relpages::BIGINT AS total_pages,
    otta::BIGINT AS expected_pages,
	$1 * (relpages - otta) / relpages as pct,
    ROUND($2 * (relpages - otta::BIGINT) / relpages, $3) AS bloat_pct,
    (relpages - otta) * $4 / $5 AS wasted_space_mb
  FROM (
    SELECT
      schemaname,
      tablename,
      reltuples,
      relpages,
      CEIL(reltuples / (block_size / (data_width + $6))) AS otta
    FROM (
      SELECT 
        schemaname, 
        tablename,
        reltuples,
        relpages,
        pg_table_size(schemaname || $7 || tablename) / $8 AS table_size_pages,
        current_setting($9)::NUMERIC AS block_size,
        SUM((CASE WHEN avg_width IS NOT NULL THEN avg_width ELSE $10 END)) AS data_width
      FROM pg_stats
      JOIN pg_class ON tablename = relname
	  where relpages > $11
      GROUP BY schemaname, tablename, reltuples, relpages
    ) AS table_info
  ) AS calc
)
SELECT * FROM bloat_info
ORDER BY bloat_pct DESC
LIMIT $12",102.048167,8,12.756020875
select count($1) from pgbench_accounts,91.011839,1,91.011839
select count($1) from pgbench_accounts,91.011839,1,91.011839
select count($1) from pgbench_accounts,91.011839,1,91.011839
select count($1) from pgbench_accounts,91.011839,1,91.011839
select count($1) from pgbench_accounts,91.011839,1,91.011839
create extension pg_cron,73.433974,1,73.433974
create extension pg_cron,73.433974,1,73.433974
create extension pg_cron,73.433974,1,73.433974
create extension pg_cron,73.433974,1,73.433974
create extension pg_cron,73.433974,1,73.433974
"SELECT
    n.nspname AS schema_name,
    c.relkind AS segment_type,
    t.spcname AS tablespace_name,
    c.relname AS segment_name,
    pg_table_size(c.oid) AS segment_size_bytes
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE c.relkind IN ($1, $2, $3) -- table, index, toast
ORDER BY
    tablespace_name,
    segment_type,
    segment_name",64.120527,8,8.015065875
"SELECT
    n.nspname AS schema_name,
    c.relkind AS segment_type,
    t.spcname AS tablespace_name,
    c.relname AS segment_name,
    pg_table_size(c.oid) AS segment_size_bytes
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE c.relkind IN ($1, $2, $3) -- table, index, toast
ORDER BY
    tablespace_name,
    segment_type,
    segment_name",64.120527,8,8.015065875
"SELECT
    n.nspname AS schema_name,
    c.relkind AS segment_type,
    t.spcname AS tablespace_name,
    c.relname AS segment_name,
    pg_table_size(c.oid) AS segment_size_bytes
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE c.relkind IN ($1, $2, $3) -- table, index, toast
ORDER BY
    tablespace_name,
    segment_type,
    segment_name",64.120527,8,8.015065875
"SELECT
    n.nspname AS schema_name,
    c.relkind AS segment_type,
    t.spcname AS tablespace_name,
    c.relname AS segment_name,
    pg_table_size(c.oid) AS segment_size_bytes
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE c.relkind IN ($1, $2, $3) -- table, index, toast
ORDER BY
    tablespace_name,
    segment_type,
    segment_name",64.120527,8,8.015065875
"SELECT
    n.nspname AS schema_name,
    c.relkind AS segment_type,
    t.spcname AS tablespace_name,
    c.relname AS segment_name,
    pg_table_size(c.oid) AS segment_size_bytes
FROM
    pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_tablespace t ON t.oid = c.reltablespace
WHERE c.relkind IN ($1, $2, $3) -- table, index, toast
ORDER BY
    tablespace_name,
    segment_type,
    segment_name",64.120527,8,8.015065875
"SELECT 
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $2 / $3 / $4 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname = $5
AND pg_total_relation_size(c.oid) / $6 / $7 > $8
ORDER BY gbytes DESC, c.relname",50.229243999999994,2,25.114621999999997
"SELECT 
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $2 / $3 / $4 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname = $5
AND pg_total_relation_size(c.oid) / $6 / $7 > $8
ORDER BY gbytes DESC, c.relname",50.229243999999994,2,25.114621999999997
"SELECT 
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $2 / $3 / $4 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname = $5
AND pg_total_relation_size(c.oid) / $6 / $7 > $8
ORDER BY gbytes DESC, c.relname",50.229243999999994,2,25.114621999999997
"SELECT 
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $2 / $3 / $4 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname = $5
AND pg_total_relation_size(c.oid) / $6 / $7 > $8
ORDER BY gbytes DESC, c.relname",50.229243999999994,2,25.114621999999997
"SELECT 
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $2 / $3 / $4 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname = $5
AND pg_total_relation_size(c.oid) / $6 / $7 > $8
ORDER BY gbytes DESC, c.relname",50.229243999999994,2,25.114621999999997
"/*
column comment format a80

prompt SCRIPT: ORA_N02_all_indexes

prompt STATS: List all non-system indexes.

column index_owner      format a20      heading ""Index|Owner""
column index_name       format a30      heading ""Index|Name""
column table_owner      format a20      heading ""Table|Owner""
column table_name       format a30      heading ""Table|Name""
column column_position  format 999      heading ""Col|Pos""
column column_name      format a30      heading ""Column|Name""
column partition_name	format a14
column subpartition_name format a14

select  INDEX_OWNER,
        INDEX_NAME,
	TABLE_OWNER,
        TABLE_NAME,
        COLUMN_POSITION,
        COLUMN_NAME
from    ALL_IND_COLUMNS
where   TABLE_OWNER not in (&gOracleSpecialUsers)
  and     INDEX_NAME NOT LIKE 'SYS%'
order by INDEX_OWNER, INDEX_NAME, COLUMN_POSITION;

prompt STATS: List all non-system function-based indexes (and columns which have default values)

set long 5000
col column_expression heading 'Expression' format a300
column data_default format a300

select	OWNER,
	TABLE_NAME,
	COLUMN_NAME,
	DATA_DEFAULT
from DBA_TAB_COLS
where DATA_DEFAULT is not null
  and OWNER not in (&gOracleSpecialUsers)
order by 1, 2, 3;

select	INDEX_OWNER,
	INDEX_NAME,
	TABLE_NAME,
	COLUMN_POSITION,
	COLUMN_EXPRESSION
from	DBA_IND_EXPRESSIONS
where	TABLE_OWNER not in (&gOracleSpecialUsers)
order by INDEX_OWNER, INDEX_NAME, COLUMN_POSITION;

prompt STATS: List INVISIBLE indexes

SELECT owner, index_name
FROM   dba_indexes
WHERE  VISIBILITY != 'VISIBLE';

prompt STATS: List UNUSABLE indexes

prompt Unusable indexes:

SELECT owner, index_name
FROM   dba_indexes
WHERE  status = 'UNUSABLE';

prompt Unusable index partitions:

SELECT index_owner, index_name, partition_name
FROM   dba_ind_PARTITIONS
WHERE  status = 'UNUSABLE';

prompt Unusable index subpartitions:

SELECT index_owner, index_name, partition_name, subpartition_name
FROM   dba_ind_SUBPARTITIONS
WHERE  status = 'UNUSABLE';


prompt STATS: List INVISIBLE indexes

 
-- End of script.






####################################################
####################################################
*/
-- File :        N02_all_indexes.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system indexes.
--              Information on Geneva/RB indexes is captured during health checks.
--
-- Author :      Andy Coleman
--
-- Date :        25th March 2010
--
-- List all non-system indexes
SELECT
    schemaname AS schema,
    tablename AS table,
    indexname AS index_name,
    indexdef AS index_definition
FROM
    pg_indexes
ORDER BY
    schemaname,
    tablename,
    indexname",41.673855,8,5.209231875
"/*
column comment format a80

prompt SCRIPT: ORA_N02_all_indexes

prompt STATS: List all non-system indexes.

column index_owner      format a20      heading ""Index|Owner""
column index_name       format a30      heading ""Index|Name""
column table_owner      format a20      heading ""Table|Owner""
column table_name       format a30      heading ""Table|Name""
column column_position  format 999      heading ""Col|Pos""
column column_name      format a30      heading ""Column|Name""
column partition_name	format a14
column subpartition_name format a14

select  INDEX_OWNER,
        INDEX_NAME,
	TABLE_OWNER,
        TABLE_NAME,
        COLUMN_POSITION,
        COLUMN_NAME
from    ALL_IND_COLUMNS
where   TABLE_OWNER not in (&gOracleSpecialUsers)
  and     INDEX_NAME NOT LIKE 'SYS%'
order by INDEX_OWNER, INDEX_NAME, COLUMN_POSITION;

prompt STATS: List all non-system function-based indexes (and columns which have default values)

set long 5000
col column_expression heading 'Expression' format a300
column data_default format a300

select	OWNER,
	TABLE_NAME,
	COLUMN_NAME,
	DATA_DEFAULT
from DBA_TAB_COLS
where DATA_DEFAULT is not null
  and OWNER not in (&gOracleSpecialUsers)
order by 1, 2, 3;

select	INDEX_OWNER,
	INDEX_NAME,
	TABLE_NAME,
	COLUMN_POSITION,
	COLUMN_EXPRESSION
from	DBA_IND_EXPRESSIONS
where	TABLE_OWNER not in (&gOracleSpecialUsers)
order by INDEX_OWNER, INDEX_NAME, COLUMN_POSITION;

prompt STATS: List INVISIBLE indexes

SELECT owner, index_name
FROM   dba_indexes
WHERE  VISIBILITY != 'VISIBLE';

prompt STATS: List UNUSABLE indexes

prompt Unusable indexes:

SELECT owner, index_name
FROM   dba_indexes
WHERE  status = 'UNUSABLE';

prompt Unusable index partitions:

SELECT index_owner, index_name, partition_name
FROM   dba_ind_PARTITIONS
WHERE  status = 'UNUSABLE';

prompt Unusable index subpartitions:

SELECT index_owner, index_name, partition_name, subpartition_name
FROM   dba_ind_SUBPARTITIONS
WHERE  status = 'UNUSABLE';


prompt STATS: List INVISIBLE indexes

 
-- End of script.






####################################################
####################################################
*/
-- File :        N02_all_indexes.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system indexes.
--              Information on Geneva/RB indexes is captured during health checks.
--
-- Author :      Andy Coleman
--
-- Date :        25th March 2010
--
-- List all non-system indexes
SELECT
    schemaname AS schema,
    tablename AS table,
    indexname AS index_name,
    indexdef AS index_definition
FROM
    pg_indexes
ORDER BY
    schemaname,
    tablename,
    indexname",41.673855,8,5.209231875
"/*
column comment format a80

prompt SCRIPT: ORA_N02_all_indexes

prompt STATS: List all non-system indexes.

column index_owner      format a20      heading ""Index|Owner""
column index_name       format a30      heading ""Index|Name""
column table_owner      format a20      heading ""Table|Owner""
column table_name       format a30      heading ""Table|Name""
column column_position  format 999      heading ""Col|Pos""
column column_name      format a30      heading ""Column|Name""
column partition_name	format a14
column subpartition_name format a14

select  INDEX_OWNER,
        INDEX_NAME,
	TABLE_OWNER,
        TABLE_NAME,
        COLUMN_POSITION,
        COLUMN_NAME
from    ALL_IND_COLUMNS
where   TABLE_OWNER not in (&gOracleSpecialUsers)
  and     INDEX_NAME NOT LIKE 'SYS%'
order by INDEX_OWNER, INDEX_NAME, COLUMN_POSITION;

prompt STATS: List all non-system function-based indexes (and columns which have default values)

set long 5000
col column_expression heading 'Expression' format a300
column data_default format a300

select	OWNER,
	TABLE_NAME,
	COLUMN_NAME,
	DATA_DEFAULT
from DBA_TAB_COLS
where DATA_DEFAULT is not null
  and OWNER not in (&gOracleSpecialUsers)
order by 1, 2, 3;

select	INDEX_OWNER,
	INDEX_NAME,
	TABLE_NAME,
	COLUMN_POSITION,
	COLUMN_EXPRESSION
from	DBA_IND_EXPRESSIONS
where	TABLE_OWNER not in (&gOracleSpecialUsers)
order by INDEX_OWNER, INDEX_NAME, COLUMN_POSITION;

prompt STATS: List INVISIBLE indexes

SELECT owner, index_name
FROM   dba_indexes
WHERE  VISIBILITY != 'VISIBLE';

prompt STATS: List UNUSABLE indexes

prompt Unusable indexes:

SELECT owner, index_name
FROM   dba_indexes
WHERE  status = 'UNUSABLE';

prompt Unusable index partitions:

SELECT index_owner, index_name, partition_name
FROM   dba_ind_PARTITIONS
WHERE  status = 'UNUSABLE';

prompt Unusable index subpartitions:

SELECT index_owner, index_name, partition_name, subpartition_name
FROM   dba_ind_SUBPARTITIONS
WHERE  status = 'UNUSABLE';


prompt STATS: List INVISIBLE indexes

 
-- End of script.






####################################################
####################################################
*/
-- File :        N02_all_indexes.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system indexes.
--              Information on Geneva/RB indexes is captured during health checks.
--
-- Author :      Andy Coleman
--
-- Date :        25th March 2010
--
-- List all non-system indexes
SELECT
    schemaname AS schema,
    tablename AS table,
    indexname AS index_name,
    indexdef AS index_definition
FROM
    pg_indexes
ORDER BY
    schemaname,
    tablename,
    indexname",41.673855,8,5.209231875
"/*
column comment format a80

prompt SCRIPT: ORA_N02_all_indexes

prompt STATS: List all non-system indexes.

column index_owner      format a20      heading ""Index|Owner""
column index_name       format a30      heading ""Index|Name""
column table_owner      format a20      heading ""Table|Owner""
column table_name       format a30      heading ""Table|Name""
column column_position  format 999      heading ""Col|Pos""
column column_name      format a30      heading ""Column|Name""
column partition_name	format a14
column subpartition_name format a14

select  INDEX_OWNER,
        INDEX_NAME,
	TABLE_OWNER,
        TABLE_NAME,
        COLUMN_POSITION,
        COLUMN_NAME
from    ALL_IND_COLUMNS
where   TABLE_OWNER not in (&gOracleSpecialUsers)
  and     INDEX_NAME NOT LIKE 'SYS%'
order by INDEX_OWNER, INDEX_NAME, COLUMN_POSITION;

prompt STATS: List all non-system function-based indexes (and columns which have default values)

set long 5000
col column_expression heading 'Expression' format a300
column data_default format a300

select	OWNER,
	TABLE_NAME,
	COLUMN_NAME,
	DATA_DEFAULT
from DBA_TAB_COLS
where DATA_DEFAULT is not null
  and OWNER not in (&gOracleSpecialUsers)
order by 1, 2, 3;

select	INDEX_OWNER,
	INDEX_NAME,
	TABLE_NAME,
	COLUMN_POSITION,
	COLUMN_EXPRESSION
from	DBA_IND_EXPRESSIONS
where	TABLE_OWNER not in (&gOracleSpecialUsers)
order by INDEX_OWNER, INDEX_NAME, COLUMN_POSITION;

prompt STATS: List INVISIBLE indexes

SELECT owner, index_name
FROM   dba_indexes
WHERE  VISIBILITY != 'VISIBLE';

prompt STATS: List UNUSABLE indexes

prompt Unusable indexes:

SELECT owner, index_name
FROM   dba_indexes
WHERE  status = 'UNUSABLE';

prompt Unusable index partitions:

SELECT index_owner, index_name, partition_name
FROM   dba_ind_PARTITIONS
WHERE  status = 'UNUSABLE';

prompt Unusable index subpartitions:

SELECT index_owner, index_name, partition_name, subpartition_name
FROM   dba_ind_SUBPARTITIONS
WHERE  status = 'UNUSABLE';


prompt STATS: List INVISIBLE indexes

 
-- End of script.






####################################################
####################################################
*/
-- File :        N02_all_indexes.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system indexes.
--              Information on Geneva/RB indexes is captured during health checks.
--
-- Author :      Andy Coleman
--
-- Date :        25th March 2010
--
-- List all non-system indexes
SELECT
    schemaname AS schema,
    tablename AS table,
    indexname AS index_name,
    indexdef AS index_definition
FROM
    pg_indexes
ORDER BY
    schemaname,
    tablename,
    indexname",41.673855,8,5.209231875
"/*
column comment format a80

prompt SCRIPT: ORA_N02_all_indexes

prompt STATS: List all non-system indexes.

column index_owner      format a20      heading ""Index|Owner""
column index_name       format a30      heading ""Index|Name""
column table_owner      format a20      heading ""Table|Owner""
column table_name       format a30      heading ""Table|Name""
column column_position  format 999      heading ""Col|Pos""
column column_name      format a30      heading ""Column|Name""
column partition_name	format a14
column subpartition_name format a14

select  INDEX_OWNER,
        INDEX_NAME,
	TABLE_OWNER,
        TABLE_NAME,
        COLUMN_POSITION,
        COLUMN_NAME
from    ALL_IND_COLUMNS
where   TABLE_OWNER not in (&gOracleSpecialUsers)
  and     INDEX_NAME NOT LIKE 'SYS%'
order by INDEX_OWNER, INDEX_NAME, COLUMN_POSITION;

prompt STATS: List all non-system function-based indexes (and columns which have default values)

set long 5000
col column_expression heading 'Expression' format a300
column data_default format a300

select	OWNER,
	TABLE_NAME,
	COLUMN_NAME,
	DATA_DEFAULT
from DBA_TAB_COLS
where DATA_DEFAULT is not null
  and OWNER not in (&gOracleSpecialUsers)
order by 1, 2, 3;

select	INDEX_OWNER,
	INDEX_NAME,
	TABLE_NAME,
	COLUMN_POSITION,
	COLUMN_EXPRESSION
from	DBA_IND_EXPRESSIONS
where	TABLE_OWNER not in (&gOracleSpecialUsers)
order by INDEX_OWNER, INDEX_NAME, COLUMN_POSITION;

prompt STATS: List INVISIBLE indexes

SELECT owner, index_name
FROM   dba_indexes
WHERE  VISIBILITY != 'VISIBLE';

prompt STATS: List UNUSABLE indexes

prompt Unusable indexes:

SELECT owner, index_name
FROM   dba_indexes
WHERE  status = 'UNUSABLE';

prompt Unusable index partitions:

SELECT index_owner, index_name, partition_name
FROM   dba_ind_PARTITIONS
WHERE  status = 'UNUSABLE';

prompt Unusable index subpartitions:

SELECT index_owner, index_name, partition_name, subpartition_name
FROM   dba_ind_SUBPARTITIONS
WHERE  status = 'UNUSABLE';


prompt STATS: List INVISIBLE indexes

 
-- End of script.






####################################################
####################################################
*/
-- File :        N02_all_indexes.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system indexes.
--              Information on Geneva/RB indexes is captured during health checks.
--
-- Author :      Andy Coleman
--
-- Date :        25th March 2010
--
-- List all non-system indexes
SELECT
    schemaname AS schema,
    tablename AS table,
    indexname AS index_name,
    indexdef AS index_definition
FROM
    pg_indexes
ORDER BY
    schemaname,
    tablename,
    indexname",41.673855,8,5.209231875
"SELECT 
    n.nspname AS owner,
    c.relname AS segment_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $1 / $2 / $3 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname NOT IN ($4, $5, $6)
AND pg_total_relation_size(c.oid) / $7 / $8 / $9 > $10
ORDER BY gbytes DESC, n.nspname, c.relname",39.519421,8,4.939927624999999
"SELECT 
    n.nspname AS owner,
    c.relname AS segment_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $1 / $2 / $3 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname NOT IN ($4, $5, $6)
AND pg_total_relation_size(c.oid) / $7 / $8 / $9 > $10
ORDER BY gbytes DESC, n.nspname, c.relname",39.519421,8,4.939927624999999
"SELECT 
    n.nspname AS owner,
    c.relname AS segment_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $1 / $2 / $3 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname NOT IN ($4, $5, $6)
AND pg_total_relation_size(c.oid) / $7 / $8 / $9 > $10
ORDER BY gbytes DESC, n.nspname, c.relname",39.519421,8,4.939927624999999
"SELECT 
    n.nspname AS owner,
    c.relname AS segment_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $1 / $2 / $3 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname NOT IN ($4, $5, $6)
AND pg_total_relation_size(c.oid) / $7 / $8 / $9 > $10
ORDER BY gbytes DESC, n.nspname, c.relname",39.519421,8,4.939927624999999
"SELECT 
    n.nspname AS owner,
    c.relname AS segment_name,
    c.relkind AS segment_type,
    pg_total_relation_size(c.oid) / $1 / $2 / $3 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname NOT IN ($4, $5, $6)
AND pg_total_relation_size(c.oid) / $7 / $8 / $9 > $10
ORDER BY gbytes DESC, n.nspname, c.relname",39.519421,8,4.939927624999999
vacuum full statistics.query_details,34.933098,1,34.933098
vacuum full statistics.query_details,34.933098,1,34.933098
vacuum full statistics.query_details,34.933098,1,34.933098
vacuum full statistics.query_details,34.933098,1,34.933098
vacuum full statistics.query_details,34.933098,1,34.933098
create database testdb owner testuser,32.721872,1,32.721872
create database testdb owner testuser,32.721872,1,32.721872
create database testdb owner testuser,32.721872,1,32.721872
create database testdb owner testuser,32.721872,1,32.721872
create database testdb owner testuser,32.721872,1,32.721872
CREATE EXTENSION adminpack,32.519419,1,32.519419
CREATE EXTENSION adminpack,32.519419,1,32.519419
CREATE EXTENSION adminpack,32.519419,1,32.519419
CREATE EXTENSION adminpack,32.519419,1,32.519419
CREATE EXTENSION adminpack,32.519419,1,32.519419
select * from pg_wait_sampling_get_history(),32.180157,2,16.0900785
select * from pg_wait_sampling_get_history(),32.180157,2,16.0900785
select * from pg_wait_sampling_get_history(),32.180157,2,16.0900785
select * from pg_wait_sampling_get_history(),32.180157,2,16.0900785
select * from pg_wait_sampling_get_history(),32.180157,2,16.0900785
"SELECT 
    SUM(pg_total_relation_size(c.oid)) / $1 / $2 / $3 AS sys_gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname IN ($4, $5, $6)",31.163730999999995,8,3.895466375
"SELECT 
    SUM(pg_total_relation_size(c.oid)) / $1 / $2 / $3 AS sys_gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname IN ($4, $5, $6)",31.163730999999995,8,3.895466375
"SELECT 
    SUM(pg_total_relation_size(c.oid)) / $1 / $2 / $3 AS sys_gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname IN ($4, $5, $6)",31.163730999999995,8,3.895466375
"SELECT 
    SUM(pg_total_relation_size(c.oid)) / $1 / $2 / $3 AS sys_gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname IN ($4, $5, $6)",31.163730999999995,8,3.895466375
"SELECT 
    SUM(pg_total_relation_size(c.oid)) / $1 / $2 / $3 AS sys_gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname IN ($4, $5, $6)",31.163730999999995,8,3.895466375
select * from statistics.temp_pg_wait_sampling_get_profile,30.461913000000003,3,10.153971
select * from statistics.temp_pg_wait_sampling_get_profile,30.461913000000003,3,10.153971
select * from statistics.temp_pg_wait_sampling_get_profile,30.461913000000003,3,10.153971
select * from statistics.temp_pg_wait_sampling_get_profile,30.461913000000003,3,10.153971
select * from statistics.temp_pg_wait_sampling_get_profile,30.461913000000003,3,10.153971
"alter table statistics.query_details add constraint check_id unique (query_id,query)",28.320580999999997,2,14.160290499999999
"alter table statistics.query_details add constraint check_id unique (query_id,query)",28.320580999999997,2,14.160290499999999
"alter table statistics.query_details add constraint check_id unique (query_id,query)",28.320580999999997,2,14.160290499999999
"alter table statistics.query_details add constraint check_id unique (query_id,query)",28.320580999999997,2,14.160290499999999
"alter table statistics.query_details add constraint check_id unique (query_id,query)",28.320580999999997,2,14.160290499999999
"SELECT pid, ts, event_type, event, queryid
    FROM pg_wait_sampling_get_history() 
    WHERE ts > now() - INTERVAL $1",25.627608000000002,2,12.813804000000001
"SELECT pid, ts, event_type, event, queryid
    FROM pg_wait_sampling_get_history() 
    WHERE ts > now() - INTERVAL $1",25.627608000000002,2,12.813804000000001
"SELECT pid, ts, event_type, event, queryid
    FROM pg_wait_sampling_get_history() 
    WHERE ts > now() - INTERVAL $1",25.627608000000002,2,12.813804000000001
"SELECT pid, ts, event_type, event, queryid
    FROM pg_wait_sampling_get_history() 
    WHERE ts > now() - INTERVAL $1",25.627608000000002,2,12.813804000000001
"SELECT pid, ts, event_type, event, queryid
    FROM pg_wait_sampling_get_history() 
    WHERE ts > now() - INTERVAL $1",25.627608000000002,2,12.813804000000001
drop database testdb,20.807593,1,20.807593
drop database testdb,20.807593,1,20.807593
drop database testdb,20.807593,1,20.807593
drop database testdb,20.807593,1,20.807593
drop database testdb,20.807593,1,20.807593
select * from pg_wait_sampling_history,18.75414,1,18.75414
select * from pg_wait_sampling_history,18.75414,1,18.75414
select * from pg_wait_sampling_history,18.75414,1,18.75414
select * from pg_wait_sampling_history,18.75414,1,18.75414
select * from pg_wait_sampling_history,18.75414,1,18.75414
"SELECT
    ns.nspname AS owner,
    t.relname AS table_name,
    i.relname AS index_name,
    ix.indisunique AS is_unique,
    pg_stat_all_indexes.idx_scan,
    pg_relation_size(i.oid) AS index_size_bytes
FROM pg_index ix
JOIN pg_class t ON t.oid = ix.indrelid
JOIN pg_class i ON i.oid = ix.indexrelid
JOIN pg_namespace ns ON ns.oid = t.relnamespace
LEFT JOIN pg_stat_all_indexes ON pg_stat_all_indexes.indexrelid = i.oid
WHERE ns.nspname NOT IN ($1, $2)
ORDER BY owner, table_name, index_name",17.646427,11,1.6042206363636362
"SELECT
    ns.nspname AS owner,
    t.relname AS table_name,
    i.relname AS index_name,
    ix.indisunique AS is_unique,
    pg_stat_all_indexes.idx_scan,
    pg_relation_size(i.oid) AS index_size_bytes
FROM pg_index ix
JOIN pg_class t ON t.oid = ix.indrelid
JOIN pg_class i ON i.oid = ix.indexrelid
JOIN pg_namespace ns ON ns.oid = t.relnamespace
LEFT JOIN pg_stat_all_indexes ON pg_stat_all_indexes.indexrelid = i.oid
WHERE ns.nspname NOT IN ($1, $2)
ORDER BY owner, table_name, index_name",17.646427,11,1.6042206363636362
"SELECT
    ns.nspname AS owner,
    t.relname AS table_name,
    i.relname AS index_name,
    ix.indisunique AS is_unique,
    pg_stat_all_indexes.idx_scan,
    pg_relation_size(i.oid) AS index_size_bytes
FROM pg_index ix
JOIN pg_class t ON t.oid = ix.indrelid
JOIN pg_class i ON i.oid = ix.indexrelid
JOIN pg_namespace ns ON ns.oid = t.relnamespace
LEFT JOIN pg_stat_all_indexes ON pg_stat_all_indexes.indexrelid = i.oid
WHERE ns.nspname NOT IN ($1, $2)
ORDER BY owner, table_name, index_name",17.646427,11,1.6042206363636362
"SELECT
    ns.nspname AS owner,
    t.relname AS table_name,
    i.relname AS index_name,
    ix.indisunique AS is_unique,
    pg_stat_all_indexes.idx_scan,
    pg_relation_size(i.oid) AS index_size_bytes
FROM pg_index ix
JOIN pg_class t ON t.oid = ix.indrelid
JOIN pg_class i ON i.oid = ix.indexrelid
JOIN pg_namespace ns ON ns.oid = t.relnamespace
LEFT JOIN pg_stat_all_indexes ON pg_stat_all_indexes.indexrelid = i.oid
WHERE ns.nspname NOT IN ($1, $2)
ORDER BY owner, table_name, index_name",17.646427,11,1.6042206363636362
"SELECT
    ns.nspname AS owner,
    t.relname AS table_name,
    i.relname AS index_name,
    ix.indisunique AS is_unique,
    pg_stat_all_indexes.idx_scan,
    pg_relation_size(i.oid) AS index_size_bytes
FROM pg_index ix
JOIN pg_class t ON t.oid = ix.indrelid
JOIN pg_class i ON i.oid = ix.indexrelid
JOIN pg_namespace ns ON ns.oid = t.relnamespace
LEFT JOIN pg_stat_all_indexes ON pg_stat_all_indexes.indexrelid = i.oid
WHERE ns.nspname NOT IN ($1, $2)
ORDER BY owner, table_name, index_name",17.646427,11,1.6042206363636362
"SELECT queryid, event_type, event, COUNT(*) AS samples
        FROM pg_wait_sampling_get_history()
        GROUP BY queryid, event_type, event
        ORDER BY samples DESC
        LIMIT $1",16.851686,1,16.851686
"SELECT queryid, event_type, event, COUNT(*) AS samples
        FROM pg_wait_sampling_get_history()
        GROUP BY queryid, event_type, event
        ORDER BY samples DESC
        LIMIT $1",16.851686,1,16.851686
"SELECT queryid, event_type, event, COUNT(*) AS samples
        FROM pg_wait_sampling_get_history()
        GROUP BY queryid, event_type, event
        ORDER BY samples DESC
        LIMIT $1",16.851686,1,16.851686
"SELECT queryid, event_type, event, COUNT(*) AS samples
        FROM pg_wait_sampling_get_history()
        GROUP BY queryid, event_type, event
        ORDER BY samples DESC
        LIMIT $1",16.851686,1,16.851686
"SELECT queryid, event_type, event, COUNT(*) AS samples
        FROM pg_wait_sampling_get_history()
        GROUP BY queryid, event_type, event
        ORDER BY samples DESC
        LIMIT $1",16.851686,1,16.851686
"/*
prompt SCRIPT: ORA_M11_statistics

prompt STATS: show Oracle statistics for all tables

column owner                     format a20
column table_name                format a30          heading ""Table|Name""
column last_analyzed             format a10          heading ""Last|Analyzed""
column num_rows                  format 999999999999 heading ""Number|Rows""
column blocks                    format 9999999999   heading ""Num|Blocks""
column empty_blocks              format 9999999      heading ""Num|Empty|Blocks""
column avg_space                 format 999999       heading ""Avg|Space""
column chain_cnt                 format 99999        heading ""Row|Chain|Count""
column avg_row_len               format 9999999      heading ""Avg|Row|Length""
column avg_space_freelist_blocks format 99999        heading ""Avg|Space|Freelist""
column num_freelist_blocks       format 99999        heading ""Num|Freelist|Block""

SELECT  owner,
	table_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
        num_rows,
        blocks,
        empty_blocks,
        avg_space,
        chain_cnt,
        avg_row_len,
        avg_space_freelist_blocks,
        num_freelist_blocks
FROM    dba_tables
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
AND	TEMPORARY = 'N'
ORDER BY owner, table_name;

prompt STATS: show Oracle statistics for all indexes

column index_name                format a30            heading ""Index|Name""
column last_analyzed             format a10            heading ""Last|Analyzed""
column blevel                    format 99999          heading ""Branch|Levels""
column leaf_blocks               format 999999999999   heading ""Leaf|Blocks""
column distinct_keys             format 999999999999   heading ""Distinct|Keys""
column avg_leaf_blocks_per_key   format 99999999       heading ""Avg Leaf|Blks|Per Key""
column avg_data_blocks_per_key   format 99999999       heading ""Avg Data|Blks|Per Key""
column clustering_factor         format 999999999999   heading ""Clustering|Factor""
column num_rows                  format 999999999999   heading ""Num|Rows""

SELECT  owner,
	table_name,
	index_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
        blevel,
        leaf_blocks,
        distinct_keys,
        avg_leaf_blocks_per_key,
        avg_data_blocks_per_key,
        clustering_factor,
        num_rows
FROM	dba_indexes
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
ORDER BY owner, table_name, index_name;

prompt STATS: show Oracle column statistics and histogram information

column column_name	format a30            heading ""Column|Name""
column num_distinct	format 999999999999   heading ""Number|Distinct""
column avg_col_len	format 99999          heading ""Avg|Column|Length""
column num_nulls	format 999999999999   heading ""Number|Nulls""
column num_buckets	format 999999         heading ""Number|Hist|Buckets""
column global_stats	format a12
column user_stats	format a10

-- Note that the ""scope"" column is available only from 12c.
SELECT	owner,
	table_name,
	column_name,
	TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	density,
	num_nulls,
	num_buckets,
	sample_size,
	global_stats,
	user_stats,
	avg_col_len,
	histogram
FROM	dba_tab_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
ORDER BY owner, table_name, column_name;

-----------------------------------------------------------------------------------------------------------------------------
--
-- These FREQUENCY histograms ake too long so comment them out for now
--
-- define MINROWS = 10000
--
-- prompt STATS: display information about the FREQUENCY histograms on NUMERIC columns (excluding CATALOGUE_CHANGE_ID and RATING_CATALOGUE_ID) for tables which have more than &MINROWS rows
-- 
-- SELECT	owner,
-- 	table_name,
-- 	column_name,
-- 	last_analyzed,
-- 	endpoint_value				column_value,
-- 	endpoint_number - nvl(prev_endpoint,0)	frequency
-- FROM    (
-- 	SELECT	h.owner owner,
-- 		h.table_name table_name,
-- 		h.column_name column_name,
--         	TO_CHAR(c.last_analyzed,'DD/MM/YYYY') AS last_analyzed,
-- 		h.endpoint_number endpoint_number,
-- 		lag(h.endpoint_number,1) over( order by h.endpoint_number) prev_endpoint,
-- 		h.endpoint_value
-- 	FROM	dba_tab_histograms h, dba_tab_col_statistics c, dba_tab_columns m, dba_tables t
-- 	WHERE	c.HISTOGRAM = 'FREQUENCY'
-- 	AND	c.owner not in (&gOracleSpecialUsers)
-- 	AND	c.owner <> 'IPF_ADMIN'
-- 	AND	c.owner <> 'IPF_AUDIT_ADMIN'
-- 	AND	c.column_name <> 'CATALOGUE_CHANGE_ID'
-- 	AND	c.column_name <> 'RATING_CATALOGUE_ID'
-- 	AND	t.owner = c.owner
-- 	AND	t.table_name = c.table_name
-- 	AND	t.num_rows > &MINROWS
-- 	AND	m.owner = c.owner
-- 	AND	m.table_name = c.table_name
-- 	AND	m.column_name = c.column_name
-- 	AND	m.table_name not like '%QUEUE%'
-- 	AND	m.data_type = 'NUMBER'
-- 	AND	h.owner = c.owner
-- 	AND	h.table_name = c.table_name
-- 	AND	h.column_name = c.column_name
-- 	)
-- ORDER BY 1, 2, 3, 4;
--  
-- 
-- prompt STATS: display information about the FREQUENCY histograms on STRING columns for tables which have more than &MINROWS rows
-- 
-- SELECT	owner,
--         table_name,
--         column_name,
-- 	last_analyzed,
--         ep_let                     status,
--         endpoint_number - ep_lag   ct
-- FROM	(
-- 	SELECT	h.owner owner,
-- 		h.table_name table_name,
-- 		h.column_name column_name,
--         	TO_CHAR(c.last_analyzed,'DD/MM/YYYY') AS last_analyzed,
--         	chr( to_number( substr(to_char(endpoint_value,'FMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'),1,2), 'XX'))     ep_let,
--         	endpoint_number,
--         	lag(endpoint_number,1,0) over(order by endpoint_number) ep_lag
-- 	FROM	dba_tab_histograms h, dba_tab_col_statistics c, dba_tab_columns m, dba_tables t
-- 	WHERE	c.HISTOGRAM = 'FREQUENCY'
-- 	AND	c.owner not in (&gOracleSpecialUsers)
-- 	AND	c.owner <> 'IPF_ADMIN'
-- 	AND	c.owner <> 'IPF_AUDIT_ADMIN'
-- 	AND	t.owner = c.owner
-- 	AND	t.table_name = c.table_name
-- 	AND	t.num_rows > &MINROWS
-- 	AND	m.owner = c.owner
-- 	AND	m.table_name = c.table_name
-- 	AND	m.column_name = c.column_name
-- 	AND	m.table_name not like '%QUEUE%'
-- 	AND	m.data_type = 'VARCHAR2'
-- 	AND	h.owner = c.owner
-- 	AND	h.table_name = c.table_name
-- 	AND	h.column_name = c.column_name
-- 	)
-- ORDER BY 1, 2, 3, 4;
-- 
-----------------------------------------------------------------------------------------------------------------------------

-- SQL> desc dba_stat_extensions
--  Name                                                              Null?    Type
--  ----------------------------------------------------------------- -------- --------------------------------------------
--  OWNER                                                             NOT NULL VARCHAR2(128)
--  TABLE_NAME                                                        NOT NULL VARCHAR2(128)
--  EXTENSION_NAME                                                    NOT NULL VARCHAR2(128)
--  EXTENSION                                                                  CLOB
--  CREATOR                                                                    VARCHAR2(6)
--  DROPPABLE                                                                  VARCHAR2(3)

prompt STATS: display information about the multi-column statistics
--
-- Note that these groups of columns are stored as hidden columns on the table, and statistics will be gathered
-- on those hidden columns in a similar way to the statistics for normal columns.
--
col extension_name for a30
col extension for a280

SELECT e.OWNER,
       e.TABLE_NAME,
       e.extension_name,
       t.histogram,
       t.num_distinct,
       e.extension
FROM   dba_stat_extensions e,
       dba_tab_col_statistics t
WHERE  e.owner not in (&gOracleSpecialUsers)
AND    t.owner = e.owner
AND    t.table_name = e.table_name
AND    e.extension_name=t.column_name
ORDER BY 1,2,3;

column partition_name            format a14             heading ""Partition|Name""
column subpartition_name         format a24             heading ""Sub-partition|Name""
-- Set number of characters printed for LOW_VALUE and HIGH_VALUE (which are RAW values, not LONG values, in this case)
-- set long 28
col LOW_VALUE format a28
col HIGH_VALUE format a28

prompt STATS: show Oracle statistics for partitions
SELECT	owner,
	table_name,
	partition_name,
	column_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	low_value,
	high_value,
	global_stats,
	histogram
FROM dba_part_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by 1, 2, 3, 4;

prompt STATS: show Oracle statistics for sub-partitions
SELECT	owner,
	table_name,
	subpartition_name,
	column_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	low_value,
	high_value,
	global_stats,
	histogram
FROM dba_subpart_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by 1, 2, 3, 4;

prompt STATS: show which Oracle statistics are locked
prompt
col STATTYPE_LOCKED for a15

prompt Statistics are locked for the following tables:
select OWNER, TABLE_NAME, STATTYPE_LOCKED
from DBA_TAB_STATISTICS
where STATTYPE_LOCKED is not null
AND	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by OWNER, TABLE_NAME;

prompt Statistics are locked for the following indexes:
select OWNER, TABLE_NAME, INDEX_NAME, STATTYPE_LOCKED
from DBA_IND_STATISTICS
where STATTYPE_LOCKED is not null
AND	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by OWNER, TABLE_NAME, INDEX_NAME;


--
-- The next two queries and the following comment are based on ""How to check dictionary and fixed objects statistics"" (MOS Doc ID 1474937.1)
--
-- Since version 10g, statistics on the data dictionary are mandatory for the cost-based optimizer to work properly.
-- Dictionary statistics include the statistics on the tables and indexes owned by SYS (and other internal RDBMS
-- schemas like SYSTEM) and the statistics on the fixed objects. Fixed objects are the internal X$ tables and the
-- so called dynamic performance views or V$ views which are based upon them. These are not real tables and indexes,
-- but rather memory structures. The statistics for the fixed objects need to be gathered manually as they are not
-- updated by the automatic statistics gathering: use DBMS_STATS.GATHER_FIXED_OBJECTS_STATS.
--
column month_last_analyzed      format a10		heading ""Month Last|Analyzed""
column dictionary_tables	format 9999999999	heading ""Dictionary|Tables""
column fixed_objects		format 9999999		heading ""Fixed|Objects""

prompt STATS: Report statistics for SYS tables
SELECT	NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS') month_last_analyzed,
	COUNT(*) dictionary_tables
FROM	dba_tables
WHERE	owner = 'SYS'
GROUP BY NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS')
ORDER BY 1 DESC;

prompt STATS: Report statistics for Fixed Objects
SELECT	NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS') month_last_analyzed,
	COUNT(*) fixed_objects
FROM	dba_tab_statistics
WHERE	object_type = 'FIXED TABLE'
GROUP BY NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS')
ORDER BY 1 DESC;

prompt STATS: Report SQL Plan Directives at Oracle 12c. (At Oracle 11g this query will not produce any output.)
whenever sqlerror continue

COLUMN dir_id FORMAT A20
column object_name format a30
COLUMN subobject_name format a40
COLUMN reason format a36

SELECT TO_CHAR(d.directive_id) dir_id, o.owner, o.object_name,
       o.subobject_name, o.object_type, d.type, d.state, d.reason
FROM   dba_sql_plan_directives d, dba_sql_plan_dir_objects o
WHERE  d.directive_id=o.directive_id
AND    o.owner not in (&gOracleSpecialUsers)
ORDER BY 1, 2, 3, 7, 4;
-- ORDER BY o.owner, o.object_name, d.state desc, o.subobject_name;

whenever sqlerror exit 1

-- End of script.






##########################################################
##########################################################
*/
SELECT
    n.nspname AS owner,
    c.relname AS table_name,
    pg_stat_all_tables.last_analyze::date AS last_analyzed,
    pg_stat_all_tables.n_live_tup AS num_rows,
    pg_relation_size(c.oid) AS table_size_bytes,
    pg_total_relation_size(c.oid) - pg_relation_size(c.oid) AS index_size_bytes
FROM pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_stat_all_tables ON pg_stat_all_tables.relid = c.oid
WHERE c.relkind = $1  -- only tables
AND n.nspname NOT IN ($2, $3)
ORDER BY owner, table_name",14.931719000000001,11,1.3574290000000002
"/*
prompt SCRIPT: ORA_M11_statistics

prompt STATS: show Oracle statistics for all tables

column owner                     format a20
column table_name                format a30          heading ""Table|Name""
column last_analyzed             format a10          heading ""Last|Analyzed""
column num_rows                  format 999999999999 heading ""Number|Rows""
column blocks                    format 9999999999   heading ""Num|Blocks""
column empty_blocks              format 9999999      heading ""Num|Empty|Blocks""
column avg_space                 format 999999       heading ""Avg|Space""
column chain_cnt                 format 99999        heading ""Row|Chain|Count""
column avg_row_len               format 9999999      heading ""Avg|Row|Length""
column avg_space_freelist_blocks format 99999        heading ""Avg|Space|Freelist""
column num_freelist_blocks       format 99999        heading ""Num|Freelist|Block""

SELECT  owner,
	table_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
        num_rows,
        blocks,
        empty_blocks,
        avg_space,
        chain_cnt,
        avg_row_len,
        avg_space_freelist_blocks,
        num_freelist_blocks
FROM    dba_tables
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
AND	TEMPORARY = 'N'
ORDER BY owner, table_name;

prompt STATS: show Oracle statistics for all indexes

column index_name                format a30            heading ""Index|Name""
column last_analyzed             format a10            heading ""Last|Analyzed""
column blevel                    format 99999          heading ""Branch|Levels""
column leaf_blocks               format 999999999999   heading ""Leaf|Blocks""
column distinct_keys             format 999999999999   heading ""Distinct|Keys""
column avg_leaf_blocks_per_key   format 99999999       heading ""Avg Leaf|Blks|Per Key""
column avg_data_blocks_per_key   format 99999999       heading ""Avg Data|Blks|Per Key""
column clustering_factor         format 999999999999   heading ""Clustering|Factor""
column num_rows                  format 999999999999   heading ""Num|Rows""

SELECT  owner,
	table_name,
	index_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
        blevel,
        leaf_blocks,
        distinct_keys,
        avg_leaf_blocks_per_key,
        avg_data_blocks_per_key,
        clustering_factor,
        num_rows
FROM	dba_indexes
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
ORDER BY owner, table_name, index_name;

prompt STATS: show Oracle column statistics and histogram information

column column_name	format a30            heading ""Column|Name""
column num_distinct	format 999999999999   heading ""Number|Distinct""
column avg_col_len	format 99999          heading ""Avg|Column|Length""
column num_nulls	format 999999999999   heading ""Number|Nulls""
column num_buckets	format 999999         heading ""Number|Hist|Buckets""
column global_stats	format a12
column user_stats	format a10

-- Note that the ""scope"" column is available only from 12c.
SELECT	owner,
	table_name,
	column_name,
	TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	density,
	num_nulls,
	num_buckets,
	sample_size,
	global_stats,
	user_stats,
	avg_col_len,
	histogram
FROM	dba_tab_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
ORDER BY owner, table_name, column_name;

-----------------------------------------------------------------------------------------------------------------------------
--
-- These FREQUENCY histograms ake too long so comment them out for now
--
-- define MINROWS = 10000
--
-- prompt STATS: display information about the FREQUENCY histograms on NUMERIC columns (excluding CATALOGUE_CHANGE_ID and RATING_CATALOGUE_ID) for tables which have more than &MINROWS rows
-- 
-- SELECT	owner,
-- 	table_name,
-- 	column_name,
-- 	last_analyzed,
-- 	endpoint_value				column_value,
-- 	endpoint_number - nvl(prev_endpoint,0)	frequency
-- FROM    (
-- 	SELECT	h.owner owner,
-- 		h.table_name table_name,
-- 		h.column_name column_name,
--         	TO_CHAR(c.last_analyzed,'DD/MM/YYYY') AS last_analyzed,
-- 		h.endpoint_number endpoint_number,
-- 		lag(h.endpoint_number,1) over( order by h.endpoint_number) prev_endpoint,
-- 		h.endpoint_value
-- 	FROM	dba_tab_histograms h, dba_tab_col_statistics c, dba_tab_columns m, dba_tables t
-- 	WHERE	c.HISTOGRAM = 'FREQUENCY'
-- 	AND	c.owner not in (&gOracleSpecialUsers)
-- 	AND	c.owner <> 'IPF_ADMIN'
-- 	AND	c.owner <> 'IPF_AUDIT_ADMIN'
-- 	AND	c.column_name <> 'CATALOGUE_CHANGE_ID'
-- 	AND	c.column_name <> 'RATING_CATALOGUE_ID'
-- 	AND	t.owner = c.owner
-- 	AND	t.table_name = c.table_name
-- 	AND	t.num_rows > &MINROWS
-- 	AND	m.owner = c.owner
-- 	AND	m.table_name = c.table_name
-- 	AND	m.column_name = c.column_name
-- 	AND	m.table_name not like '%QUEUE%'
-- 	AND	m.data_type = 'NUMBER'
-- 	AND	h.owner = c.owner
-- 	AND	h.table_name = c.table_name
-- 	AND	h.column_name = c.column_name
-- 	)
-- ORDER BY 1, 2, 3, 4;
--  
-- 
-- prompt STATS: display information about the FREQUENCY histograms on STRING columns for tables which have more than &MINROWS rows
-- 
-- SELECT	owner,
--         table_name,
--         column_name,
-- 	last_analyzed,
--         ep_let                     status,
--         endpoint_number - ep_lag   ct
-- FROM	(
-- 	SELECT	h.owner owner,
-- 		h.table_name table_name,
-- 		h.column_name column_name,
--         	TO_CHAR(c.last_analyzed,'DD/MM/YYYY') AS last_analyzed,
--         	chr( to_number( substr(to_char(endpoint_value,'FMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'),1,2), 'XX'))     ep_let,
--         	endpoint_number,
--         	lag(endpoint_number,1,0) over(order by endpoint_number) ep_lag
-- 	FROM	dba_tab_histograms h, dba_tab_col_statistics c, dba_tab_columns m, dba_tables t
-- 	WHERE	c.HISTOGRAM = 'FREQUENCY'
-- 	AND	c.owner not in (&gOracleSpecialUsers)
-- 	AND	c.owner <> 'IPF_ADMIN'
-- 	AND	c.owner <> 'IPF_AUDIT_ADMIN'
-- 	AND	t.owner = c.owner
-- 	AND	t.table_name = c.table_name
-- 	AND	t.num_rows > &MINROWS
-- 	AND	m.owner = c.owner
-- 	AND	m.table_name = c.table_name
-- 	AND	m.column_name = c.column_name
-- 	AND	m.table_name not like '%QUEUE%'
-- 	AND	m.data_type = 'VARCHAR2'
-- 	AND	h.owner = c.owner
-- 	AND	h.table_name = c.table_name
-- 	AND	h.column_name = c.column_name
-- 	)
-- ORDER BY 1, 2, 3, 4;
-- 
-----------------------------------------------------------------------------------------------------------------------------

-- SQL> desc dba_stat_extensions
--  Name                                                              Null?    Type
--  ----------------------------------------------------------------- -------- --------------------------------------------
--  OWNER                                                             NOT NULL VARCHAR2(128)
--  TABLE_NAME                                                        NOT NULL VARCHAR2(128)
--  EXTENSION_NAME                                                    NOT NULL VARCHAR2(128)
--  EXTENSION                                                                  CLOB
--  CREATOR                                                                    VARCHAR2(6)
--  DROPPABLE                                                                  VARCHAR2(3)

prompt STATS: display information about the multi-column statistics
--
-- Note that these groups of columns are stored as hidden columns on the table, and statistics will be gathered
-- on those hidden columns in a similar way to the statistics for normal columns.
--
col extension_name for a30
col extension for a280

SELECT e.OWNER,
       e.TABLE_NAME,
       e.extension_name,
       t.histogram,
       t.num_distinct,
       e.extension
FROM   dba_stat_extensions e,
       dba_tab_col_statistics t
WHERE  e.owner not in (&gOracleSpecialUsers)
AND    t.owner = e.owner
AND    t.table_name = e.table_name
AND    e.extension_name=t.column_name
ORDER BY 1,2,3;

column partition_name            format a14             heading ""Partition|Name""
column subpartition_name         format a24             heading ""Sub-partition|Name""
-- Set number of characters printed for LOW_VALUE and HIGH_VALUE (which are RAW values, not LONG values, in this case)
-- set long 28
col LOW_VALUE format a28
col HIGH_VALUE format a28

prompt STATS: show Oracle statistics for partitions
SELECT	owner,
	table_name,
	partition_name,
	column_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	low_value,
	high_value,
	global_stats,
	histogram
FROM dba_part_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by 1, 2, 3, 4;

prompt STATS: show Oracle statistics for sub-partitions
SELECT	owner,
	table_name,
	subpartition_name,
	column_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	low_value,
	high_value,
	global_stats,
	histogram
FROM dba_subpart_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by 1, 2, 3, 4;

prompt STATS: show which Oracle statistics are locked
prompt
col STATTYPE_LOCKED for a15

prompt Statistics are locked for the following tables:
select OWNER, TABLE_NAME, STATTYPE_LOCKED
from DBA_TAB_STATISTICS
where STATTYPE_LOCKED is not null
AND	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by OWNER, TABLE_NAME;

prompt Statistics are locked for the following indexes:
select OWNER, TABLE_NAME, INDEX_NAME, STATTYPE_LOCKED
from DBA_IND_STATISTICS
where STATTYPE_LOCKED is not null
AND	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by OWNER, TABLE_NAME, INDEX_NAME;


--
-- The next two queries and the following comment are based on ""How to check dictionary and fixed objects statistics"" (MOS Doc ID 1474937.1)
--
-- Since version 10g, statistics on the data dictionary are mandatory for the cost-based optimizer to work properly.
-- Dictionary statistics include the statistics on the tables and indexes owned by SYS (and other internal RDBMS
-- schemas like SYSTEM) and the statistics on the fixed objects. Fixed objects are the internal X$ tables and the
-- so called dynamic performance views or V$ views which are based upon them. These are not real tables and indexes,
-- but rather memory structures. The statistics for the fixed objects need to be gathered manually as they are not
-- updated by the automatic statistics gathering: use DBMS_STATS.GATHER_FIXED_OBJECTS_STATS.
--
column month_last_analyzed      format a10		heading ""Month Last|Analyzed""
column dictionary_tables	format 9999999999	heading ""Dictionary|Tables""
column fixed_objects		format 9999999		heading ""Fixed|Objects""

prompt STATS: Report statistics for SYS tables
SELECT	NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS') month_last_analyzed,
	COUNT(*) dictionary_tables
FROM	dba_tables
WHERE	owner = 'SYS'
GROUP BY NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS')
ORDER BY 1 DESC;

prompt STATS: Report statistics for Fixed Objects
SELECT	NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS') month_last_analyzed,
	COUNT(*) fixed_objects
FROM	dba_tab_statistics
WHERE	object_type = 'FIXED TABLE'
GROUP BY NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS')
ORDER BY 1 DESC;

prompt STATS: Report SQL Plan Directives at Oracle 12c. (At Oracle 11g this query will not produce any output.)
whenever sqlerror continue

COLUMN dir_id FORMAT A20
column object_name format a30
COLUMN subobject_name format a40
COLUMN reason format a36

SELECT TO_CHAR(d.directive_id) dir_id, o.owner, o.object_name,
       o.subobject_name, o.object_type, d.type, d.state, d.reason
FROM   dba_sql_plan_directives d, dba_sql_plan_dir_objects o
WHERE  d.directive_id=o.directive_id
AND    o.owner not in (&gOracleSpecialUsers)
ORDER BY 1, 2, 3, 7, 4;
-- ORDER BY o.owner, o.object_name, d.state desc, o.subobject_name;

whenever sqlerror exit 1

-- End of script.






##########################################################
##########################################################
*/
SELECT
    n.nspname AS owner,
    c.relname AS table_name,
    pg_stat_all_tables.last_analyze::date AS last_analyzed,
    pg_stat_all_tables.n_live_tup AS num_rows,
    pg_relation_size(c.oid) AS table_size_bytes,
    pg_total_relation_size(c.oid) - pg_relation_size(c.oid) AS index_size_bytes
FROM pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_stat_all_tables ON pg_stat_all_tables.relid = c.oid
WHERE c.relkind = $1  -- only tables
AND n.nspname NOT IN ($2, $3)
ORDER BY owner, table_name",14.931719000000001,11,1.3574290000000002
"/*
prompt SCRIPT: ORA_M11_statistics

prompt STATS: show Oracle statistics for all tables

column owner                     format a20
column table_name                format a30          heading ""Table|Name""
column last_analyzed             format a10          heading ""Last|Analyzed""
column num_rows                  format 999999999999 heading ""Number|Rows""
column blocks                    format 9999999999   heading ""Num|Blocks""
column empty_blocks              format 9999999      heading ""Num|Empty|Blocks""
column avg_space                 format 999999       heading ""Avg|Space""
column chain_cnt                 format 99999        heading ""Row|Chain|Count""
column avg_row_len               format 9999999      heading ""Avg|Row|Length""
column avg_space_freelist_blocks format 99999        heading ""Avg|Space|Freelist""
column num_freelist_blocks       format 99999        heading ""Num|Freelist|Block""

SELECT  owner,
	table_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
        num_rows,
        blocks,
        empty_blocks,
        avg_space,
        chain_cnt,
        avg_row_len,
        avg_space_freelist_blocks,
        num_freelist_blocks
FROM    dba_tables
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
AND	TEMPORARY = 'N'
ORDER BY owner, table_name;

prompt STATS: show Oracle statistics for all indexes

column index_name                format a30            heading ""Index|Name""
column last_analyzed             format a10            heading ""Last|Analyzed""
column blevel                    format 99999          heading ""Branch|Levels""
column leaf_blocks               format 999999999999   heading ""Leaf|Blocks""
column distinct_keys             format 999999999999   heading ""Distinct|Keys""
column avg_leaf_blocks_per_key   format 99999999       heading ""Avg Leaf|Blks|Per Key""
column avg_data_blocks_per_key   format 99999999       heading ""Avg Data|Blks|Per Key""
column clustering_factor         format 999999999999   heading ""Clustering|Factor""
column num_rows                  format 999999999999   heading ""Num|Rows""

SELECT  owner,
	table_name,
	index_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
        blevel,
        leaf_blocks,
        distinct_keys,
        avg_leaf_blocks_per_key,
        avg_data_blocks_per_key,
        clustering_factor,
        num_rows
FROM	dba_indexes
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
ORDER BY owner, table_name, index_name;

prompt STATS: show Oracle column statistics and histogram information

column column_name	format a30            heading ""Column|Name""
column num_distinct	format 999999999999   heading ""Number|Distinct""
column avg_col_len	format 99999          heading ""Avg|Column|Length""
column num_nulls	format 999999999999   heading ""Number|Nulls""
column num_buckets	format 999999         heading ""Number|Hist|Buckets""
column global_stats	format a12
column user_stats	format a10

-- Note that the ""scope"" column is available only from 12c.
SELECT	owner,
	table_name,
	column_name,
	TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	density,
	num_nulls,
	num_buckets,
	sample_size,
	global_stats,
	user_stats,
	avg_col_len,
	histogram
FROM	dba_tab_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
ORDER BY owner, table_name, column_name;

-----------------------------------------------------------------------------------------------------------------------------
--
-- These FREQUENCY histograms ake too long so comment them out for now
--
-- define MINROWS = 10000
--
-- prompt STATS: display information about the FREQUENCY histograms on NUMERIC columns (excluding CATALOGUE_CHANGE_ID and RATING_CATALOGUE_ID) for tables which have more than &MINROWS rows
-- 
-- SELECT	owner,
-- 	table_name,
-- 	column_name,
-- 	last_analyzed,
-- 	endpoint_value				column_value,
-- 	endpoint_number - nvl(prev_endpoint,0)	frequency
-- FROM    (
-- 	SELECT	h.owner owner,
-- 		h.table_name table_name,
-- 		h.column_name column_name,
--         	TO_CHAR(c.last_analyzed,'DD/MM/YYYY') AS last_analyzed,
-- 		h.endpoint_number endpoint_number,
-- 		lag(h.endpoint_number,1) over( order by h.endpoint_number) prev_endpoint,
-- 		h.endpoint_value
-- 	FROM	dba_tab_histograms h, dba_tab_col_statistics c, dba_tab_columns m, dba_tables t
-- 	WHERE	c.HISTOGRAM = 'FREQUENCY'
-- 	AND	c.owner not in (&gOracleSpecialUsers)
-- 	AND	c.owner <> 'IPF_ADMIN'
-- 	AND	c.owner <> 'IPF_AUDIT_ADMIN'
-- 	AND	c.column_name <> 'CATALOGUE_CHANGE_ID'
-- 	AND	c.column_name <> 'RATING_CATALOGUE_ID'
-- 	AND	t.owner = c.owner
-- 	AND	t.table_name = c.table_name
-- 	AND	t.num_rows > &MINROWS
-- 	AND	m.owner = c.owner
-- 	AND	m.table_name = c.table_name
-- 	AND	m.column_name = c.column_name
-- 	AND	m.table_name not like '%QUEUE%'
-- 	AND	m.data_type = 'NUMBER'
-- 	AND	h.owner = c.owner
-- 	AND	h.table_name = c.table_name
-- 	AND	h.column_name = c.column_name
-- 	)
-- ORDER BY 1, 2, 3, 4;
--  
-- 
-- prompt STATS: display information about the FREQUENCY histograms on STRING columns for tables which have more than &MINROWS rows
-- 
-- SELECT	owner,
--         table_name,
--         column_name,
-- 	last_analyzed,
--         ep_let                     status,
--         endpoint_number - ep_lag   ct
-- FROM	(
-- 	SELECT	h.owner owner,
-- 		h.table_name table_name,
-- 		h.column_name column_name,
--         	TO_CHAR(c.last_analyzed,'DD/MM/YYYY') AS last_analyzed,
--         	chr( to_number( substr(to_char(endpoint_value,'FMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'),1,2), 'XX'))     ep_let,
--         	endpoint_number,
--         	lag(endpoint_number,1,0) over(order by endpoint_number) ep_lag
-- 	FROM	dba_tab_histograms h, dba_tab_col_statistics c, dba_tab_columns m, dba_tables t
-- 	WHERE	c.HISTOGRAM = 'FREQUENCY'
-- 	AND	c.owner not in (&gOracleSpecialUsers)
-- 	AND	c.owner <> 'IPF_ADMIN'
-- 	AND	c.owner <> 'IPF_AUDIT_ADMIN'
-- 	AND	t.owner = c.owner
-- 	AND	t.table_name = c.table_name
-- 	AND	t.num_rows > &MINROWS
-- 	AND	m.owner = c.owner
-- 	AND	m.table_name = c.table_name
-- 	AND	m.column_name = c.column_name
-- 	AND	m.table_name not like '%QUEUE%'
-- 	AND	m.data_type = 'VARCHAR2'
-- 	AND	h.owner = c.owner
-- 	AND	h.table_name = c.table_name
-- 	AND	h.column_name = c.column_name
-- 	)
-- ORDER BY 1, 2, 3, 4;
-- 
-----------------------------------------------------------------------------------------------------------------------------

-- SQL> desc dba_stat_extensions
--  Name                                                              Null?    Type
--  ----------------------------------------------------------------- -------- --------------------------------------------
--  OWNER                                                             NOT NULL VARCHAR2(128)
--  TABLE_NAME                                                        NOT NULL VARCHAR2(128)
--  EXTENSION_NAME                                                    NOT NULL VARCHAR2(128)
--  EXTENSION                                                                  CLOB
--  CREATOR                                                                    VARCHAR2(6)
--  DROPPABLE                                                                  VARCHAR2(3)

prompt STATS: display information about the multi-column statistics
--
-- Note that these groups of columns are stored as hidden columns on the table, and statistics will be gathered
-- on those hidden columns in a similar way to the statistics for normal columns.
--
col extension_name for a30
col extension for a280

SELECT e.OWNER,
       e.TABLE_NAME,
       e.extension_name,
       t.histogram,
       t.num_distinct,
       e.extension
FROM   dba_stat_extensions e,
       dba_tab_col_statistics t
WHERE  e.owner not in (&gOracleSpecialUsers)
AND    t.owner = e.owner
AND    t.table_name = e.table_name
AND    e.extension_name=t.column_name
ORDER BY 1,2,3;

column partition_name            format a14             heading ""Partition|Name""
column subpartition_name         format a24             heading ""Sub-partition|Name""
-- Set number of characters printed for LOW_VALUE and HIGH_VALUE (which are RAW values, not LONG values, in this case)
-- set long 28
col LOW_VALUE format a28
col HIGH_VALUE format a28

prompt STATS: show Oracle statistics for partitions
SELECT	owner,
	table_name,
	partition_name,
	column_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	low_value,
	high_value,
	global_stats,
	histogram
FROM dba_part_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by 1, 2, 3, 4;

prompt STATS: show Oracle statistics for sub-partitions
SELECT	owner,
	table_name,
	subpartition_name,
	column_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	low_value,
	high_value,
	global_stats,
	histogram
FROM dba_subpart_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by 1, 2, 3, 4;

prompt STATS: show which Oracle statistics are locked
prompt
col STATTYPE_LOCKED for a15

prompt Statistics are locked for the following tables:
select OWNER, TABLE_NAME, STATTYPE_LOCKED
from DBA_TAB_STATISTICS
where STATTYPE_LOCKED is not null
AND	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by OWNER, TABLE_NAME;

prompt Statistics are locked for the following indexes:
select OWNER, TABLE_NAME, INDEX_NAME, STATTYPE_LOCKED
from DBA_IND_STATISTICS
where STATTYPE_LOCKED is not null
AND	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by OWNER, TABLE_NAME, INDEX_NAME;


--
-- The next two queries and the following comment are based on ""How to check dictionary and fixed objects statistics"" (MOS Doc ID 1474937.1)
--
-- Since version 10g, statistics on the data dictionary are mandatory for the cost-based optimizer to work properly.
-- Dictionary statistics include the statistics on the tables and indexes owned by SYS (and other internal RDBMS
-- schemas like SYSTEM) and the statistics on the fixed objects. Fixed objects are the internal X$ tables and the
-- so called dynamic performance views or V$ views which are based upon them. These are not real tables and indexes,
-- but rather memory structures. The statistics for the fixed objects need to be gathered manually as they are not
-- updated by the automatic statistics gathering: use DBMS_STATS.GATHER_FIXED_OBJECTS_STATS.
--
column month_last_analyzed      format a10		heading ""Month Last|Analyzed""
column dictionary_tables	format 9999999999	heading ""Dictionary|Tables""
column fixed_objects		format 9999999		heading ""Fixed|Objects""

prompt STATS: Report statistics for SYS tables
SELECT	NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS') month_last_analyzed,
	COUNT(*) dictionary_tables
FROM	dba_tables
WHERE	owner = 'SYS'
GROUP BY NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS')
ORDER BY 1 DESC;

prompt STATS: Report statistics for Fixed Objects
SELECT	NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS') month_last_analyzed,
	COUNT(*) fixed_objects
FROM	dba_tab_statistics
WHERE	object_type = 'FIXED TABLE'
GROUP BY NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS')
ORDER BY 1 DESC;

prompt STATS: Report SQL Plan Directives at Oracle 12c. (At Oracle 11g this query will not produce any output.)
whenever sqlerror continue

COLUMN dir_id FORMAT A20
column object_name format a30
COLUMN subobject_name format a40
COLUMN reason format a36

SELECT TO_CHAR(d.directive_id) dir_id, o.owner, o.object_name,
       o.subobject_name, o.object_type, d.type, d.state, d.reason
FROM   dba_sql_plan_directives d, dba_sql_plan_dir_objects o
WHERE  d.directive_id=o.directive_id
AND    o.owner not in (&gOracleSpecialUsers)
ORDER BY 1, 2, 3, 7, 4;
-- ORDER BY o.owner, o.object_name, d.state desc, o.subobject_name;

whenever sqlerror exit 1

-- End of script.






##########################################################
##########################################################
*/
SELECT
    n.nspname AS owner,
    c.relname AS table_name,
    pg_stat_all_tables.last_analyze::date AS last_analyzed,
    pg_stat_all_tables.n_live_tup AS num_rows,
    pg_relation_size(c.oid) AS table_size_bytes,
    pg_total_relation_size(c.oid) - pg_relation_size(c.oid) AS index_size_bytes
FROM pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_stat_all_tables ON pg_stat_all_tables.relid = c.oid
WHERE c.relkind = $1  -- only tables
AND n.nspname NOT IN ($2, $3)
ORDER BY owner, table_name",14.931719000000001,11,1.3574290000000002
"/*
prompt SCRIPT: ORA_M11_statistics

prompt STATS: show Oracle statistics for all tables

column owner                     format a20
column table_name                format a30          heading ""Table|Name""
column last_analyzed             format a10          heading ""Last|Analyzed""
column num_rows                  format 999999999999 heading ""Number|Rows""
column blocks                    format 9999999999   heading ""Num|Blocks""
column empty_blocks              format 9999999      heading ""Num|Empty|Blocks""
column avg_space                 format 999999       heading ""Avg|Space""
column chain_cnt                 format 99999        heading ""Row|Chain|Count""
column avg_row_len               format 9999999      heading ""Avg|Row|Length""
column avg_space_freelist_blocks format 99999        heading ""Avg|Space|Freelist""
column num_freelist_blocks       format 99999        heading ""Num|Freelist|Block""

SELECT  owner,
	table_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
        num_rows,
        blocks,
        empty_blocks,
        avg_space,
        chain_cnt,
        avg_row_len,
        avg_space_freelist_blocks,
        num_freelist_blocks
FROM    dba_tables
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
AND	TEMPORARY = 'N'
ORDER BY owner, table_name;

prompt STATS: show Oracle statistics for all indexes

column index_name                format a30            heading ""Index|Name""
column last_analyzed             format a10            heading ""Last|Analyzed""
column blevel                    format 99999          heading ""Branch|Levels""
column leaf_blocks               format 999999999999   heading ""Leaf|Blocks""
column distinct_keys             format 999999999999   heading ""Distinct|Keys""
column avg_leaf_blocks_per_key   format 99999999       heading ""Avg Leaf|Blks|Per Key""
column avg_data_blocks_per_key   format 99999999       heading ""Avg Data|Blks|Per Key""
column clustering_factor         format 999999999999   heading ""Clustering|Factor""
column num_rows                  format 999999999999   heading ""Num|Rows""

SELECT  owner,
	table_name,
	index_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
        blevel,
        leaf_blocks,
        distinct_keys,
        avg_leaf_blocks_per_key,
        avg_data_blocks_per_key,
        clustering_factor,
        num_rows
FROM	dba_indexes
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
ORDER BY owner, table_name, index_name;

prompt STATS: show Oracle column statistics and histogram information

column column_name	format a30            heading ""Column|Name""
column num_distinct	format 999999999999   heading ""Number|Distinct""
column avg_col_len	format 99999          heading ""Avg|Column|Length""
column num_nulls	format 999999999999   heading ""Number|Nulls""
column num_buckets	format 999999         heading ""Number|Hist|Buckets""
column global_stats	format a12
column user_stats	format a10

-- Note that the ""scope"" column is available only from 12c.
SELECT	owner,
	table_name,
	column_name,
	TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	density,
	num_nulls,
	num_buckets,
	sample_size,
	global_stats,
	user_stats,
	avg_col_len,
	histogram
FROM	dba_tab_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
ORDER BY owner, table_name, column_name;

-----------------------------------------------------------------------------------------------------------------------------
--
-- These FREQUENCY histograms ake too long so comment them out for now
--
-- define MINROWS = 10000
--
-- prompt STATS: display information about the FREQUENCY histograms on NUMERIC columns (excluding CATALOGUE_CHANGE_ID and RATING_CATALOGUE_ID) for tables which have more than &MINROWS rows
-- 
-- SELECT	owner,
-- 	table_name,
-- 	column_name,
-- 	last_analyzed,
-- 	endpoint_value				column_value,
-- 	endpoint_number - nvl(prev_endpoint,0)	frequency
-- FROM    (
-- 	SELECT	h.owner owner,
-- 		h.table_name table_name,
-- 		h.column_name column_name,
--         	TO_CHAR(c.last_analyzed,'DD/MM/YYYY') AS last_analyzed,
-- 		h.endpoint_number endpoint_number,
-- 		lag(h.endpoint_number,1) over( order by h.endpoint_number) prev_endpoint,
-- 		h.endpoint_value
-- 	FROM	dba_tab_histograms h, dba_tab_col_statistics c, dba_tab_columns m, dba_tables t
-- 	WHERE	c.HISTOGRAM = 'FREQUENCY'
-- 	AND	c.owner not in (&gOracleSpecialUsers)
-- 	AND	c.owner <> 'IPF_ADMIN'
-- 	AND	c.owner <> 'IPF_AUDIT_ADMIN'
-- 	AND	c.column_name <> 'CATALOGUE_CHANGE_ID'
-- 	AND	c.column_name <> 'RATING_CATALOGUE_ID'
-- 	AND	t.owner = c.owner
-- 	AND	t.table_name = c.table_name
-- 	AND	t.num_rows > &MINROWS
-- 	AND	m.owner = c.owner
-- 	AND	m.table_name = c.table_name
-- 	AND	m.column_name = c.column_name
-- 	AND	m.table_name not like '%QUEUE%'
-- 	AND	m.data_type = 'NUMBER'
-- 	AND	h.owner = c.owner
-- 	AND	h.table_name = c.table_name
-- 	AND	h.column_name = c.column_name
-- 	)
-- ORDER BY 1, 2, 3, 4;
--  
-- 
-- prompt STATS: display information about the FREQUENCY histograms on STRING columns for tables which have more than &MINROWS rows
-- 
-- SELECT	owner,
--         table_name,
--         column_name,
-- 	last_analyzed,
--         ep_let                     status,
--         endpoint_number - ep_lag   ct
-- FROM	(
-- 	SELECT	h.owner owner,
-- 		h.table_name table_name,
-- 		h.column_name column_name,
--         	TO_CHAR(c.last_analyzed,'DD/MM/YYYY') AS last_analyzed,
--         	chr( to_number( substr(to_char(endpoint_value,'FMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'),1,2), 'XX'))     ep_let,
--         	endpoint_number,
--         	lag(endpoint_number,1,0) over(order by endpoint_number) ep_lag
-- 	FROM	dba_tab_histograms h, dba_tab_col_statistics c, dba_tab_columns m, dba_tables t
-- 	WHERE	c.HISTOGRAM = 'FREQUENCY'
-- 	AND	c.owner not in (&gOracleSpecialUsers)
-- 	AND	c.owner <> 'IPF_ADMIN'
-- 	AND	c.owner <> 'IPF_AUDIT_ADMIN'
-- 	AND	t.owner = c.owner
-- 	AND	t.table_name = c.table_name
-- 	AND	t.num_rows > &MINROWS
-- 	AND	m.owner = c.owner
-- 	AND	m.table_name = c.table_name
-- 	AND	m.column_name = c.column_name
-- 	AND	m.table_name not like '%QUEUE%'
-- 	AND	m.data_type = 'VARCHAR2'
-- 	AND	h.owner = c.owner
-- 	AND	h.table_name = c.table_name
-- 	AND	h.column_name = c.column_name
-- 	)
-- ORDER BY 1, 2, 3, 4;
-- 
-----------------------------------------------------------------------------------------------------------------------------

-- SQL> desc dba_stat_extensions
--  Name                                                              Null?    Type
--  ----------------------------------------------------------------- -------- --------------------------------------------
--  OWNER                                                             NOT NULL VARCHAR2(128)
--  TABLE_NAME                                                        NOT NULL VARCHAR2(128)
--  EXTENSION_NAME                                                    NOT NULL VARCHAR2(128)
--  EXTENSION                                                                  CLOB
--  CREATOR                                                                    VARCHAR2(6)
--  DROPPABLE                                                                  VARCHAR2(3)

prompt STATS: display information about the multi-column statistics
--
-- Note that these groups of columns are stored as hidden columns on the table, and statistics will be gathered
-- on those hidden columns in a similar way to the statistics for normal columns.
--
col extension_name for a30
col extension for a280

SELECT e.OWNER,
       e.TABLE_NAME,
       e.extension_name,
       t.histogram,
       t.num_distinct,
       e.extension
FROM   dba_stat_extensions e,
       dba_tab_col_statistics t
WHERE  e.owner not in (&gOracleSpecialUsers)
AND    t.owner = e.owner
AND    t.table_name = e.table_name
AND    e.extension_name=t.column_name
ORDER BY 1,2,3;

column partition_name            format a14             heading ""Partition|Name""
column subpartition_name         format a24             heading ""Sub-partition|Name""
-- Set number of characters printed for LOW_VALUE and HIGH_VALUE (which are RAW values, not LONG values, in this case)
-- set long 28
col LOW_VALUE format a28
col HIGH_VALUE format a28

prompt STATS: show Oracle statistics for partitions
SELECT	owner,
	table_name,
	partition_name,
	column_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	low_value,
	high_value,
	global_stats,
	histogram
FROM dba_part_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by 1, 2, 3, 4;

prompt STATS: show Oracle statistics for sub-partitions
SELECT	owner,
	table_name,
	subpartition_name,
	column_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	low_value,
	high_value,
	global_stats,
	histogram
FROM dba_subpart_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by 1, 2, 3, 4;

prompt STATS: show which Oracle statistics are locked
prompt
col STATTYPE_LOCKED for a15

prompt Statistics are locked for the following tables:
select OWNER, TABLE_NAME, STATTYPE_LOCKED
from DBA_TAB_STATISTICS
where STATTYPE_LOCKED is not null
AND	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by OWNER, TABLE_NAME;

prompt Statistics are locked for the following indexes:
select OWNER, TABLE_NAME, INDEX_NAME, STATTYPE_LOCKED
from DBA_IND_STATISTICS
where STATTYPE_LOCKED is not null
AND	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by OWNER, TABLE_NAME, INDEX_NAME;


--
-- The next two queries and the following comment are based on ""How to check dictionary and fixed objects statistics"" (MOS Doc ID 1474937.1)
--
-- Since version 10g, statistics on the data dictionary are mandatory for the cost-based optimizer to work properly.
-- Dictionary statistics include the statistics on the tables and indexes owned by SYS (and other internal RDBMS
-- schemas like SYSTEM) and the statistics on the fixed objects. Fixed objects are the internal X$ tables and the
-- so called dynamic performance views or V$ views which are based upon them. These are not real tables and indexes,
-- but rather memory structures. The statistics for the fixed objects need to be gathered manually as they are not
-- updated by the automatic statistics gathering: use DBMS_STATS.GATHER_FIXED_OBJECTS_STATS.
--
column month_last_analyzed      format a10		heading ""Month Last|Analyzed""
column dictionary_tables	format 9999999999	heading ""Dictionary|Tables""
column fixed_objects		format 9999999		heading ""Fixed|Objects""

prompt STATS: Report statistics for SYS tables
SELECT	NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS') month_last_analyzed,
	COUNT(*) dictionary_tables
FROM	dba_tables
WHERE	owner = 'SYS'
GROUP BY NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS')
ORDER BY 1 DESC;

prompt STATS: Report statistics for Fixed Objects
SELECT	NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS') month_last_analyzed,
	COUNT(*) fixed_objects
FROM	dba_tab_statistics
WHERE	object_type = 'FIXED TABLE'
GROUP BY NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS')
ORDER BY 1 DESC;

prompt STATS: Report SQL Plan Directives at Oracle 12c. (At Oracle 11g this query will not produce any output.)
whenever sqlerror continue

COLUMN dir_id FORMAT A20
column object_name format a30
COLUMN subobject_name format a40
COLUMN reason format a36

SELECT TO_CHAR(d.directive_id) dir_id, o.owner, o.object_name,
       o.subobject_name, o.object_type, d.type, d.state, d.reason
FROM   dba_sql_plan_directives d, dba_sql_plan_dir_objects o
WHERE  d.directive_id=o.directive_id
AND    o.owner not in (&gOracleSpecialUsers)
ORDER BY 1, 2, 3, 7, 4;
-- ORDER BY o.owner, o.object_name, d.state desc, o.subobject_name;

whenever sqlerror exit 1

-- End of script.






##########################################################
##########################################################
*/
SELECT
    n.nspname AS owner,
    c.relname AS table_name,
    pg_stat_all_tables.last_analyze::date AS last_analyzed,
    pg_stat_all_tables.n_live_tup AS num_rows,
    pg_relation_size(c.oid) AS table_size_bytes,
    pg_total_relation_size(c.oid) - pg_relation_size(c.oid) AS index_size_bytes
FROM pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_stat_all_tables ON pg_stat_all_tables.relid = c.oid
WHERE c.relkind = $1  -- only tables
AND n.nspname NOT IN ($2, $3)
ORDER BY owner, table_name",14.931719000000001,11,1.3574290000000002
"/*
prompt SCRIPT: ORA_M11_statistics

prompt STATS: show Oracle statistics for all tables

column owner                     format a20
column table_name                format a30          heading ""Table|Name""
column last_analyzed             format a10          heading ""Last|Analyzed""
column num_rows                  format 999999999999 heading ""Number|Rows""
column blocks                    format 9999999999   heading ""Num|Blocks""
column empty_blocks              format 9999999      heading ""Num|Empty|Blocks""
column avg_space                 format 999999       heading ""Avg|Space""
column chain_cnt                 format 99999        heading ""Row|Chain|Count""
column avg_row_len               format 9999999      heading ""Avg|Row|Length""
column avg_space_freelist_blocks format 99999        heading ""Avg|Space|Freelist""
column num_freelist_blocks       format 99999        heading ""Num|Freelist|Block""

SELECT  owner,
	table_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
        num_rows,
        blocks,
        empty_blocks,
        avg_space,
        chain_cnt,
        avg_row_len,
        avg_space_freelist_blocks,
        num_freelist_blocks
FROM    dba_tables
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
AND	TEMPORARY = 'N'
ORDER BY owner, table_name;

prompt STATS: show Oracle statistics for all indexes

column index_name                format a30            heading ""Index|Name""
column last_analyzed             format a10            heading ""Last|Analyzed""
column blevel                    format 99999          heading ""Branch|Levels""
column leaf_blocks               format 999999999999   heading ""Leaf|Blocks""
column distinct_keys             format 999999999999   heading ""Distinct|Keys""
column avg_leaf_blocks_per_key   format 99999999       heading ""Avg Leaf|Blks|Per Key""
column avg_data_blocks_per_key   format 99999999       heading ""Avg Data|Blks|Per Key""
column clustering_factor         format 999999999999   heading ""Clustering|Factor""
column num_rows                  format 999999999999   heading ""Num|Rows""

SELECT  owner,
	table_name,
	index_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
        blevel,
        leaf_blocks,
        distinct_keys,
        avg_leaf_blocks_per_key,
        avg_data_blocks_per_key,
        clustering_factor,
        num_rows
FROM	dba_indexes
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
ORDER BY owner, table_name, index_name;

prompt STATS: show Oracle column statistics and histogram information

column column_name	format a30            heading ""Column|Name""
column num_distinct	format 999999999999   heading ""Number|Distinct""
column avg_col_len	format 99999          heading ""Avg|Column|Length""
column num_nulls	format 999999999999   heading ""Number|Nulls""
column num_buckets	format 999999         heading ""Number|Hist|Buckets""
column global_stats	format a12
column user_stats	format a10

-- Note that the ""scope"" column is available only from 12c.
SELECT	owner,
	table_name,
	column_name,
	TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	density,
	num_nulls,
	num_buckets,
	sample_size,
	global_stats,
	user_stats,
	avg_col_len,
	histogram
FROM	dba_tab_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
ORDER BY owner, table_name, column_name;

-----------------------------------------------------------------------------------------------------------------------------
--
-- These FREQUENCY histograms ake too long so comment them out for now
--
-- define MINROWS = 10000
--
-- prompt STATS: display information about the FREQUENCY histograms on NUMERIC columns (excluding CATALOGUE_CHANGE_ID and RATING_CATALOGUE_ID) for tables which have more than &MINROWS rows
-- 
-- SELECT	owner,
-- 	table_name,
-- 	column_name,
-- 	last_analyzed,
-- 	endpoint_value				column_value,
-- 	endpoint_number - nvl(prev_endpoint,0)	frequency
-- FROM    (
-- 	SELECT	h.owner owner,
-- 		h.table_name table_name,
-- 		h.column_name column_name,
--         	TO_CHAR(c.last_analyzed,'DD/MM/YYYY') AS last_analyzed,
-- 		h.endpoint_number endpoint_number,
-- 		lag(h.endpoint_number,1) over( order by h.endpoint_number) prev_endpoint,
-- 		h.endpoint_value
-- 	FROM	dba_tab_histograms h, dba_tab_col_statistics c, dba_tab_columns m, dba_tables t
-- 	WHERE	c.HISTOGRAM = 'FREQUENCY'
-- 	AND	c.owner not in (&gOracleSpecialUsers)
-- 	AND	c.owner <> 'IPF_ADMIN'
-- 	AND	c.owner <> 'IPF_AUDIT_ADMIN'
-- 	AND	c.column_name <> 'CATALOGUE_CHANGE_ID'
-- 	AND	c.column_name <> 'RATING_CATALOGUE_ID'
-- 	AND	t.owner = c.owner
-- 	AND	t.table_name = c.table_name
-- 	AND	t.num_rows > &MINROWS
-- 	AND	m.owner = c.owner
-- 	AND	m.table_name = c.table_name
-- 	AND	m.column_name = c.column_name
-- 	AND	m.table_name not like '%QUEUE%'
-- 	AND	m.data_type = 'NUMBER'
-- 	AND	h.owner = c.owner
-- 	AND	h.table_name = c.table_name
-- 	AND	h.column_name = c.column_name
-- 	)
-- ORDER BY 1, 2, 3, 4;
--  
-- 
-- prompt STATS: display information about the FREQUENCY histograms on STRING columns for tables which have more than &MINROWS rows
-- 
-- SELECT	owner,
--         table_name,
--         column_name,
-- 	last_analyzed,
--         ep_let                     status,
--         endpoint_number - ep_lag   ct
-- FROM	(
-- 	SELECT	h.owner owner,
-- 		h.table_name table_name,
-- 		h.column_name column_name,
--         	TO_CHAR(c.last_analyzed,'DD/MM/YYYY') AS last_analyzed,
--         	chr( to_number( substr(to_char(endpoint_value,'FMxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'),1,2), 'XX'))     ep_let,
--         	endpoint_number,
--         	lag(endpoint_number,1,0) over(order by endpoint_number) ep_lag
-- 	FROM	dba_tab_histograms h, dba_tab_col_statistics c, dba_tab_columns m, dba_tables t
-- 	WHERE	c.HISTOGRAM = 'FREQUENCY'
-- 	AND	c.owner not in (&gOracleSpecialUsers)
-- 	AND	c.owner <> 'IPF_ADMIN'
-- 	AND	c.owner <> 'IPF_AUDIT_ADMIN'
-- 	AND	t.owner = c.owner
-- 	AND	t.table_name = c.table_name
-- 	AND	t.num_rows > &MINROWS
-- 	AND	m.owner = c.owner
-- 	AND	m.table_name = c.table_name
-- 	AND	m.column_name = c.column_name
-- 	AND	m.table_name not like '%QUEUE%'
-- 	AND	m.data_type = 'VARCHAR2'
-- 	AND	h.owner = c.owner
-- 	AND	h.table_name = c.table_name
-- 	AND	h.column_name = c.column_name
-- 	)
-- ORDER BY 1, 2, 3, 4;
-- 
-----------------------------------------------------------------------------------------------------------------------------

-- SQL> desc dba_stat_extensions
--  Name                                                              Null?    Type
--  ----------------------------------------------------------------- -------- --------------------------------------------
--  OWNER                                                             NOT NULL VARCHAR2(128)
--  TABLE_NAME                                                        NOT NULL VARCHAR2(128)
--  EXTENSION_NAME                                                    NOT NULL VARCHAR2(128)
--  EXTENSION                                                                  CLOB
--  CREATOR                                                                    VARCHAR2(6)
--  DROPPABLE                                                                  VARCHAR2(3)

prompt STATS: display information about the multi-column statistics
--
-- Note that these groups of columns are stored as hidden columns on the table, and statistics will be gathered
-- on those hidden columns in a similar way to the statistics for normal columns.
--
col extension_name for a30
col extension for a280

SELECT e.OWNER,
       e.TABLE_NAME,
       e.extension_name,
       t.histogram,
       t.num_distinct,
       e.extension
FROM   dba_stat_extensions e,
       dba_tab_col_statistics t
WHERE  e.owner not in (&gOracleSpecialUsers)
AND    t.owner = e.owner
AND    t.table_name = e.table_name
AND    e.extension_name=t.column_name
ORDER BY 1,2,3;

column partition_name            format a14             heading ""Partition|Name""
column subpartition_name         format a24             heading ""Sub-partition|Name""
-- Set number of characters printed for LOW_VALUE and HIGH_VALUE (which are RAW values, not LONG values, in this case)
-- set long 28
col LOW_VALUE format a28
col HIGH_VALUE format a28

prompt STATS: show Oracle statistics for partitions
SELECT	owner,
	table_name,
	partition_name,
	column_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	low_value,
	high_value,
	global_stats,
	histogram
FROM dba_part_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by 1, 2, 3, 4;

prompt STATS: show Oracle statistics for sub-partitions
SELECT	owner,
	table_name,
	subpartition_name,
	column_name,
        TO_CHAR(last_analyzed,'DD/MM/YYYY') AS last_analyzed,
	num_distinct,
	low_value,
	high_value,
	global_stats,
	histogram
FROM dba_subpart_col_statistics
WHERE	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by 1, 2, 3, 4;

prompt STATS: show which Oracle statistics are locked
prompt
col STATTYPE_LOCKED for a15

prompt Statistics are locked for the following tables:
select OWNER, TABLE_NAME, STATTYPE_LOCKED
from DBA_TAB_STATISTICS
where STATTYPE_LOCKED is not null
AND	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by OWNER, TABLE_NAME;

prompt Statistics are locked for the following indexes:
select OWNER, TABLE_NAME, INDEX_NAME, STATTYPE_LOCKED
from DBA_IND_STATISTICS
where STATTYPE_LOCKED is not null
AND	owner not in (&gOracleSpecialUsers)
AND	table_name not like 'SYS_IOT_OVER_%'
AND	table_name not like 'AQ$_%'
AND	table_name not in (select QUEUE_TABLE from all_queue_tables)
order by OWNER, TABLE_NAME, INDEX_NAME;


--
-- The next two queries and the following comment are based on ""How to check dictionary and fixed objects statistics"" (MOS Doc ID 1474937.1)
--
-- Since version 10g, statistics on the data dictionary are mandatory for the cost-based optimizer to work properly.
-- Dictionary statistics include the statistics on the tables and indexes owned by SYS (and other internal RDBMS
-- schemas like SYSTEM) and the statistics on the fixed objects. Fixed objects are the internal X$ tables and the
-- so called dynamic performance views or V$ views which are based upon them. These are not real tables and indexes,
-- but rather memory structures. The statistics for the fixed objects need to be gathered manually as they are not
-- updated by the automatic statistics gathering: use DBMS_STATS.GATHER_FIXED_OBJECTS_STATS.
--
column month_last_analyzed      format a10		heading ""Month Last|Analyzed""
column dictionary_tables	format 9999999999	heading ""Dictionary|Tables""
column fixed_objects		format 9999999		heading ""Fixed|Objects""

prompt STATS: Report statistics for SYS tables
SELECT	NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS') month_last_analyzed,
	COUNT(*) dictionary_tables
FROM	dba_tables
WHERE	owner = 'SYS'
GROUP BY NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS')
ORDER BY 1 DESC;

prompt STATS: Report statistics for Fixed Objects
SELECT	NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS') month_last_analyzed,
	COUNT(*) fixed_objects
FROM	dba_tab_statistics
WHERE	object_type = 'FIXED TABLE'
GROUP BY NVL(TO_CHAR(TRUNC(last_analyzed,'MM'),'YYYY.MM'), 'NO STATS')
ORDER BY 1 DESC;

prompt STATS: Report SQL Plan Directives at Oracle 12c. (At Oracle 11g this query will not produce any output.)
whenever sqlerror continue

COLUMN dir_id FORMAT A20
column object_name format a30
COLUMN subobject_name format a40
COLUMN reason format a36

SELECT TO_CHAR(d.directive_id) dir_id, o.owner, o.object_name,
       o.subobject_name, o.object_type, d.type, d.state, d.reason
FROM   dba_sql_plan_directives d, dba_sql_plan_dir_objects o
WHERE  d.directive_id=o.directive_id
AND    o.owner not in (&gOracleSpecialUsers)
ORDER BY 1, 2, 3, 7, 4;
-- ORDER BY o.owner, o.object_name, d.state desc, o.subobject_name;

whenever sqlerror exit 1

-- End of script.






##########################################################
##########################################################
*/
SELECT
    n.nspname AS owner,
    c.relname AS table_name,
    pg_stat_all_tables.last_analyze::date AS last_analyzed,
    pg_stat_all_tables.n_live_tup AS num_rows,
    pg_relation_size(c.oid) AS table_size_bytes,
    pg_total_relation_size(c.oid) - pg_relation_size(c.oid) AS index_size_bytes
FROM pg_class c
JOIN pg_namespace n ON n.oid = c.relnamespace
LEFT JOIN pg_stat_all_tables ON pg_stat_all_tables.relid = c.oid
WHERE c.relkind = $1  -- only tables
AND n.nspname NOT IN ($2, $3)
ORDER BY owner, table_name",14.931719000000001,11,1.3574290000000002
alter table pgbench_branches add primary key (bid),13.035635,3,4.345211666666667
alter table pgbench_branches add primary key (bid),13.035635,3,4.345211666666667
alter table pgbench_branches add primary key (bid),13.035635,3,4.345211666666667
alter table pgbench_branches add primary key (bid),13.035635,3,4.345211666666667
alter table pgbench_branches add primary key (bid),13.035635,3,4.345211666666667
select * from statistics.temp_pg_stat_statements,13.003523,1,13.003523
select * from statistics.temp_pg_stat_statements,13.003523,1,13.003523
select * from statistics.temp_pg_stat_statements,13.003523,1,13.003523
select * from statistics.temp_pg_stat_statements,13.003523,1,13.003523
select * from statistics.temp_pg_stat_statements,13.003523,1,13.003523
"SELECT pid, ts, event_type, event, pss.query
    FROM pg_wait_sampling_get_history() pws JOIN pg_stat_statements pss
	ON pws.queryid = pss.queryid
    WHERE ts > now() - INTERVAL $1",12.391242,1,12.391242
"SELECT pid, ts, event_type, event, pss.query
    FROM pg_wait_sampling_get_history() pws JOIN pg_stat_statements pss
	ON pws.queryid = pss.queryid
    WHERE ts > now() - INTERVAL $1",12.391242,1,12.391242
"SELECT pid, ts, event_type, event, pss.query
    FROM pg_wait_sampling_get_history() pws JOIN pg_stat_statements pss
	ON pws.queryid = pss.queryid
    WHERE ts > now() - INTERVAL $1",12.391242,1,12.391242
"SELECT pid, ts, event_type, event, pss.query
    FROM pg_wait_sampling_get_history() pws JOIN pg_stat_statements pss
	ON pws.queryid = pss.queryid
    WHERE ts > now() - INTERVAL $1",12.391242,1,12.391242
"SELECT pid, ts, event_type, event, pss.query
    FROM pg_wait_sampling_get_history() pws JOIN pg_stat_statements pss
	ON pws.queryid = pss.queryid
    WHERE ts > now() - INTERVAL $1",12.391242,1,12.391242
"SELECT name, setting, sourcefile, applied, error
FROM pg_file_settings
ORDER BY name",12.306845000000001,8,1.5383556250000003
"SELECT name, setting, sourcefile, applied, error
FROM pg_file_settings
ORDER BY name",12.306845000000001,8,1.5383556250000003
"SELECT name, setting, sourcefile, applied, error
FROM pg_file_settings
ORDER BY name",12.306845000000001,8,1.5383556250000003
"SELECT name, setting, sourcefile, applied, error
FROM pg_file_settings
ORDER BY name",12.306845000000001,8,1.5383556250000003
"SELECT name, setting, sourcefile, applied, error
FROM pg_file_settings
ORDER BY name",12.306845000000001,8,1.5383556250000003
"SELECT name, setting, unit, sourcefile, short_desc
FROM pg_settings
ORDER BY name",12.043796,8,1.5054744999999998
"SELECT name, setting, unit, sourcefile, short_desc
FROM pg_settings
ORDER BY name",12.043796,8,1.5054744999999998
"SELECT name, setting, unit, sourcefile, short_desc
FROM pg_settings
ORDER BY name",12.043796,8,1.5054744999999998
"SELECT name, setting, unit, sourcefile, short_desc
FROM pg_settings
ORDER BY name",12.043796,8,1.5054744999999998
"SELECT name, setting, unit, sourcefile, short_desc
FROM pg_settings
ORDER BY name",12.043796,8,1.5054744999999998
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %% WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %% WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %% WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",11.972642,1,11.972642
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %% WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %% WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %% WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",11.972642,1,11.972642
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %% WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %% WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %% WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",11.972642,1,11.972642
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %% WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %% WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %% WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",11.972642,1,11.972642
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %% WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %% WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %% WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %% WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",11.972642,1,11.972642
"SELECT setting AS archive_mode
FROM pg_settings
WHERE name = $1",11.47307,24,0.47804458333333344
"SELECT setting AS archive_mode
FROM pg_settings
WHERE name = $1",11.47307,24,0.47804458333333344
"SELECT setting AS archive_mode
FROM pg_settings
WHERE name = $1",11.47307,24,0.47804458333333344
"SELECT setting AS archive_mode
FROM pg_settings
WHERE name = $1",11.47307,24,0.47804458333333344
"SELECT setting AS archive_mode
FROM pg_settings
WHERE name = $1",11.47307,24,0.47804458333333344
"/*
prompt SCRIPT: ORA_N03_all_views

column owner      format a20      heading ""View|Owner""
column view_name  format a30      heading ""View|Name""
column text                       heading ""Source|Code""

set long 5000

prompt
prompt STATS: List all non-system views (excluding AQ$...).
prompt

select  OWNER,
	VIEW_NAME,
        TEXT
        from ALL_VIEWS
where   OWNER not in (&gOracleSpecialUsers)
and     VIEW_NAME not like 'AQ$%'
order by 1, 2;

set long 80
-- End of script.





#######################################################################
#######################################################################
*/
-- File :        N03_all_views.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system views (except those for queues).
--              Information on Geneva/RB views is captured during health checks.
--
-- Author :      Andy Coleman
--
-- Date :        14th September 2011
--
-- List all non-system views (excluding AQ$ views)
SELECT
    viewowner AS owner,
    viewname AS view_name,
    definition AS text
FROM
    pg_views
WHERE
    schemaname NOT IN ($1, $2)
    AND viewname NOT LIKE $3
ORDER BY
    viewowner, viewname",11.301915,8,1.4127393750000001
"/*
prompt SCRIPT: ORA_N03_all_views

column owner      format a20      heading ""View|Owner""
column view_name  format a30      heading ""View|Name""
column text                       heading ""Source|Code""

set long 5000

prompt
prompt STATS: List all non-system views (excluding AQ$...).
prompt

select  OWNER,
	VIEW_NAME,
        TEXT
        from ALL_VIEWS
where   OWNER not in (&gOracleSpecialUsers)
and     VIEW_NAME not like 'AQ$%'
order by 1, 2;

set long 80
-- End of script.





#######################################################################
#######################################################################
*/
-- File :        N03_all_views.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system views (except those for queues).
--              Information on Geneva/RB views is captured during health checks.
--
-- Author :      Andy Coleman
--
-- Date :        14th September 2011
--
-- List all non-system views (excluding AQ$ views)
SELECT
    viewowner AS owner,
    viewname AS view_name,
    definition AS text
FROM
    pg_views
WHERE
    schemaname NOT IN ($1, $2)
    AND viewname NOT LIKE $3
ORDER BY
    viewowner, viewname",11.301915,8,1.4127393750000001
"/*
prompt SCRIPT: ORA_N03_all_views

column owner      format a20      heading ""View|Owner""
column view_name  format a30      heading ""View|Name""
column text                       heading ""Source|Code""

set long 5000

prompt
prompt STATS: List all non-system views (excluding AQ$...).
prompt

select  OWNER,
	VIEW_NAME,
        TEXT
        from ALL_VIEWS
where   OWNER not in (&gOracleSpecialUsers)
and     VIEW_NAME not like 'AQ$%'
order by 1, 2;

set long 80
-- End of script.





#######################################################################
#######################################################################
*/
-- File :        N03_all_views.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system views (except those for queues).
--              Information on Geneva/RB views is captured during health checks.
--
-- Author :      Andy Coleman
--
-- Date :        14th September 2011
--
-- List all non-system views (excluding AQ$ views)
SELECT
    viewowner AS owner,
    viewname AS view_name,
    definition AS text
FROM
    pg_views
WHERE
    schemaname NOT IN ($1, $2)
    AND viewname NOT LIKE $3
ORDER BY
    viewowner, viewname",11.301915,8,1.4127393750000001
"/*
prompt SCRIPT: ORA_N03_all_views

column owner      format a20      heading ""View|Owner""
column view_name  format a30      heading ""View|Name""
column text                       heading ""Source|Code""

set long 5000

prompt
prompt STATS: List all non-system views (excluding AQ$...).
prompt

select  OWNER,
	VIEW_NAME,
        TEXT
        from ALL_VIEWS
where   OWNER not in (&gOracleSpecialUsers)
and     VIEW_NAME not like 'AQ$%'
order by 1, 2;

set long 80
-- End of script.





#######################################################################
#######################################################################
*/
-- File :        N03_all_views.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system views (except those for queues).
--              Information on Geneva/RB views is captured during health checks.
--
-- Author :      Andy Coleman
--
-- Date :        14th September 2011
--
-- List all non-system views (excluding AQ$ views)
SELECT
    viewowner AS owner,
    viewname AS view_name,
    definition AS text
FROM
    pg_views
WHERE
    schemaname NOT IN ($1, $2)
    AND viewname NOT LIKE $3
ORDER BY
    viewowner, viewname",11.301915,8,1.4127393750000001
"/*
prompt SCRIPT: ORA_N03_all_views

column owner      format a20      heading ""View|Owner""
column view_name  format a30      heading ""View|Name""
column text                       heading ""Source|Code""

set long 5000

prompt
prompt STATS: List all non-system views (excluding AQ$...).
prompt

select  OWNER,
	VIEW_NAME,
        TEXT
        from ALL_VIEWS
where   OWNER not in (&gOracleSpecialUsers)
and     VIEW_NAME not like 'AQ$%'
order by 1, 2;

set long 80
-- End of script.





#######################################################################
#######################################################################
*/
-- File :        N03_all_views.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system views (except those for queues).
--              Information on Geneva/RB views is captured during health checks.
--
-- Author :      Andy Coleman
--
-- Date :        14th September 2011
--
-- List all non-system views (excluding AQ$ views)
SELECT
    viewowner AS owner,
    viewname AS view_name,
    definition AS text
FROM
    pg_views
WHERE
    schemaname NOT IN ($1, $2)
    AND viewname NOT LIKE $3
ORDER BY
    viewowner, viewname",11.301915,8,1.4127393750000001
"SELECT setting || $1 AS block_size
FROM pg_settings
WHERE name = $2",10.977502,18,0.6098612222222223
"SELECT setting || $1 AS block_size
FROM pg_settings
WHERE name = $2",10.977502,18,0.6098612222222223
"SELECT setting || $1 AS block_size
FROM pg_settings
WHERE name = $2",10.977502,18,0.6098612222222223
"SELECT setting || $1 AS block_size
FROM pg_settings
WHERE name = $2",10.977502,18,0.6098612222222223
"SELECT setting || $1 AS block_size
FROM pg_settings
WHERE name = $2",10.977502,18,0.6098612222222223
"SELECT
    n.nspname AS owner,
    c.relname AS table_name,
    a.attname AS column_name,
    pg_tablespace.spcname AS tablespace_name,
    pg_relation_size(c.oid) / $1 / $2 / $3 AS gbytes
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
JOIN
    pg_attribute a ON a.attrelid = c.oid
JOIN
    pg_type t ON a.atttypid = t.oid
LEFT JOIN
    pg_tablespace ON pg_tablespace.oid = c.reltablespace
WHERE
    a.attnum > $4
    AND NOT a.attisdropped
    AND t.typname IN ($5, $6)
    AND n.nspname NOT IN ($7, $8, $9)
    AND c.relname NOT LIKE $10
ORDER BY
    owner, table_name, column_name",10.108915,7,1.4441307142857143
"SELECT
    n.nspname AS owner,
    c.relname AS table_name,
    a.attname AS column_name,
    pg_tablespace.spcname AS tablespace_name,
    pg_relation_size(c.oid) / $1 / $2 / $3 AS gbytes
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
JOIN
    pg_attribute a ON a.attrelid = c.oid
JOIN
    pg_type t ON a.atttypid = t.oid
LEFT JOIN
    pg_tablespace ON pg_tablespace.oid = c.reltablespace
WHERE
    a.attnum > $4
    AND NOT a.attisdropped
    AND t.typname IN ($5, $6)
    AND n.nspname NOT IN ($7, $8, $9)
    AND c.relname NOT LIKE $10
ORDER BY
    owner, table_name, column_name",10.108915,7,1.4441307142857143
"SELECT
    n.nspname AS owner,
    c.relname AS table_name,
    a.attname AS column_name,
    pg_tablespace.spcname AS tablespace_name,
    pg_relation_size(c.oid) / $1 / $2 / $3 AS gbytes
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
JOIN
    pg_attribute a ON a.attrelid = c.oid
JOIN
    pg_type t ON a.atttypid = t.oid
LEFT JOIN
    pg_tablespace ON pg_tablespace.oid = c.reltablespace
WHERE
    a.attnum > $4
    AND NOT a.attisdropped
    AND t.typname IN ($5, $6)
    AND n.nspname NOT IN ($7, $8, $9)
    AND c.relname NOT LIKE $10
ORDER BY
    owner, table_name, column_name",10.108915,7,1.4441307142857143
"SELECT
    n.nspname AS owner,
    c.relname AS table_name,
    a.attname AS column_name,
    pg_tablespace.spcname AS tablespace_name,
    pg_relation_size(c.oid) / $1 / $2 / $3 AS gbytes
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
JOIN
    pg_attribute a ON a.attrelid = c.oid
JOIN
    pg_type t ON a.atttypid = t.oid
LEFT JOIN
    pg_tablespace ON pg_tablespace.oid = c.reltablespace
WHERE
    a.attnum > $4
    AND NOT a.attisdropped
    AND t.typname IN ($5, $6)
    AND n.nspname NOT IN ($7, $8, $9)
    AND c.relname NOT LIKE $10
ORDER BY
    owner, table_name, column_name",10.108915,7,1.4441307142857143
"SELECT
    n.nspname AS owner,
    c.relname AS table_name,
    a.attname AS column_name,
    pg_tablespace.spcname AS tablespace_name,
    pg_relation_size(c.oid) / $1 / $2 / $3 AS gbytes
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
JOIN
    pg_attribute a ON a.attrelid = c.oid
JOIN
    pg_type t ON a.atttypid = t.oid
LEFT JOIN
    pg_tablespace ON pg_tablespace.oid = c.reltablespace
WHERE
    a.attnum > $4
    AND NOT a.attisdropped
    AND t.typname IN ($5, $6)
    AND n.nspname NOT IN ($7, $8, $9)
    AND c.relname NOT LIKE $10
ORDER BY
    owner, table_name, column_name",10.108915,7,1.4441307142857143
"create table statistics.query_details as
 select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
with no data",10.035158,3,3.3450526666666667
"create table statistics.query_details as
 select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
with no data",10.035158,3,3.3450526666666667
"create table statistics.query_details as
 select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
with no data",10.035158,3,3.3450526666666667
"create table statistics.query_details as
 select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
with no data",10.035158,3,3.3450526666666667
"create table statistics.query_details as
 select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
with no data",10.035158,3,3.3450526666666667
truncate table statistics.query_details,9.545856,2,4.772928
truncate table statistics.query_details,9.545856,2,4.772928
truncate table statistics.query_details,9.545856,2,4.772928
truncate table statistics.query_details,9.545856,2,4.772928
truncate table statistics.query_details,9.545856,2,4.772928
"WITH bloat_info AS (
  SELECT 
    schemaname,
    tablename,
    reltuples::BIGINT AS live_tuples,
    relpages::BIGINT AS total_pages,
    otta::BIGINT AS expected_pages,
	$1 * (relpages - otta) / relpages as pct,
    --ROUND(100 * (relpages - otta) / relpages, 2) AS bloat_pct,
    (relpages - otta) * $2 / $3 AS wasted_space_mb
  FROM (
    SELECT
      schemaname,
      tablename,
      reltuples,
      relpages,
      CEIL(reltuples / (block_size / (data_width + $4))) AS otta
    FROM (
      SELECT 
        schemaname, 
        tablename,
        reltuples,
        relpages,
        pg_table_size(schemaname || $5 || tablename) / $6 AS table_size_pages,
        current_setting($7)::NUMERIC AS block_size,
        SUM((CASE WHEN avg_width IS NOT NULL THEN avg_width ELSE $8 END)) AS data_width
      FROM pg_stats
      JOIN pg_class ON tablename = relname
	  where relpages > $9
      GROUP BY schemaname, tablename, reltuples, relpages
    ) AS table_info
  ) AS calc
)
SELECT * FROM bloat_info",9.087836,2,4.543918
"WITH bloat_info AS (
  SELECT 
    schemaname,
    tablename,
    reltuples::BIGINT AS live_tuples,
    relpages::BIGINT AS total_pages,
    otta::BIGINT AS expected_pages,
	$1 * (relpages - otta) / relpages as pct,
    --ROUND(100 * (relpages - otta) / relpages, 2) AS bloat_pct,
    (relpages - otta) * $2 / $3 AS wasted_space_mb
  FROM (
    SELECT
      schemaname,
      tablename,
      reltuples,
      relpages,
      CEIL(reltuples / (block_size / (data_width + $4))) AS otta
    FROM (
      SELECT 
        schemaname, 
        tablename,
        reltuples,
        relpages,
        pg_table_size(schemaname || $5 || tablename) / $6 AS table_size_pages,
        current_setting($7)::NUMERIC AS block_size,
        SUM((CASE WHEN avg_width IS NOT NULL THEN avg_width ELSE $8 END)) AS data_width
      FROM pg_stats
      JOIN pg_class ON tablename = relname
	  where relpages > $9
      GROUP BY schemaname, tablename, reltuples, relpages
    ) AS table_info
  ) AS calc
)
SELECT * FROM bloat_info",9.087836,2,4.543918
"WITH bloat_info AS (
  SELECT 
    schemaname,
    tablename,
    reltuples::BIGINT AS live_tuples,
    relpages::BIGINT AS total_pages,
    otta::BIGINT AS expected_pages,
	$1 * (relpages - otta) / relpages as pct,
    --ROUND(100 * (relpages - otta) / relpages, 2) AS bloat_pct,
    (relpages - otta) * $2 / $3 AS wasted_space_mb
  FROM (
    SELECT
      schemaname,
      tablename,
      reltuples,
      relpages,
      CEIL(reltuples / (block_size / (data_width + $4))) AS otta
    FROM (
      SELECT 
        schemaname, 
        tablename,
        reltuples,
        relpages,
        pg_table_size(schemaname || $5 || tablename) / $6 AS table_size_pages,
        current_setting($7)::NUMERIC AS block_size,
        SUM((CASE WHEN avg_width IS NOT NULL THEN avg_width ELSE $8 END)) AS data_width
      FROM pg_stats
      JOIN pg_class ON tablename = relname
	  where relpages > $9
      GROUP BY schemaname, tablename, reltuples, relpages
    ) AS table_info
  ) AS calc
)
SELECT * FROM bloat_info",9.087836,2,4.543918
"WITH bloat_info AS (
  SELECT 
    schemaname,
    tablename,
    reltuples::BIGINT AS live_tuples,
    relpages::BIGINT AS total_pages,
    otta::BIGINT AS expected_pages,
	$1 * (relpages - otta) / relpages as pct,
    --ROUND(100 * (relpages - otta) / relpages, 2) AS bloat_pct,
    (relpages - otta) * $2 / $3 AS wasted_space_mb
  FROM (
    SELECT
      schemaname,
      tablename,
      reltuples,
      relpages,
      CEIL(reltuples / (block_size / (data_width + $4))) AS otta
    FROM (
      SELECT 
        schemaname, 
        tablename,
        reltuples,
        relpages,
        pg_table_size(schemaname || $5 || tablename) / $6 AS table_size_pages,
        current_setting($7)::NUMERIC AS block_size,
        SUM((CASE WHEN avg_width IS NOT NULL THEN avg_width ELSE $8 END)) AS data_width
      FROM pg_stats
      JOIN pg_class ON tablename = relname
	  where relpages > $9
      GROUP BY schemaname, tablename, reltuples, relpages
    ) AS table_info
  ) AS calc
)
SELECT * FROM bloat_info",9.087836,2,4.543918
"WITH bloat_info AS (
  SELECT 
    schemaname,
    tablename,
    reltuples::BIGINT AS live_tuples,
    relpages::BIGINT AS total_pages,
    otta::BIGINT AS expected_pages,
	$1 * (relpages - otta) / relpages as pct,
    --ROUND(100 * (relpages - otta) / relpages, 2) AS bloat_pct,
    (relpages - otta) * $2 / $3 AS wasted_space_mb
  FROM (
    SELECT
      schemaname,
      tablename,
      reltuples,
      relpages,
      CEIL(reltuples / (block_size / (data_width + $4))) AS otta
    FROM (
      SELECT 
        schemaname, 
        tablename,
        reltuples,
        relpages,
        pg_table_size(schemaname || $5 || tablename) / $6 AS table_size_pages,
        current_setting($7)::NUMERIC AS block_size,
        SUM((CASE WHEN avg_width IS NOT NULL THEN avg_width ELSE $8 END)) AS data_width
      FROM pg_stats
      JOIN pg_class ON tablename = relname
	  where relpages > $9
      GROUP BY schemaname, tablename, reltuples, relpages
    ) AS table_info
  ) AS calc
)
SELECT * FROM bloat_info",9.087836,2,4.543918
"create table pgbench_history(tid int,bid int,aid    int,delta int,mtime timestamp,filler char(22))",9.020140000000001,3,3.0067133333333333
"create table pgbench_history(tid int,bid int,aid    int,delta int,mtime timestamp,filler char(22))",9.020140000000001,3,3.0067133333333333
"create table pgbench_history(tid int,bid int,aid    int,delta int,mtime timestamp,filler char(22))",9.020140000000001,3,3.0067133333333333
"create table pgbench_history(tid int,bid int,aid    int,delta int,mtime timestamp,filler char(22))",9.020140000000001,3,3.0067133333333333
"create table pgbench_history(tid int,bid int,aid    int,delta int,mtime timestamp,filler char(22))",9.020140000000001,3,3.0067133333333333
"/*
column comment format a80

prompt SCRIPT: ORA_M12_segments

prompt CHECK: report information about segments owned by users other than system users

column segment_name format a36
column PARTITION_NAME format a14
column partition_name format a14
column buffer_pool format a11
column GBytes format 999,999.99
column owner  format a20

-- 12/06/2014: Added OWNER, but not in the first few columns to avoid having to change sga.py 

SELECT	SEGMENT_NAME,
	PARTITION_NAME,
	SEGMENT_TYPE,
	TABLESPACE_NAME,
	HEADER_FILE,
	HEADER_BLOCK,
	BYTES/1024/1024/1024 GBytes,
	BLOCKS,
	OWNER,
	EXTENTS,
	INITIAL_EXTENT,
	NEXT_EXTENT,
	MIN_EXTENTS,
	MAX_EXTENTS,
	PCT_INCREASE,
	FREELISTS,
	FREELIST_GROUPS,
	RELATIVE_FNO,
	BUFFER_POOL 
FROM		dba_segments
WHERE		owner not in (&gOracleSpecialUsers)
ORDER BY	1, 2;


prompt CHECK: print out the size of &vSchemaOwner segments, or partitions of segments, larger than 100MB

SELECT  SEGMENT_NAME,
	PARTITION_NAME,
	SEGMENT_TYPE,
        BYTES/1024/1024/1024 GBytes
FROM    dba_segments
WHERE   owner = '&vSchemaOwner'
AND     BYTES/1024/1024 > 100
ORDER BY GBytes desc, segment_name;

prompt CHECK: print out the total size of all undo/rollback segments.
prompt

SELECT	SEGMENT_TYPE,
	SUM(BYTES)/1024/1024/1024 GBytes
FROM    dba_segments
WHERE	SEGMENT_TYPE in ('ROLLBACK','TYPE2 UNDO')
GROUP BY &gRollup (SEGMENT_TYPE)
ORDER BY 1;


prompt CHECK: print out the size of all segments (except undo/rollback), regardless of owner, larger than 1GB.
prompt

SELECT s.OWNER,
       s.SEGMENT_NAME,
       s.SEGMENT_TYPE,
       s.GBytes
FROM
(SELECT  OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE,
         SUM(BYTES)/1024/1024/1024 GBytes
FROM     dba_segments
WHERE    SEGMENT_TYPE not in ('ROLLBACK','TYPE2 UNDO')
GROUP BY OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE
HAVING SUM(BYTES)/1024/1024/1024 > 1) s
ORDER BY GBytes desc, OWNER, SEGMENT_NAME;


prompt CHECK: list any tables larger than 1GB that are listed in DATAMANAGEMENTCONTROL.
prompt INFORM: The sizes of associated indexes are not listed here but can be found in the previous listing.
prompt
prompt The ACTIVE_BOO column indicates whether or not TDARC/TDDEL activities are permitted on the table.
prompt The LAST_DELETE_DAT column is only populated when ACTIVE_BOO = T in which case it indicates the date (YYYY.MM.DD) prior to (and including) which TDDEL has purged rows from this table. It does NOT show when TDDEL last deleted data from this table.

column ACTIVE_BOO for a14
column LAST_DELETE_DAT format a15

-- This will fail if the DATAMANAGEMENTCONTROL table does not exist (e.g. if a full RBM schema is not available). Do not abort if it does fail.
whenever sqlerror continue

SELECT s.OWNER,
       s.SEGMENT_NAME,
       s.SEGMENT_TYPE,
       s.GBytes,
       DECODE(s.SEGMENT_TYPE, 'INDEX', '', dmc.active_boo) active_boo,
       DECODE(dmc.active_boo, 'F', '', TO_CHAR(dmc.LAST_DELETE_DAT, 'YYYY.MM.DD')) LAST_DELETE_DAT
from datamanagementcontrol dmc,
(SELECT  OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE,
         SUM(BYTES)/1024/1024/1024 GBytes
FROM     dba_segments
WHERE    SEGMENT_TYPE not in ('ROLLBACK','TYPE2 UNDO')
GROUP BY OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE
HAVING SUM(BYTES)/1024/1024/1024 > 1) s
WHERE s.SEGMENT_NAME = dmc.TABLE_NAME_ORA
ORDER BY GBytes desc, OWNER, SEGMENT_NAME;

whenever sqlerror exit 1


prompt CHECK: show the total space consumed by all of the segments for each user (ignoring users who consume less than 5GB of space)

SELECT  OWNER,
        SUM(BYTES)/1024/1024/1024 GBytes
FROM    dba_segments
GROUP BY OWNER
HAVING SUM(BYTES)/1024/1024/1024 >= 5
ORDER BY GBytes desc;

prompt CHECK: for Oracle 12c+ show the total space consumed by users who were created, and are maintained, by Oracle-supplied scripts (such as catalog.sql or catproc.sql). This query will fail at 11g.
column SYS_GBytes format 999,999.99 heading ""GBYTES consumed by Oracle-maintained users""
whenever sqlerror continue
SELECT	SUM(BYTES)/1024/1024/1024 SYS_GBytes
FROM    dba_segments s, all_users u
WHERE	s.OWNER = u.USERNAME
  AND   u.ORACLE_MAINTAINED = 'Y';
whenever sqlerror exit 1


-- End of script.




#############################################################
#############################################################
*/
-- File : PG_M12_segments.sql
-- Description : PostgreSQL version of Oracle's ORA_M12_segments.sql
-- 1. Segments owned by non-system users (excluding pg_catalog, information_schema)
SELECT 
    n.nspname AS owner,
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_tablespace.spcname AS tablespace_name,
    $2::integer AS header_file,
    $3::integer AS header_block,
    pg_total_relation_size(c.oid) / $4 / $5 / $6 AS gbytes,
    pg_relation_size(c.oid) / current_setting($7)::int AS blocks,
    $8::integer AS extents,
    $9::integer AS initial_extent,
    $10::integer AS next_extent,
    $11::integer AS min_extents,
    $12::integer AS max_extents,
    $13::integer AS pct_increase,
    $14::integer AS freelists,
    $15::integer AS freelist_groups,
    $16::integer AS relative_fno,
    $17::text AS buffer_pool
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
LEFT JOIN pg_tablespace ON c.reltablespace = pg_tablespace.oid
WHERE n.nspname NOT IN ($18, $19, $20)
AND c.relkind IN ($21, $22, $23, $24) -- table, index, toast, materialized view
ORDER BY 2, 3",8.991731999999999,9,0.9990813333333333
"/*
column comment format a80

prompt SCRIPT: ORA_M12_segments

prompt CHECK: report information about segments owned by users other than system users

column segment_name format a36
column PARTITION_NAME format a14
column partition_name format a14
column buffer_pool format a11
column GBytes format 999,999.99
column owner  format a20

-- 12/06/2014: Added OWNER, but not in the first few columns to avoid having to change sga.py 

SELECT	SEGMENT_NAME,
	PARTITION_NAME,
	SEGMENT_TYPE,
	TABLESPACE_NAME,
	HEADER_FILE,
	HEADER_BLOCK,
	BYTES/1024/1024/1024 GBytes,
	BLOCKS,
	OWNER,
	EXTENTS,
	INITIAL_EXTENT,
	NEXT_EXTENT,
	MIN_EXTENTS,
	MAX_EXTENTS,
	PCT_INCREASE,
	FREELISTS,
	FREELIST_GROUPS,
	RELATIVE_FNO,
	BUFFER_POOL 
FROM		dba_segments
WHERE		owner not in (&gOracleSpecialUsers)
ORDER BY	1, 2;


prompt CHECK: print out the size of &vSchemaOwner segments, or partitions of segments, larger than 100MB

SELECT  SEGMENT_NAME,
	PARTITION_NAME,
	SEGMENT_TYPE,
        BYTES/1024/1024/1024 GBytes
FROM    dba_segments
WHERE   owner = '&vSchemaOwner'
AND     BYTES/1024/1024 > 100
ORDER BY GBytes desc, segment_name;

prompt CHECK: print out the total size of all undo/rollback segments.
prompt

SELECT	SEGMENT_TYPE,
	SUM(BYTES)/1024/1024/1024 GBytes
FROM    dba_segments
WHERE	SEGMENT_TYPE in ('ROLLBACK','TYPE2 UNDO')
GROUP BY &gRollup (SEGMENT_TYPE)
ORDER BY 1;


prompt CHECK: print out the size of all segments (except undo/rollback), regardless of owner, larger than 1GB.
prompt

SELECT s.OWNER,
       s.SEGMENT_NAME,
       s.SEGMENT_TYPE,
       s.GBytes
FROM
(SELECT  OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE,
         SUM(BYTES)/1024/1024/1024 GBytes
FROM     dba_segments
WHERE    SEGMENT_TYPE not in ('ROLLBACK','TYPE2 UNDO')
GROUP BY OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE
HAVING SUM(BYTES)/1024/1024/1024 > 1) s
ORDER BY GBytes desc, OWNER, SEGMENT_NAME;


prompt CHECK: list any tables larger than 1GB that are listed in DATAMANAGEMENTCONTROL.
prompt INFORM: The sizes of associated indexes are not listed here but can be found in the previous listing.
prompt
prompt The ACTIVE_BOO column indicates whether or not TDARC/TDDEL activities are permitted on the table.
prompt The LAST_DELETE_DAT column is only populated when ACTIVE_BOO = T in which case it indicates the date (YYYY.MM.DD) prior to (and including) which TDDEL has purged rows from this table. It does NOT show when TDDEL last deleted data from this table.

column ACTIVE_BOO for a14
column LAST_DELETE_DAT format a15

-- This will fail if the DATAMANAGEMENTCONTROL table does not exist (e.g. if a full RBM schema is not available). Do not abort if it does fail.
whenever sqlerror continue

SELECT s.OWNER,
       s.SEGMENT_NAME,
       s.SEGMENT_TYPE,
       s.GBytes,
       DECODE(s.SEGMENT_TYPE, 'INDEX', '', dmc.active_boo) active_boo,
       DECODE(dmc.active_boo, 'F', '', TO_CHAR(dmc.LAST_DELETE_DAT, 'YYYY.MM.DD')) LAST_DELETE_DAT
from datamanagementcontrol dmc,
(SELECT  OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE,
         SUM(BYTES)/1024/1024/1024 GBytes
FROM     dba_segments
WHERE    SEGMENT_TYPE not in ('ROLLBACK','TYPE2 UNDO')
GROUP BY OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE
HAVING SUM(BYTES)/1024/1024/1024 > 1) s
WHERE s.SEGMENT_NAME = dmc.TABLE_NAME_ORA
ORDER BY GBytes desc, OWNER, SEGMENT_NAME;

whenever sqlerror exit 1


prompt CHECK: show the total space consumed by all of the segments for each user (ignoring users who consume less than 5GB of space)

SELECT  OWNER,
        SUM(BYTES)/1024/1024/1024 GBytes
FROM    dba_segments
GROUP BY OWNER
HAVING SUM(BYTES)/1024/1024/1024 >= 5
ORDER BY GBytes desc;

prompt CHECK: for Oracle 12c+ show the total space consumed by users who were created, and are maintained, by Oracle-supplied scripts (such as catalog.sql or catproc.sql). This query will fail at 11g.
column SYS_GBytes format 999,999.99 heading ""GBYTES consumed by Oracle-maintained users""
whenever sqlerror continue
SELECT	SUM(BYTES)/1024/1024/1024 SYS_GBytes
FROM    dba_segments s, all_users u
WHERE	s.OWNER = u.USERNAME
  AND   u.ORACLE_MAINTAINED = 'Y';
whenever sqlerror exit 1


-- End of script.




#############################################################
#############################################################
*/
-- File : PG_M12_segments.sql
-- Description : PostgreSQL version of Oracle's ORA_M12_segments.sql
-- 1. Segments owned by non-system users (excluding pg_catalog, information_schema)
SELECT 
    n.nspname AS owner,
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_tablespace.spcname AS tablespace_name,
    $2::integer AS header_file,
    $3::integer AS header_block,
    pg_total_relation_size(c.oid) / $4 / $5 / $6 AS gbytes,
    pg_relation_size(c.oid) / current_setting($7)::int AS blocks,
    $8::integer AS extents,
    $9::integer AS initial_extent,
    $10::integer AS next_extent,
    $11::integer AS min_extents,
    $12::integer AS max_extents,
    $13::integer AS pct_increase,
    $14::integer AS freelists,
    $15::integer AS freelist_groups,
    $16::integer AS relative_fno,
    $17::text AS buffer_pool
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
LEFT JOIN pg_tablespace ON c.reltablespace = pg_tablespace.oid
WHERE n.nspname NOT IN ($18, $19, $20)
AND c.relkind IN ($21, $22, $23, $24) -- table, index, toast, materialized view
ORDER BY 2, 3",8.991731999999999,9,0.9990813333333333
"/*
column comment format a80

prompt SCRIPT: ORA_M12_segments

prompt CHECK: report information about segments owned by users other than system users

column segment_name format a36
column PARTITION_NAME format a14
column partition_name format a14
column buffer_pool format a11
column GBytes format 999,999.99
column owner  format a20

-- 12/06/2014: Added OWNER, but not in the first few columns to avoid having to change sga.py 

SELECT	SEGMENT_NAME,
	PARTITION_NAME,
	SEGMENT_TYPE,
	TABLESPACE_NAME,
	HEADER_FILE,
	HEADER_BLOCK,
	BYTES/1024/1024/1024 GBytes,
	BLOCKS,
	OWNER,
	EXTENTS,
	INITIAL_EXTENT,
	NEXT_EXTENT,
	MIN_EXTENTS,
	MAX_EXTENTS,
	PCT_INCREASE,
	FREELISTS,
	FREELIST_GROUPS,
	RELATIVE_FNO,
	BUFFER_POOL 
FROM		dba_segments
WHERE		owner not in (&gOracleSpecialUsers)
ORDER BY	1, 2;


prompt CHECK: print out the size of &vSchemaOwner segments, or partitions of segments, larger than 100MB

SELECT  SEGMENT_NAME,
	PARTITION_NAME,
	SEGMENT_TYPE,
        BYTES/1024/1024/1024 GBytes
FROM    dba_segments
WHERE   owner = '&vSchemaOwner'
AND     BYTES/1024/1024 > 100
ORDER BY GBytes desc, segment_name;

prompt CHECK: print out the total size of all undo/rollback segments.
prompt

SELECT	SEGMENT_TYPE,
	SUM(BYTES)/1024/1024/1024 GBytes
FROM    dba_segments
WHERE	SEGMENT_TYPE in ('ROLLBACK','TYPE2 UNDO')
GROUP BY &gRollup (SEGMENT_TYPE)
ORDER BY 1;


prompt CHECK: print out the size of all segments (except undo/rollback), regardless of owner, larger than 1GB.
prompt

SELECT s.OWNER,
       s.SEGMENT_NAME,
       s.SEGMENT_TYPE,
       s.GBytes
FROM
(SELECT  OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE,
         SUM(BYTES)/1024/1024/1024 GBytes
FROM     dba_segments
WHERE    SEGMENT_TYPE not in ('ROLLBACK','TYPE2 UNDO')
GROUP BY OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE
HAVING SUM(BYTES)/1024/1024/1024 > 1) s
ORDER BY GBytes desc, OWNER, SEGMENT_NAME;


prompt CHECK: list any tables larger than 1GB that are listed in DATAMANAGEMENTCONTROL.
prompt INFORM: The sizes of associated indexes are not listed here but can be found in the previous listing.
prompt
prompt The ACTIVE_BOO column indicates whether or not TDARC/TDDEL activities are permitted on the table.
prompt The LAST_DELETE_DAT column is only populated when ACTIVE_BOO = T in which case it indicates the date (YYYY.MM.DD) prior to (and including) which TDDEL has purged rows from this table. It does NOT show when TDDEL last deleted data from this table.

column ACTIVE_BOO for a14
column LAST_DELETE_DAT format a15

-- This will fail if the DATAMANAGEMENTCONTROL table does not exist (e.g. if a full RBM schema is not available). Do not abort if it does fail.
whenever sqlerror continue

SELECT s.OWNER,
       s.SEGMENT_NAME,
       s.SEGMENT_TYPE,
       s.GBytes,
       DECODE(s.SEGMENT_TYPE, 'INDEX', '', dmc.active_boo) active_boo,
       DECODE(dmc.active_boo, 'F', '', TO_CHAR(dmc.LAST_DELETE_DAT, 'YYYY.MM.DD')) LAST_DELETE_DAT
from datamanagementcontrol dmc,
(SELECT  OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE,
         SUM(BYTES)/1024/1024/1024 GBytes
FROM     dba_segments
WHERE    SEGMENT_TYPE not in ('ROLLBACK','TYPE2 UNDO')
GROUP BY OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE
HAVING SUM(BYTES)/1024/1024/1024 > 1) s
WHERE s.SEGMENT_NAME = dmc.TABLE_NAME_ORA
ORDER BY GBytes desc, OWNER, SEGMENT_NAME;

whenever sqlerror exit 1


prompt CHECK: show the total space consumed by all of the segments for each user (ignoring users who consume less than 5GB of space)

SELECT  OWNER,
        SUM(BYTES)/1024/1024/1024 GBytes
FROM    dba_segments
GROUP BY OWNER
HAVING SUM(BYTES)/1024/1024/1024 >= 5
ORDER BY GBytes desc;

prompt CHECK: for Oracle 12c+ show the total space consumed by users who were created, and are maintained, by Oracle-supplied scripts (such as catalog.sql or catproc.sql). This query will fail at 11g.
column SYS_GBytes format 999,999.99 heading ""GBYTES consumed by Oracle-maintained users""
whenever sqlerror continue
SELECT	SUM(BYTES)/1024/1024/1024 SYS_GBytes
FROM    dba_segments s, all_users u
WHERE	s.OWNER = u.USERNAME
  AND   u.ORACLE_MAINTAINED = 'Y';
whenever sqlerror exit 1


-- End of script.




#############################################################
#############################################################
*/
-- File : PG_M12_segments.sql
-- Description : PostgreSQL version of Oracle's ORA_M12_segments.sql
-- 1. Segments owned by non-system users (excluding pg_catalog, information_schema)
SELECT 
    n.nspname AS owner,
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_tablespace.spcname AS tablespace_name,
    $2::integer AS header_file,
    $3::integer AS header_block,
    pg_total_relation_size(c.oid) / $4 / $5 / $6 AS gbytes,
    pg_relation_size(c.oid) / current_setting($7)::int AS blocks,
    $8::integer AS extents,
    $9::integer AS initial_extent,
    $10::integer AS next_extent,
    $11::integer AS min_extents,
    $12::integer AS max_extents,
    $13::integer AS pct_increase,
    $14::integer AS freelists,
    $15::integer AS freelist_groups,
    $16::integer AS relative_fno,
    $17::text AS buffer_pool
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
LEFT JOIN pg_tablespace ON c.reltablespace = pg_tablespace.oid
WHERE n.nspname NOT IN ($18, $19, $20)
AND c.relkind IN ($21, $22, $23, $24) -- table, index, toast, materialized view
ORDER BY 2, 3",8.991731999999999,9,0.9990813333333333
"/*
column comment format a80

prompt SCRIPT: ORA_M12_segments

prompt CHECK: report information about segments owned by users other than system users

column segment_name format a36
column PARTITION_NAME format a14
column partition_name format a14
column buffer_pool format a11
column GBytes format 999,999.99
column owner  format a20

-- 12/06/2014: Added OWNER, but not in the first few columns to avoid having to change sga.py 

SELECT	SEGMENT_NAME,
	PARTITION_NAME,
	SEGMENT_TYPE,
	TABLESPACE_NAME,
	HEADER_FILE,
	HEADER_BLOCK,
	BYTES/1024/1024/1024 GBytes,
	BLOCKS,
	OWNER,
	EXTENTS,
	INITIAL_EXTENT,
	NEXT_EXTENT,
	MIN_EXTENTS,
	MAX_EXTENTS,
	PCT_INCREASE,
	FREELISTS,
	FREELIST_GROUPS,
	RELATIVE_FNO,
	BUFFER_POOL 
FROM		dba_segments
WHERE		owner not in (&gOracleSpecialUsers)
ORDER BY	1, 2;


prompt CHECK: print out the size of &vSchemaOwner segments, or partitions of segments, larger than 100MB

SELECT  SEGMENT_NAME,
	PARTITION_NAME,
	SEGMENT_TYPE,
        BYTES/1024/1024/1024 GBytes
FROM    dba_segments
WHERE   owner = '&vSchemaOwner'
AND     BYTES/1024/1024 > 100
ORDER BY GBytes desc, segment_name;

prompt CHECK: print out the total size of all undo/rollback segments.
prompt

SELECT	SEGMENT_TYPE,
	SUM(BYTES)/1024/1024/1024 GBytes
FROM    dba_segments
WHERE	SEGMENT_TYPE in ('ROLLBACK','TYPE2 UNDO')
GROUP BY &gRollup (SEGMENT_TYPE)
ORDER BY 1;


prompt CHECK: print out the size of all segments (except undo/rollback), regardless of owner, larger than 1GB.
prompt

SELECT s.OWNER,
       s.SEGMENT_NAME,
       s.SEGMENT_TYPE,
       s.GBytes
FROM
(SELECT  OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE,
         SUM(BYTES)/1024/1024/1024 GBytes
FROM     dba_segments
WHERE    SEGMENT_TYPE not in ('ROLLBACK','TYPE2 UNDO')
GROUP BY OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE
HAVING SUM(BYTES)/1024/1024/1024 > 1) s
ORDER BY GBytes desc, OWNER, SEGMENT_NAME;


prompt CHECK: list any tables larger than 1GB that are listed in DATAMANAGEMENTCONTROL.
prompt INFORM: The sizes of associated indexes are not listed here but can be found in the previous listing.
prompt
prompt The ACTIVE_BOO column indicates whether or not TDARC/TDDEL activities are permitted on the table.
prompt The LAST_DELETE_DAT column is only populated when ACTIVE_BOO = T in which case it indicates the date (YYYY.MM.DD) prior to (and including) which TDDEL has purged rows from this table. It does NOT show when TDDEL last deleted data from this table.

column ACTIVE_BOO for a14
column LAST_DELETE_DAT format a15

-- This will fail if the DATAMANAGEMENTCONTROL table does not exist (e.g. if a full RBM schema is not available). Do not abort if it does fail.
whenever sqlerror continue

SELECT s.OWNER,
       s.SEGMENT_NAME,
       s.SEGMENT_TYPE,
       s.GBytes,
       DECODE(s.SEGMENT_TYPE, 'INDEX', '', dmc.active_boo) active_boo,
       DECODE(dmc.active_boo, 'F', '', TO_CHAR(dmc.LAST_DELETE_DAT, 'YYYY.MM.DD')) LAST_DELETE_DAT
from datamanagementcontrol dmc,
(SELECT  OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE,
         SUM(BYTES)/1024/1024/1024 GBytes
FROM     dba_segments
WHERE    SEGMENT_TYPE not in ('ROLLBACK','TYPE2 UNDO')
GROUP BY OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE
HAVING SUM(BYTES)/1024/1024/1024 > 1) s
WHERE s.SEGMENT_NAME = dmc.TABLE_NAME_ORA
ORDER BY GBytes desc, OWNER, SEGMENT_NAME;

whenever sqlerror exit 1


prompt CHECK: show the total space consumed by all of the segments for each user (ignoring users who consume less than 5GB of space)

SELECT  OWNER,
        SUM(BYTES)/1024/1024/1024 GBytes
FROM    dba_segments
GROUP BY OWNER
HAVING SUM(BYTES)/1024/1024/1024 >= 5
ORDER BY GBytes desc;

prompt CHECK: for Oracle 12c+ show the total space consumed by users who were created, and are maintained, by Oracle-supplied scripts (such as catalog.sql or catproc.sql). This query will fail at 11g.
column SYS_GBytes format 999,999.99 heading ""GBYTES consumed by Oracle-maintained users""
whenever sqlerror continue
SELECT	SUM(BYTES)/1024/1024/1024 SYS_GBytes
FROM    dba_segments s, all_users u
WHERE	s.OWNER = u.USERNAME
  AND   u.ORACLE_MAINTAINED = 'Y';
whenever sqlerror exit 1


-- End of script.




#############################################################
#############################################################
*/
-- File : PG_M12_segments.sql
-- Description : PostgreSQL version of Oracle's ORA_M12_segments.sql
-- 1. Segments owned by non-system users (excluding pg_catalog, information_schema)
SELECT 
    n.nspname AS owner,
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_tablespace.spcname AS tablespace_name,
    $2::integer AS header_file,
    $3::integer AS header_block,
    pg_total_relation_size(c.oid) / $4 / $5 / $6 AS gbytes,
    pg_relation_size(c.oid) / current_setting($7)::int AS blocks,
    $8::integer AS extents,
    $9::integer AS initial_extent,
    $10::integer AS next_extent,
    $11::integer AS min_extents,
    $12::integer AS max_extents,
    $13::integer AS pct_increase,
    $14::integer AS freelists,
    $15::integer AS freelist_groups,
    $16::integer AS relative_fno,
    $17::text AS buffer_pool
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
LEFT JOIN pg_tablespace ON c.reltablespace = pg_tablespace.oid
WHERE n.nspname NOT IN ($18, $19, $20)
AND c.relkind IN ($21, $22, $23, $24) -- table, index, toast, materialized view
ORDER BY 2, 3",8.991731999999999,9,0.9990813333333333
"/*
column comment format a80

prompt SCRIPT: ORA_M12_segments

prompt CHECK: report information about segments owned by users other than system users

column segment_name format a36
column PARTITION_NAME format a14
column partition_name format a14
column buffer_pool format a11
column GBytes format 999,999.99
column owner  format a20

-- 12/06/2014: Added OWNER, but not in the first few columns to avoid having to change sga.py 

SELECT	SEGMENT_NAME,
	PARTITION_NAME,
	SEGMENT_TYPE,
	TABLESPACE_NAME,
	HEADER_FILE,
	HEADER_BLOCK,
	BYTES/1024/1024/1024 GBytes,
	BLOCKS,
	OWNER,
	EXTENTS,
	INITIAL_EXTENT,
	NEXT_EXTENT,
	MIN_EXTENTS,
	MAX_EXTENTS,
	PCT_INCREASE,
	FREELISTS,
	FREELIST_GROUPS,
	RELATIVE_FNO,
	BUFFER_POOL 
FROM		dba_segments
WHERE		owner not in (&gOracleSpecialUsers)
ORDER BY	1, 2;


prompt CHECK: print out the size of &vSchemaOwner segments, or partitions of segments, larger than 100MB

SELECT  SEGMENT_NAME,
	PARTITION_NAME,
	SEGMENT_TYPE,
        BYTES/1024/1024/1024 GBytes
FROM    dba_segments
WHERE   owner = '&vSchemaOwner'
AND     BYTES/1024/1024 > 100
ORDER BY GBytes desc, segment_name;

prompt CHECK: print out the total size of all undo/rollback segments.
prompt

SELECT	SEGMENT_TYPE,
	SUM(BYTES)/1024/1024/1024 GBytes
FROM    dba_segments
WHERE	SEGMENT_TYPE in ('ROLLBACK','TYPE2 UNDO')
GROUP BY &gRollup (SEGMENT_TYPE)
ORDER BY 1;


prompt CHECK: print out the size of all segments (except undo/rollback), regardless of owner, larger than 1GB.
prompt

SELECT s.OWNER,
       s.SEGMENT_NAME,
       s.SEGMENT_TYPE,
       s.GBytes
FROM
(SELECT  OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE,
         SUM(BYTES)/1024/1024/1024 GBytes
FROM     dba_segments
WHERE    SEGMENT_TYPE not in ('ROLLBACK','TYPE2 UNDO')
GROUP BY OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE
HAVING SUM(BYTES)/1024/1024/1024 > 1) s
ORDER BY GBytes desc, OWNER, SEGMENT_NAME;


prompt CHECK: list any tables larger than 1GB that are listed in DATAMANAGEMENTCONTROL.
prompt INFORM: The sizes of associated indexes are not listed here but can be found in the previous listing.
prompt
prompt The ACTIVE_BOO column indicates whether or not TDARC/TDDEL activities are permitted on the table.
prompt The LAST_DELETE_DAT column is only populated when ACTIVE_BOO = T in which case it indicates the date (YYYY.MM.DD) prior to (and including) which TDDEL has purged rows from this table. It does NOT show when TDDEL last deleted data from this table.

column ACTIVE_BOO for a14
column LAST_DELETE_DAT format a15

-- This will fail if the DATAMANAGEMENTCONTROL table does not exist (e.g. if a full RBM schema is not available). Do not abort if it does fail.
whenever sqlerror continue

SELECT s.OWNER,
       s.SEGMENT_NAME,
       s.SEGMENT_TYPE,
       s.GBytes,
       DECODE(s.SEGMENT_TYPE, 'INDEX', '', dmc.active_boo) active_boo,
       DECODE(dmc.active_boo, 'F', '', TO_CHAR(dmc.LAST_DELETE_DAT, 'YYYY.MM.DD')) LAST_DELETE_DAT
from datamanagementcontrol dmc,
(SELECT  OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE,
         SUM(BYTES)/1024/1024/1024 GBytes
FROM     dba_segments
WHERE    SEGMENT_TYPE not in ('ROLLBACK','TYPE2 UNDO')
GROUP BY OWNER,
         SEGMENT_NAME,
         SEGMENT_TYPE
HAVING SUM(BYTES)/1024/1024/1024 > 1) s
WHERE s.SEGMENT_NAME = dmc.TABLE_NAME_ORA
ORDER BY GBytes desc, OWNER, SEGMENT_NAME;

whenever sqlerror exit 1


prompt CHECK: show the total space consumed by all of the segments for each user (ignoring users who consume less than 5GB of space)

SELECT  OWNER,
        SUM(BYTES)/1024/1024/1024 GBytes
FROM    dba_segments
GROUP BY OWNER
HAVING SUM(BYTES)/1024/1024/1024 >= 5
ORDER BY GBytes desc;

prompt CHECK: for Oracle 12c+ show the total space consumed by users who were created, and are maintained, by Oracle-supplied scripts (such as catalog.sql or catproc.sql). This query will fail at 11g.
column SYS_GBytes format 999,999.99 heading ""GBYTES consumed by Oracle-maintained users""
whenever sqlerror continue
SELECT	SUM(BYTES)/1024/1024/1024 SYS_GBytes
FROM    dba_segments s, all_users u
WHERE	s.OWNER = u.USERNAME
  AND   u.ORACLE_MAINTAINED = 'Y';
whenever sqlerror exit 1


-- End of script.




#############################################################
#############################################################
*/
-- File : PG_M12_segments.sql
-- Description : PostgreSQL version of Oracle's ORA_M12_segments.sql
-- 1. Segments owned by non-system users (excluding pg_catalog, information_schema)
SELECT 
    n.nspname AS owner,
    c.relname AS segment_name,
    $1::text AS partition_name,
    c.relkind AS segment_type,
    pg_tablespace.spcname AS tablespace_name,
    $2::integer AS header_file,
    $3::integer AS header_block,
    pg_total_relation_size(c.oid) / $4 / $5 / $6 AS gbytes,
    pg_relation_size(c.oid) / current_setting($7)::int AS blocks,
    $8::integer AS extents,
    $9::integer AS initial_extent,
    $10::integer AS next_extent,
    $11::integer AS min_extents,
    $12::integer AS max_extents,
    $13::integer AS pct_increase,
    $14::integer AS freelists,
    $15::integer AS freelist_groups,
    $16::integer AS relative_fno,
    $17::text AS buffer_pool
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
LEFT JOIN pg_tablespace ON c.reltablespace = pg_tablespace.oid
WHERE n.nspname NOT IN ($18, $19, $20)
AND c.relkind IN ($21, $22, $23, $24) -- table, index, toast, materialized view
ORDER BY 2, 3",8.991731999999999,9,0.9990813333333333
select * from pg_buffercache,8.415816,1,8.415816
select * from pg_buffercache,8.415816,1,8.415816
select * from pg_buffercache,8.415816,1,8.415816
select * from pg_buffercache,8.415816,1,8.415816
select * from pg_buffercache,8.415816,1,8.415816
drop table pgbench_accounts,8.269739,1,8.269739
drop table pgbench_accounts,8.269739,1,8.269739
drop table pgbench_accounts,8.269739,1,8.269739
drop table pgbench_accounts,8.269739,1,8.269739
drop table pgbench_accounts,8.269739,1,8.269739
"SELECT name, setting AS value, short_desc AS description
FROM pg_settings
ORDER BY name",8.234091999999999,8,1.0292614999999998
"SELECT name, setting AS value, short_desc AS description
FROM pg_settings
ORDER BY name",8.234091999999999,8,1.0292614999999998
"SELECT name, setting AS value, short_desc AS description
FROM pg_settings
ORDER BY name",8.234091999999999,8,1.0292614999999998
"SELECT name, setting AS value, short_desc AS description
FROM pg_settings
ORDER BY name",8.234091999999999,8,1.0292614999999998
"SELECT name, setting AS value, short_desc AS description
FROM pg_settings
ORDER BY name",8.234091999999999,8,1.0292614999999998
select * from pg_settings,7.8627210000000005,8,0.9828401250000001
select * from pg_settings,7.8627210000000005,8,0.9828401250000001
select * from pg_settings,7.8627210000000005,8,0.9828401250000001
select * from pg_settings,7.8627210000000005,8,0.9828401250000001
select * from pg_settings,7.8627210000000005,8,0.9828401250000001
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    rec record;
	output_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Active Connections by State
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nActive Connections by State:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('State: %s, Count: %s\n', rec.state, rec.connection_count), true);
    END LOOP;

    -- Number of connected users
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nNumber of connected users:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s\n', rec.usename), true);
    END LOOP;

    -- Long Running Queries (> 5 mins)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nLong Running Queries (> 5 mins):\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, User: %s, DB: %s, Duration: %s, Query: %s\n', rec.pid, rec.usename, rec.datname, rec.duration, rec.query_snippet), true);
    END LOOP;
	
    -- Top Queries by Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop Queries by Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, Runtime: %s\n', rec.pid, rec.runtime), true);
    END LOOP;	
	
    -- Blocking and Blocked Queries
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBlocking and Blocked Queries:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('blocked_pid: %s, blocked_query: %s, blocking_pid: %s, blocking_query: %s\n', rec.blocked_pid, rec.blocked_query, rec.blocking_pid, rec.blocking_query), true);
    END LOOP;		
	
    -- Database size info
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nDatabase size info:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('db_name: %s,connections: %s, db_size: %s, xact_commit: %s, xact_rollback: %s, blks_read: %s, blks_hit: %s\n', rec.datname, rec.connections, rec.db_size, rec.xact_commit, rec.xact_rollback, rec.blks_read, rec.blks_hit), true);
    END LOOP;	
	
	

    -- Processes with Wait Events
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nProcesses with Wait Events:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s, DB: %s, Event Type: %s, Event: %s\n', rec.usename, rec.datname, rec.wait_event_type, rec.wait_event), true);
    END LOOP;

    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Total Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(mean_exec_time::numeric, 2) AS avg_time_ms,
               rows, LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY total_exec_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time (ms): %s, Rows: %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_ms, rec.rows, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Execution Count
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Execution Count:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(total_exec_time::numeric / calls, 2) AS avg_time_per_call_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY calls DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time per Call (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_per_call_ms, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Average Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Average Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Avg Time (ms): %s, Total Time (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.avg_time_ms, rec.total_exec_time_ms, rec.query_snippet), true);
    END LOOP;
	
    -- Buffer Cache Usage by Relation
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBuffer Cache Usage by Relation:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Relation: %s, Buffers: %s, Size (MB): %s\n', rec.relation, rec.buffers, rec.size_mb), true);
    END LOOP;

    -- Buffer Cache Usage by Schema
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBuffer Cache Usage by Schema:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Schema: %s, Buffers: %s, Size (MB): %s\n', rec.schema_name, rec.buffers, rec.size_mb), true);
    END LOOP;	
	
    -- WAL Statistics
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL (Write Ahead Log) Statistics:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        wal_records, wal_fpi, wal_bytes, stats_reset
    FROM pg_stat_wal
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('WAL Records: %s, WAL FPIs: %s, WAL Bytes: %s, Stats Reset: %s\n',
        rec.wal_records, rec.wal_fpi, pg_size_pretty(rec.wal_bytes), rec.stats_reset), true);
    END LOOP;
	
    -- WAL Switch Statistics (Redo Generation Monitoring)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL Switch and Redo Generation Monitoring:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT count(*) AS switch_count FROM pg_control_checkpoint()
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Control Checkpoint info - %s\n',rec.switch_count), true);
    END LOOP;	

    -- Archive Statistics (if archiving is enabled)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL Archiver Statistics:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format(
        'Archived: %s, Failed: %s, Last Archived WAL: %s at %s, Last Failed WAL: %s at %s, Stats Reset: %s\n',
        rec.archived_count, rec.failed_count, rec.last_archived_wal, rec.last_archived_time, rec.last_failed_wal, rec.last_failed_time, rec.stats_reset), true);
    END LOOP;	

END;
$$ LANGUAGE plpgsql",7.6731359999999995,3,2.557712
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    rec record;
	output_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Active Connections by State
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nActive Connections by State:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('State: %s, Count: %s\n', rec.state, rec.connection_count), true);
    END LOOP;

    -- Number of connected users
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nNumber of connected users:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s\n', rec.usename), true);
    END LOOP;

    -- Long Running Queries (> 5 mins)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nLong Running Queries (> 5 mins):\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, User: %s, DB: %s, Duration: %s, Query: %s\n', rec.pid, rec.usename, rec.datname, rec.duration, rec.query_snippet), true);
    END LOOP;
	
    -- Top Queries by Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop Queries by Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, Runtime: %s\n', rec.pid, rec.runtime), true);
    END LOOP;	
	
    -- Blocking and Blocked Queries
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBlocking and Blocked Queries:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('blocked_pid: %s, blocked_query: %s, blocking_pid: %s, blocking_query: %s\n', rec.blocked_pid, rec.blocked_query, rec.blocking_pid, rec.blocking_query), true);
    END LOOP;		
	
    -- Database size info
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nDatabase size info:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('db_name: %s,connections: %s, db_size: %s, xact_commit: %s, xact_rollback: %s, blks_read: %s, blks_hit: %s\n', rec.datname, rec.connections, rec.db_size, rec.xact_commit, rec.xact_rollback, rec.blks_read, rec.blks_hit), true);
    END LOOP;	
	
	

    -- Processes with Wait Events
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nProcesses with Wait Events:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s, DB: %s, Event Type: %s, Event: %s\n', rec.usename, rec.datname, rec.wait_event_type, rec.wait_event), true);
    END LOOP;

    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Total Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(mean_exec_time::numeric, 2) AS avg_time_ms,
               rows, LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY total_exec_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time (ms): %s, Rows: %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_ms, rec.rows, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Execution Count
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Execution Count:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(total_exec_time::numeric / calls, 2) AS avg_time_per_call_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY calls DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time per Call (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_per_call_ms, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Average Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Average Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Avg Time (ms): %s, Total Time (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.avg_time_ms, rec.total_exec_time_ms, rec.query_snippet), true);
    END LOOP;
	
    -- Buffer Cache Usage by Relation
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBuffer Cache Usage by Relation:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Relation: %s, Buffers: %s, Size (MB): %s\n', rec.relation, rec.buffers, rec.size_mb), true);
    END LOOP;

    -- Buffer Cache Usage by Schema
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBuffer Cache Usage by Schema:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Schema: %s, Buffers: %s, Size (MB): %s\n', rec.schema_name, rec.buffers, rec.size_mb), true);
    END LOOP;	
	
    -- WAL Statistics
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL (Write Ahead Log) Statistics:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        wal_records, wal_fpi, wal_bytes, stats_reset
    FROM pg_stat_wal
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('WAL Records: %s, WAL FPIs: %s, WAL Bytes: %s, Stats Reset: %s\n',
        rec.wal_records, rec.wal_fpi, pg_size_pretty(rec.wal_bytes), rec.stats_reset), true);
    END LOOP;
	
    -- WAL Switch Statistics (Redo Generation Monitoring)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL Switch and Redo Generation Monitoring:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT count(*) AS switch_count FROM pg_control_checkpoint()
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Control Checkpoint info - %s\n',rec.switch_count), true);
    END LOOP;	

    -- Archive Statistics (if archiving is enabled)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL Archiver Statistics:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format(
        'Archived: %s, Failed: %s, Last Archived WAL: %s at %s, Last Failed WAL: %s at %s, Stats Reset: %s\n',
        rec.archived_count, rec.failed_count, rec.last_archived_wal, rec.last_archived_time, rec.last_failed_wal, rec.last_failed_time, rec.stats_reset), true);
    END LOOP;	

END;
$$ LANGUAGE plpgsql",7.6731359999999995,3,2.557712
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    rec record;
	output_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Active Connections by State
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nActive Connections by State:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('State: %s, Count: %s\n', rec.state, rec.connection_count), true);
    END LOOP;

    -- Number of connected users
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nNumber of connected users:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s\n', rec.usename), true);
    END LOOP;

    -- Long Running Queries (> 5 mins)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nLong Running Queries (> 5 mins):\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, User: %s, DB: %s, Duration: %s, Query: %s\n', rec.pid, rec.usename, rec.datname, rec.duration, rec.query_snippet), true);
    END LOOP;
	
    -- Top Queries by Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop Queries by Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, Runtime: %s\n', rec.pid, rec.runtime), true);
    END LOOP;	
	
    -- Blocking and Blocked Queries
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBlocking and Blocked Queries:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('blocked_pid: %s, blocked_query: %s, blocking_pid: %s, blocking_query: %s\n', rec.blocked_pid, rec.blocked_query, rec.blocking_pid, rec.blocking_query), true);
    END LOOP;		
	
    -- Database size info
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nDatabase size info:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('db_name: %s,connections: %s, db_size: %s, xact_commit: %s, xact_rollback: %s, blks_read: %s, blks_hit: %s\n', rec.datname, rec.connections, rec.db_size, rec.xact_commit, rec.xact_rollback, rec.blks_read, rec.blks_hit), true);
    END LOOP;	
	
	

    -- Processes with Wait Events
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nProcesses with Wait Events:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s, DB: %s, Event Type: %s, Event: %s\n', rec.usename, rec.datname, rec.wait_event_type, rec.wait_event), true);
    END LOOP;

    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Total Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(mean_exec_time::numeric, 2) AS avg_time_ms,
               rows, LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY total_exec_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time (ms): %s, Rows: %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_ms, rec.rows, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Execution Count
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Execution Count:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(total_exec_time::numeric / calls, 2) AS avg_time_per_call_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY calls DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time per Call (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_per_call_ms, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Average Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Average Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Avg Time (ms): %s, Total Time (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.avg_time_ms, rec.total_exec_time_ms, rec.query_snippet), true);
    END LOOP;
	
    -- Buffer Cache Usage by Relation
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBuffer Cache Usage by Relation:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Relation: %s, Buffers: %s, Size (MB): %s\n', rec.relation, rec.buffers, rec.size_mb), true);
    END LOOP;

    -- Buffer Cache Usage by Schema
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBuffer Cache Usage by Schema:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Schema: %s, Buffers: %s, Size (MB): %s\n', rec.schema_name, rec.buffers, rec.size_mb), true);
    END LOOP;	
	
    -- WAL Statistics
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL (Write Ahead Log) Statistics:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        wal_records, wal_fpi, wal_bytes, stats_reset
    FROM pg_stat_wal
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('WAL Records: %s, WAL FPIs: %s, WAL Bytes: %s, Stats Reset: %s\n',
        rec.wal_records, rec.wal_fpi, pg_size_pretty(rec.wal_bytes), rec.stats_reset), true);
    END LOOP;
	
    -- WAL Switch Statistics (Redo Generation Monitoring)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL Switch and Redo Generation Monitoring:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT count(*) AS switch_count FROM pg_control_checkpoint()
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Control Checkpoint info - %s\n',rec.switch_count), true);
    END LOOP;	

    -- Archive Statistics (if archiving is enabled)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL Archiver Statistics:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format(
        'Archived: %s, Failed: %s, Last Archived WAL: %s at %s, Last Failed WAL: %s at %s, Stats Reset: %s\n',
        rec.archived_count, rec.failed_count, rec.last_archived_wal, rec.last_archived_time, rec.last_failed_wal, rec.last_failed_time, rec.stats_reset), true);
    END LOOP;	

END;
$$ LANGUAGE plpgsql",7.6731359999999995,3,2.557712
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    rec record;
	output_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Active Connections by State
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nActive Connections by State:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('State: %s, Count: %s\n', rec.state, rec.connection_count), true);
    END LOOP;

    -- Number of connected users
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nNumber of connected users:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s\n', rec.usename), true);
    END LOOP;

    -- Long Running Queries (> 5 mins)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nLong Running Queries (> 5 mins):\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, User: %s, DB: %s, Duration: %s, Query: %s\n', rec.pid, rec.usename, rec.datname, rec.duration, rec.query_snippet), true);
    END LOOP;
	
    -- Top Queries by Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop Queries by Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, Runtime: %s\n', rec.pid, rec.runtime), true);
    END LOOP;	
	
    -- Blocking and Blocked Queries
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBlocking and Blocked Queries:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('blocked_pid: %s, blocked_query: %s, blocking_pid: %s, blocking_query: %s\n', rec.blocked_pid, rec.blocked_query, rec.blocking_pid, rec.blocking_query), true);
    END LOOP;		
	
    -- Database size info
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nDatabase size info:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('db_name: %s,connections: %s, db_size: %s, xact_commit: %s, xact_rollback: %s, blks_read: %s, blks_hit: %s\n', rec.datname, rec.connections, rec.db_size, rec.xact_commit, rec.xact_rollback, rec.blks_read, rec.blks_hit), true);
    END LOOP;	
	
	

    -- Processes with Wait Events
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nProcesses with Wait Events:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s, DB: %s, Event Type: %s, Event: %s\n', rec.usename, rec.datname, rec.wait_event_type, rec.wait_event), true);
    END LOOP;

    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Total Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(mean_exec_time::numeric, 2) AS avg_time_ms,
               rows, LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY total_exec_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time (ms): %s, Rows: %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_ms, rec.rows, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Execution Count
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Execution Count:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(total_exec_time::numeric / calls, 2) AS avg_time_per_call_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY calls DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time per Call (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_per_call_ms, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Average Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Average Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Avg Time (ms): %s, Total Time (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.avg_time_ms, rec.total_exec_time_ms, rec.query_snippet), true);
    END LOOP;
	
    -- Buffer Cache Usage by Relation
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBuffer Cache Usage by Relation:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Relation: %s, Buffers: %s, Size (MB): %s\n', rec.relation, rec.buffers, rec.size_mb), true);
    END LOOP;

    -- Buffer Cache Usage by Schema
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBuffer Cache Usage by Schema:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Schema: %s, Buffers: %s, Size (MB): %s\n', rec.schema_name, rec.buffers, rec.size_mb), true);
    END LOOP;	
	
    -- WAL Statistics
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL (Write Ahead Log) Statistics:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        wal_records, wal_fpi, wal_bytes, stats_reset
    FROM pg_stat_wal
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('WAL Records: %s, WAL FPIs: %s, WAL Bytes: %s, Stats Reset: %s\n',
        rec.wal_records, rec.wal_fpi, pg_size_pretty(rec.wal_bytes), rec.stats_reset), true);
    END LOOP;
	
    -- WAL Switch Statistics (Redo Generation Monitoring)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL Switch and Redo Generation Monitoring:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT count(*) AS switch_count FROM pg_control_checkpoint()
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Control Checkpoint info - %s\n',rec.switch_count), true);
    END LOOP;	

    -- Archive Statistics (if archiving is enabled)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL Archiver Statistics:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format(
        'Archived: %s, Failed: %s, Last Archived WAL: %s at %s, Last Failed WAL: %s at %s, Stats Reset: %s\n',
        rec.archived_count, rec.failed_count, rec.last_archived_wal, rec.last_archived_time, rec.last_failed_wal, rec.last_failed_time, rec.stats_reset), true);
    END LOOP;	

END;
$$ LANGUAGE plpgsql",7.6731359999999995,3,2.557712
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    rec record;
	output_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Active Connections by State
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nActive Connections by State:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('State: %s, Count: %s\n', rec.state, rec.connection_count), true);
    END LOOP;

    -- Number of connected users
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nNumber of connected users:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s\n', rec.usename), true);
    END LOOP;

    -- Long Running Queries (> 5 mins)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nLong Running Queries (> 5 mins):\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, User: %s, DB: %s, Duration: %s, Query: %s\n', rec.pid, rec.usename, rec.datname, rec.duration, rec.query_snippet), true);
    END LOOP;
	
    -- Top Queries by Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop Queries by Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, Runtime: %s\n', rec.pid, rec.runtime), true);
    END LOOP;	
	
    -- Blocking and Blocked Queries
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBlocking and Blocked Queries:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('blocked_pid: %s, blocked_query: %s, blocking_pid: %s, blocking_query: %s\n', rec.blocked_pid, rec.blocked_query, rec.blocking_pid, rec.blocking_query), true);
    END LOOP;		
	
    -- Database size info
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nDatabase size info:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('db_name: %s,connections: %s, db_size: %s, xact_commit: %s, xact_rollback: %s, blks_read: %s, blks_hit: %s\n', rec.datname, rec.connections, rec.db_size, rec.xact_commit, rec.xact_rollback, rec.blks_read, rec.blks_hit), true);
    END LOOP;	
	
	

    -- Processes with Wait Events
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nProcesses with Wait Events:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s, DB: %s, Event Type: %s, Event: %s\n', rec.usename, rec.datname, rec.wait_event_type, rec.wait_event), true);
    END LOOP;

    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Total Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(mean_exec_time::numeric, 2) AS avg_time_ms,
               rows, LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY total_exec_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time (ms): %s, Rows: %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_ms, rec.rows, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Execution Count
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Execution Count:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(total_exec_time::numeric / calls, 2) AS avg_time_per_call_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY calls DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time per Call (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_per_call_ms, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Average Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Average Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Avg Time (ms): %s, Total Time (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.avg_time_ms, rec.total_exec_time_ms, rec.query_snippet), true);
    END LOOP;
	
    -- Buffer Cache Usage by Relation
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBuffer Cache Usage by Relation:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Relation: %s, Buffers: %s, Size (MB): %s\n', rec.relation, rec.buffers, rec.size_mb), true);
    END LOOP;

    -- Buffer Cache Usage by Schema
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nBuffer Cache Usage by Schema:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Schema: %s, Buffers: %s, Size (MB): %s\n', rec.schema_name, rec.buffers, rec.size_mb), true);
    END LOOP;	
	
    -- WAL Statistics
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL (Write Ahead Log) Statistics:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT 
        wal_records, wal_fpi, wal_bytes, stats_reset
    FROM pg_stat_wal
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('WAL Records: %s, WAL FPIs: %s, WAL Bytes: %s, Stats Reset: %s\n',
        rec.wal_records, rec.wal_fpi, pg_size_pretty(rec.wal_bytes), rec.stats_reset), true);
    END LOOP;
	
    -- WAL Switch Statistics (Redo Generation Monitoring)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL Switch and Redo Generation Monitoring:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT count(*) AS switch_count FROM pg_control_checkpoint()
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('Control Checkpoint info - %s\n',rec.switch_count), true);
    END LOOP;	

    -- Archive Statistics (if archiving is enabled)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nWAL Archiver Statistics:\n----------------------------------------\n', true);
    FOR rec IN
    SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format(
        'Archived: %s, Failed: %s, Last Archived WAL: %s at %s, Last Failed WAL: %s at %s, Stats Reset: %s\n',
        rec.archived_count, rec.failed_count, rec.last_archived_wal, rec.last_archived_time, rec.last_failed_wal, rec.last_failed_time, rec.stats_reset), true);
    END LOOP;	

END;
$$ LANGUAGE plpgsql",7.6731359999999995,3,2.557712
"create table statistics.temp_pg_stat_activity as select now(),a.* from pg_stat_activity a with no data",7.405974,2,3.702987
"create table statistics.temp_pg_stat_activity as select now(),a.* from pg_stat_activity a with no data",7.405974,2,3.702987
"create table statistics.temp_pg_stat_activity as select now(),a.* from pg_stat_activity a with no data",7.405974,2,3.702987
"create table statistics.temp_pg_stat_activity as select now(),a.* from pg_stat_activity a with no data",7.405974,2,3.702987
"create table statistics.temp_pg_stat_activity as select now(),a.* from pg_stat_activity a with no data",7.405974,2,3.702987
alter table pgbench_tellers add primary key (tid),7.107507000000001,3,2.3691690000000003
alter table pgbench_tellers add primary key (tid),7.107507000000001,3,2.3691690000000003
alter table pgbench_tellers add primary key (tid),7.107507000000001,3,2.3691690000000003
alter table pgbench_tellers add primary key (tid),7.107507000000001,3,2.3691690000000003
alter table pgbench_tellers add primary key (tid),7.107507000000001,3,2.3691690000000003
select * from statistics.temp_user_calls,6.883478,2,3.441739
select * from statistics.temp_user_calls,6.883478,2,3.441739
select * from statistics.temp_user_calls,6.883478,2,3.441739
select * from statistics.temp_user_calls,6.883478,2,3.441739
select * from statistics.temp_user_calls,6.883478,2,3.441739
"SELECT name, setting, unit, short_desc
FROM pg_settings
WHERE name ~ $1
ORDER BY name",6.784786,8,0.84809825
"SELECT name, setting, unit, short_desc
FROM pg_settings
WHERE name ~ $1
ORDER BY name",6.784786,8,0.84809825
"SELECT name, setting, unit, short_desc
FROM pg_settings
WHERE name ~ $1
ORDER BY name",6.784786,8,0.84809825
"SELECT name, setting, unit, short_desc
FROM pg_settings
WHERE name ~ $1
ORDER BY name",6.784786,8,0.84809825
"SELECT name, setting, unit, short_desc
FROM pg_settings
WHERE name ~ $1
ORDER BY name",6.784786,8,0.84809825
"SELECT
    n.nspname AS schema_name,
    $1 AS segment_type,
    c.relname AS segment_name,
    c.reltuples AS num_rows,
    c.reloptions AS storage_options
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = $2 
    AND n.nspname = $3
UNION ALL
SELECT
    n.nspname AS schema_name,
    $4 AS segment_type,
    c.relname AS segment_name,
    c.reltuples AS num_rows,
    c.reloptions AS storage_options
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = $5 
    AND n.nspname = $6
ORDER BY
    schema_name, segment_type, segment_name",6.503223,8,0.812902875
"SELECT
    n.nspname AS schema_name,
    $1 AS segment_type,
    c.relname AS segment_name,
    c.reltuples AS num_rows,
    c.reloptions AS storage_options
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = $2 
    AND n.nspname = $3
UNION ALL
SELECT
    n.nspname AS schema_name,
    $4 AS segment_type,
    c.relname AS segment_name,
    c.reltuples AS num_rows,
    c.reloptions AS storage_options
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = $5 
    AND n.nspname = $6
ORDER BY
    schema_name, segment_type, segment_name",6.503223,8,0.812902875
"SELECT
    n.nspname AS schema_name,
    $1 AS segment_type,
    c.relname AS segment_name,
    c.reltuples AS num_rows,
    c.reloptions AS storage_options
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = $2 
    AND n.nspname = $3
UNION ALL
SELECT
    n.nspname AS schema_name,
    $4 AS segment_type,
    c.relname AS segment_name,
    c.reltuples AS num_rows,
    c.reloptions AS storage_options
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = $5 
    AND n.nspname = $6
ORDER BY
    schema_name, segment_type, segment_name",6.503223,8,0.812902875
"SELECT
    n.nspname AS schema_name,
    $1 AS segment_type,
    c.relname AS segment_name,
    c.reltuples AS num_rows,
    c.reloptions AS storage_options
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = $2 
    AND n.nspname = $3
UNION ALL
SELECT
    n.nspname AS schema_name,
    $4 AS segment_type,
    c.relname AS segment_name,
    c.reltuples AS num_rows,
    c.reloptions AS storage_options
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = $5 
    AND n.nspname = $6
ORDER BY
    schema_name, segment_type, segment_name",6.503223,8,0.812902875
"SELECT
    n.nspname AS schema_name,
    $1 AS segment_type,
    c.relname AS segment_name,
    c.reltuples AS num_rows,
    c.reloptions AS storage_options
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = $2 
    AND n.nspname = $3
UNION ALL
SELECT
    n.nspname AS schema_name,
    $4 AS segment_type,
    c.relname AS segment_name,
    c.reltuples AS num_rows,
    c.reloptions AS storage_options
FROM
    pg_class c
JOIN
    pg_namespace n ON n.oid = c.relnamespace
WHERE
    c.relkind = $5 
    AND n.nspname = $6
ORDER BY
    schema_name, segment_type, segment_name",6.503223,8,0.812902875
create user testuser with password 'newpass1',6.425244,1,6.425244
create user testuser with password 'newpass1',6.425244,1,6.425244
create user testuser with password 'newpass1',6.425244,1,6.425244
create user testuser with password 'newpass1',6.425244,1,6.425244
create user testuser with password 'newpass1',6.425244,1,6.425244
vacuum analyze pgbench_branches,6.3204020000000005,3,2.106800666666667
vacuum analyze pgbench_branches,6.3204020000000005,3,2.106800666666667
vacuum analyze pgbench_branches,6.3204020000000005,3,2.106800666666667
vacuum analyze pgbench_branches,6.3204020000000005,3,2.106800666666667
vacuum analyze pgbench_branches,6.3204020000000005,3,2.106800666666667
"SELECT cron.schedule($1, $2)",6.277275,7,0.8967535714285715
"SELECT cron.schedule($1, $2)",6.277275,7,0.8967535714285715
"SELECT cron.schedule($1, $2)",6.277275,7,0.8967535714285715
"SELECT cron.schedule($1, $2)",6.277275,7,0.8967535714285715
"SELECT cron.schedule($1, $2)",6.277275,7,0.8967535714285715
"SELECT 
    n.nspname AS owner,
    SUM(pg_total_relation_size(c.oid)) / $1 / $2 / $3 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname NOT IN ($4, $5, $6)
GROUP BY n.nspname
HAVING SUM(pg_total_relation_size(c.oid)) / $7 / $8 / $9 >= $10
ORDER BY gbytes DESC",6.227221,8,0.7784026250000001
"SELECT 
    n.nspname AS owner,
    SUM(pg_total_relation_size(c.oid)) / $1 / $2 / $3 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname NOT IN ($4, $5, $6)
GROUP BY n.nspname
HAVING SUM(pg_total_relation_size(c.oid)) / $7 / $8 / $9 >= $10
ORDER BY gbytes DESC",6.227221,8,0.7784026250000001
"SELECT 
    n.nspname AS owner,
    SUM(pg_total_relation_size(c.oid)) / $1 / $2 / $3 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname NOT IN ($4, $5, $6)
GROUP BY n.nspname
HAVING SUM(pg_total_relation_size(c.oid)) / $7 / $8 / $9 >= $10
ORDER BY gbytes DESC",6.227221,8,0.7784026250000001
"SELECT 
    n.nspname AS owner,
    SUM(pg_total_relation_size(c.oid)) / $1 / $2 / $3 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname NOT IN ($4, $5, $6)
GROUP BY n.nspname
HAVING SUM(pg_total_relation_size(c.oid)) / $7 / $8 / $9 >= $10
ORDER BY gbytes DESC",6.227221,8,0.7784026250000001
"SELECT 
    n.nspname AS owner,
    SUM(pg_total_relation_size(c.oid)) / $1 / $2 / $3 AS gbytes
FROM pg_class c
JOIN pg_namespace n ON c.relnamespace = n.oid
WHERE n.nspname NOT IN ($4, $5, $6)
GROUP BY n.nspname
HAVING SUM(pg_total_relation_size(c.oid)) / $7 / $8 / $9 >= $10
ORDER BY gbytes DESC",6.227221,8,0.7784026250000001
select count($1) from statistics.ash_stat_statements_sample,6.07316,2,3.03658
select count($1) from statistics.ash_stat_statements_sample,6.07316,2,3.03658
select count($1) from statistics.ash_stat_statements_sample,6.07316,2,3.03658
select count($1) from statistics.ash_stat_statements_sample,6.07316,2,3.03658
select count($1) from statistics.ash_stat_statements_sample,6.07316,2,3.03658
"SELECT name, setting AS value, short_desc AS description
FROM pg_settings
WHERE setting <> boot_val
ORDER BY name",5.621866999999999,8,0.702733375
"SELECT name, setting AS value, short_desc AS description
FROM pg_settings
WHERE setting <> boot_val
ORDER BY name",5.621866999999999,8,0.702733375
"SELECT name, setting AS value, short_desc AS description
FROM pg_settings
WHERE setting <> boot_val
ORDER BY name",5.621866999999999,8,0.702733375
"SELECT name, setting AS value, short_desc AS description
FROM pg_settings
WHERE setting <> boot_val
ORDER BY name",5.621866999999999,8,0.702733375
"SELECT name, setting AS value, short_desc AS description
FROM pg_settings
WHERE setting <> boot_val
ORDER BY name",5.621866999999999,8,0.702733375
truncate table pgbench_accounts,5.409089,1,5.409089
truncate table pgbench_accounts,5.409089,1,5.409089
truncate table pgbench_accounts,5.409089,1,5.409089
truncate table pgbench_accounts,5.409089,1,5.409089
truncate table pgbench_accounts,5.409089,1,5.409089
"SELECT name AS property_name, setting AS property_value
FROM pg_settings",5.348046,8,0.66850575
"SELECT name AS property_name, setting AS property_value
FROM pg_settings",5.348046,8,0.66850575
"SELECT name AS property_name, setting AS property_value
FROM pg_settings",5.348046,8,0.66850575
"SELECT name AS property_name, setting AS property_value
FROM pg_settings",5.348046,8,0.66850575
"SELECT name AS property_name, setting AS property_value
FROM pg_settings",5.348046,8,0.66850575
truncate table statistics.temp_user_calls,5.281295,1,5.281295
truncate table statistics.temp_user_calls,5.281295,1,5.281295
truncate table statistics.temp_user_calls,5.281295,1,5.281295
truncate table statistics.temp_user_calls,5.281295,1,5.281295
truncate table statistics.temp_user_calls,5.281295,1,5.281295
"SELECT name, setting, unit, category, short_desc
FROM pg_settings
WHERE name LIKE $1",5.236924999999999,8,0.6546156249999999
"SELECT name, setting, unit, category, short_desc
FROM pg_settings
WHERE name LIKE $1",5.236924999999999,8,0.6546156249999999
"SELECT name, setting, unit, category, short_desc
FROM pg_settings
WHERE name LIKE $1",5.236924999999999,8,0.6546156249999999
"SELECT name, setting, unit, category, short_desc
FROM pg_settings
WHERE name LIKE $1",5.236924999999999,8,0.6546156249999999
"SELECT name, setting, unit, category, short_desc
FROM pg_settings
WHERE name LIKE $1",5.236924999999999,8,0.6546156249999999
"SELECT
    schemaname,
    relname AS table_name,
    indexrelname AS index_name,
    idx_scan,
    pg_size_pretty(pg_relation_size(i.indexrelid)) AS index_size
FROM
    pg_stat_user_indexes ui
JOIN
    pg_index i ON ui.indexrelid = i.indexrelid
WHERE
    idx_scan = $1  -- Index has never been used
    AND NOT indisprimary  -- Exclude primary keys
ORDER BY
    pg_relation_size(i.indexrelid) DESC",5.035404,9,0.5594893333333333
"SELECT
    schemaname,
    relname AS table_name,
    indexrelname AS index_name,
    idx_scan,
    pg_size_pretty(pg_relation_size(i.indexrelid)) AS index_size
FROM
    pg_stat_user_indexes ui
JOIN
    pg_index i ON ui.indexrelid = i.indexrelid
WHERE
    idx_scan = $1  -- Index has never been used
    AND NOT indisprimary  -- Exclude primary keys
ORDER BY
    pg_relation_size(i.indexrelid) DESC",5.035404,9,0.5594893333333333
"SELECT
    schemaname,
    relname AS table_name,
    indexrelname AS index_name,
    idx_scan,
    pg_size_pretty(pg_relation_size(i.indexrelid)) AS index_size
FROM
    pg_stat_user_indexes ui
JOIN
    pg_index i ON ui.indexrelid = i.indexrelid
WHERE
    idx_scan = $1  -- Index has never been used
    AND NOT indisprimary  -- Exclude primary keys
ORDER BY
    pg_relation_size(i.indexrelid) DESC",5.035404,9,0.5594893333333333
"SELECT
    schemaname,
    relname AS table_name,
    indexrelname AS index_name,
    idx_scan,
    pg_size_pretty(pg_relation_size(i.indexrelid)) AS index_size
FROM
    pg_stat_user_indexes ui
JOIN
    pg_index i ON ui.indexrelid = i.indexrelid
WHERE
    idx_scan = $1  -- Index has never been used
    AND NOT indisprimary  -- Exclude primary keys
ORDER BY
    pg_relation_size(i.indexrelid) DESC",5.035404,9,0.5594893333333333
"SELECT
    schemaname,
    relname AS table_name,
    indexrelname AS index_name,
    idx_scan,
    pg_size_pretty(pg_relation_size(i.indexrelid)) AS index_size
FROM
    pg_stat_user_indexes ui
JOIN
    pg_index i ON ui.indexrelid = i.indexrelid
WHERE
    idx_scan = $1  -- Index has never been used
    AND NOT indisprimary  -- Exclude primary keys
ORDER BY
    pg_relation_size(i.indexrelid) DESC",5.035404,9,0.5594893333333333
"SELECT 
  schemaname, 
  relname AS table_name, 
  pg_size_pretty(pg_total_relation_size(relid)) AS total_size, 
  pg_size_pretty(pg_relation_size(relid)) AS table_size, 
  pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) AS index_size
FROM pg_catalog.pg_statio_user_tables
ORDER BY pg_total_relation_size(relid) DESC
LIMIT $1",4.970128999999999,8,0.6212661250000001
"SELECT 
  schemaname, 
  relname AS table_name, 
  pg_size_pretty(pg_total_relation_size(relid)) AS total_size, 
  pg_size_pretty(pg_relation_size(relid)) AS table_size, 
  pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) AS index_size
FROM pg_catalog.pg_statio_user_tables
ORDER BY pg_total_relation_size(relid) DESC
LIMIT $1",4.970128999999999,8,0.6212661250000001
"SELECT 
  schemaname, 
  relname AS table_name, 
  pg_size_pretty(pg_total_relation_size(relid)) AS total_size, 
  pg_size_pretty(pg_relation_size(relid)) AS table_size, 
  pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) AS index_size
FROM pg_catalog.pg_statio_user_tables
ORDER BY pg_total_relation_size(relid) DESC
LIMIT $1",4.970128999999999,8,0.6212661250000001
"SELECT 
  schemaname, 
  relname AS table_name, 
  pg_size_pretty(pg_total_relation_size(relid)) AS total_size, 
  pg_size_pretty(pg_relation_size(relid)) AS table_size, 
  pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) AS index_size
FROM pg_catalog.pg_statio_user_tables
ORDER BY pg_total_relation_size(relid) DESC
LIMIT $1",4.970128999999999,8,0.6212661250000001
"SELECT 
  schemaname, 
  relname AS table_name, 
  pg_size_pretty(pg_total_relation_size(relid)) AS total_size, 
  pg_size_pretty(pg_relation_size(relid)) AS table_size, 
  pg_size_pretty(pg_total_relation_size(relid) - pg_relation_size(relid)) AS index_size
FROM pg_catalog.pg_statio_user_tables
ORDER BY pg_total_relation_size(relid) DESC
LIMIT $1",4.970128999999999,8,0.6212661250000001
"SELECT pol.polname, pol.polpermissive,
  CASE WHEN pol.polroles = $1 THEN $2 ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),$3) END,
  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
  CASE pol.polcmd
    WHEN $4 THEN $5
    WHEN $6 THEN $7
    WHEN $8 THEN $9
    WHEN $10 THEN $11
    END AS cmd
FROM pg_catalog.pg_policy pol
WHERE pol.polrelid = $12 ORDER BY 1",4.804514000000001,7,0.6863591428571428
"SELECT pol.polname, pol.polpermissive,
  CASE WHEN pol.polroles = $1 THEN $2 ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),$3) END,
  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
  CASE pol.polcmd
    WHEN $4 THEN $5
    WHEN $6 THEN $7
    WHEN $8 THEN $9
    WHEN $10 THEN $11
    END AS cmd
FROM pg_catalog.pg_policy pol
WHERE pol.polrelid = $12 ORDER BY 1",4.804514000000001,7,0.6863591428571428
"SELECT pol.polname, pol.polpermissive,
  CASE WHEN pol.polroles = $1 THEN $2 ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),$3) END,
  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
  CASE pol.polcmd
    WHEN $4 THEN $5
    WHEN $6 THEN $7
    WHEN $8 THEN $9
    WHEN $10 THEN $11
    END AS cmd
FROM pg_catalog.pg_policy pol
WHERE pol.polrelid = $12 ORDER BY 1",4.804514000000001,7,0.6863591428571428
"SELECT pol.polname, pol.polpermissive,
  CASE WHEN pol.polroles = $1 THEN $2 ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),$3) END,
  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
  CASE pol.polcmd
    WHEN $4 THEN $5
    WHEN $6 THEN $7
    WHEN $8 THEN $9
    WHEN $10 THEN $11
    END AS cmd
FROM pg_catalog.pg_policy pol
WHERE pol.polrelid = $12 ORDER BY 1",4.804514000000001,7,0.6863591428571428
"SELECT pol.polname, pol.polpermissive,
  CASE WHEN pol.polroles = $1 THEN $2 ELSE pg_catalog.array_to_string(array(select rolname from pg_catalog.pg_roles where oid = any (pol.polroles) order by 1),$3) END,
  pg_catalog.pg_get_expr(pol.polqual, pol.polrelid),
  pg_catalog.pg_get_expr(pol.polwithcheck, pol.polrelid),
  CASE pol.polcmd
    WHEN $4 THEN $5
    WHEN $6 THEN $7
    WHEN $8 THEN $9
    WHEN $10 THEN $11
    END AS cmd
FROM pg_catalog.pg_policy pol
WHERE pol.polrelid = $12 ORDER BY 1",4.804514000000001,7,0.6863591428571428
vacuum analyze pgbench_tellers,4.796428,3,1.5988093333333333
vacuum analyze pgbench_tellers,4.796428,3,1.5988093333333333
vacuum analyze pgbench_tellers,4.796428,3,1.5988093333333333
vacuum analyze pgbench_tellers,4.796428,3,1.5988093333333333
vacuum analyze pgbench_tellers,4.796428,3,1.5988093333333333
truncate pgbench_history,4.793716000000001,8,0.5992145
truncate pgbench_history,4.793716000000001,8,0.5992145
truncate pgbench_history,4.793716000000001,8,0.5992145
truncate pgbench_history,4.793716000000001,8,0.5992145
truncate pgbench_history,4.793716000000001,8,0.5992145
"SELECT name, setting
FROM pg_settings
WHERE name LIKE $1
   OR name LIKE $2
   OR name LIKE $3
   OR name IN ($4, $5, $6, $7)
ORDER BY name",4.367813000000001,8,0.545976625
"SELECT name, setting
FROM pg_settings
WHERE name LIKE $1
   OR name LIKE $2
   OR name LIKE $3
   OR name IN ($4, $5, $6, $7)
ORDER BY name",4.367813000000001,8,0.545976625
"SELECT name, setting
FROM pg_settings
WHERE name LIKE $1
   OR name LIKE $2
   OR name LIKE $3
   OR name IN ($4, $5, $6, $7)
ORDER BY name",4.367813000000001,8,0.545976625
"SELECT name, setting
FROM pg_settings
WHERE name LIKE $1
   OR name LIKE $2
   OR name LIKE $3
   OR name IN ($4, $5, $6, $7)
ORDER BY name",4.367813000000001,8,0.545976625
"SELECT name, setting
FROM pg_settings
WHERE name LIKE $1
   OR name LIKE $2
   OR name LIKE $3
   OR name IN ($4, $5, $6, $7)
ORDER BY name",4.367813000000001,8,0.545976625
drop table statistics.query_details,4.3323160000000005,3,1.4441053333333334
drop table statistics.query_details,4.3323160000000005,3,1.4441053333333334
drop table statistics.query_details,4.3323160000000005,3,1.4441053333333334
drop table statistics.query_details,4.3323160000000005,3,1.4441053333333334
drop table statistics.query_details,4.3323160000000005,3,1.4441053333333334
create table statistics.temp_pg_stat_statements as select * from pg_stat_statements with no data,4.232069,1,4.232069
create table statistics.temp_pg_stat_statements as select * from pg_stat_statements with no data,4.232069,1,4.232069
create table statistics.temp_pg_stat_statements as select * from pg_stat_statements with no data,4.232069,1,4.232069
create table statistics.temp_pg_stat_statements as select * from pg_stat_statements with no data,4.232069,1,4.232069
create table statistics.temp_pg_stat_statements as select * from pg_stat_statements with no data,4.232069,1,4.232069
"create table statistics.temp_pg_wait_sampling_get_profile as select now() as current_date,a.* from pg_wait_sampling_get_profile() a with no data",4.146071,1,4.146071
"create table statistics.temp_pg_wait_sampling_get_profile as select now() as current_date,a.* from pg_wait_sampling_get_profile() a with no data",4.146071,1,4.146071
"create table statistics.temp_pg_wait_sampling_get_profile as select now() as current_date,a.* from pg_wait_sampling_get_profile() a with no data",4.146071,1,4.146071
"create table statistics.temp_pg_wait_sampling_get_profile as select now() as current_date,a.* from pg_wait_sampling_get_profile() a with no data",4.146071,1,4.146071
"create table statistics.temp_pg_wait_sampling_get_profile as select now() as current_date,a.* from pg_wait_sampling_get_profile() a with no data",4.146071,1,4.146071
"SELECT name, setting
FROM pg_settings
WHERE name IN ($1, $2, $3, $4)
ORDER BY name",4.119516,8,0.5149395
"SELECT name, setting
FROM pg_settings
WHERE name IN ($1, $2, $3, $4)
ORDER BY name",4.119516,8,0.5149395
"SELECT name, setting
FROM pg_settings
WHERE name IN ($1, $2, $3, $4)
ORDER BY name",4.119516,8,0.5149395
"SELECT name, setting
FROM pg_settings
WHERE name IN ($1, $2, $3, $4)
ORDER BY name",4.119516,8,0.5149395
"SELECT name, setting
FROM pg_settings
WHERE name IN ($1, $2, $3, $4)
ORDER BY name",4.119516,8,0.5149395
"create table statistics.temp_user_calls as
SELECT now() as current_date,
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname
with no data",4.080931,1,4.080931
"create table statistics.temp_user_calls as
SELECT now() as current_date,
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname
with no data",4.080931,1,4.080931
"create table statistics.temp_user_calls as
SELECT now() as current_date,
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname
with no data",4.080931,1,4.080931
"create table statistics.temp_user_calls as
SELECT now() as current_date,
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname
with no data",4.080931,1,4.080931
"create table statistics.temp_user_calls as
SELECT now() as current_date,
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname
with no data",4.080931,1,4.080931
vacuum pgbench_tellers,4.0500300000000005,7,0.5785757142857143
vacuum pgbench_tellers,4.0500300000000005,7,0.5785757142857143
vacuum pgbench_tellers,4.0500300000000005,7,0.5785757142857143
vacuum pgbench_tellers,4.0500300000000005,7,0.5785757142857143
vacuum pgbench_tellers,4.0500300000000005,7,0.5785757142857143
"create table statistics.temp_pg_stat_statements as select now() as current_date,a.* from pg_stat_statements a with no data",3.944004,1,3.944004
"create table statistics.temp_pg_stat_statements as select now() as current_date,a.* from pg_stat_statements a with no data",3.944004,1,3.944004
"create table statistics.temp_pg_stat_statements as select now() as current_date,a.* from pg_stat_statements a with no data",3.944004,1,3.944004
"create table statistics.temp_pg_stat_statements as select now() as current_date,a.* from pg_stat_statements a with no data",3.944004,1,3.944004
"create table statistics.temp_pg_stat_statements as select now() as current_date,a.* from pg_stat_statements a with no data",3.944004,1,3.944004
"SELECT
    CASE
        WHEN setting = $1 THEN $2
        ELSE $3
    END AS archive_status
FROM pg_settings
WHERE name = $4",3.8879330000000003,8,0.48599162500000004
"SELECT
    CASE
        WHEN setting = $1 THEN $2
        ELSE $3
    END AS archive_status
FROM pg_settings
WHERE name = $4",3.8879330000000003,8,0.48599162500000004
"SELECT
    CASE
        WHEN setting = $1 THEN $2
        ELSE $3
    END AS archive_status
FROM pg_settings
WHERE name = $4",3.8879330000000003,8,0.48599162500000004
"SELECT
    CASE
        WHEN setting = $1 THEN $2
        ELSE $3
    END AS archive_status
FROM pg_settings
WHERE name = $4",3.8879330000000003,8,0.48599162500000004
"SELECT
    CASE
        WHEN setting = $1 THEN $2
        ELSE $3
    END AS archive_status
FROM pg_settings
WHERE name = $4",3.8879330000000003,8,0.48599162500000004
"create table statistics.temp_blocked_sessions as
SELECT now() as current_date,blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted
with no data",3.823712,1,3.823712
"create table statistics.temp_blocked_sessions as
SELECT now() as current_date,blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted
with no data",3.823712,1,3.823712
"create table statistics.temp_blocked_sessions as
SELECT now() as current_date,blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted
with no data",3.823712,1,3.823712
"create table statistics.temp_blocked_sessions as
SELECT now() as current_date,blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted
with no data",3.823712,1,3.823712
"create table statistics.temp_blocked_sessions as
SELECT now() as current_date,blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted
with no data",3.823712,1,3.823712
"CREATE TABLE statistics.temp_database_connections AS
SELECT now() as current_date,datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database
with no data",3.804236,1,3.804236
"CREATE TABLE statistics.temp_database_connections AS
SELECT now() as current_date,datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database
with no data",3.804236,1,3.804236
"CREATE TABLE statistics.temp_database_connections AS
SELECT now() as current_date,datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database
with no data",3.804236,1,3.804236
"CREATE TABLE statistics.temp_database_connections AS
SELECT now() as current_date,datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database
with no data",3.804236,1,3.804236
"CREATE TABLE statistics.temp_database_connections AS
SELECT now() as current_date,datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database
with no data",3.804236,1,3.804236
create table statistics.temp_pg_stat_activity as select * from pg_stat_activity with no data,3.748425,1,3.748425
create table statistics.temp_pg_stat_activity as select * from pg_stat_activity with no data,3.748425,1,3.748425
create table statistics.temp_pg_stat_activity as select * from pg_stat_activity with no data,3.748425,1,3.748425
create table statistics.temp_pg_stat_activity as select * from pg_stat_activity with no data,3.748425,1,3.748425
create table statistics.temp_pg_stat_activity as select * from pg_stat_activity with no data,3.748425,1,3.748425
"CREATE TABLE statistics.ash_stat_statements_sample AS
SELECT now() as sample_time,a.* FROM pg_stat_statements a WHERE $1",3.500929,1,3.500929
"CREATE TABLE statistics.ash_stat_statements_sample AS
SELECT now() as sample_time,a.* FROM pg_stat_statements a WHERE $1",3.500929,1,3.500929
"CREATE TABLE statistics.ash_stat_statements_sample AS
SELECT now() as sample_time,a.* FROM pg_stat_statements a WHERE $1",3.500929,1,3.500929
"CREATE TABLE statistics.ash_stat_statements_sample AS
SELECT now() as sample_time,a.* FROM pg_stat_statements a WHERE $1",3.500929,1,3.500929
"CREATE TABLE statistics.ash_stat_statements_sample AS
SELECT now() as sample_time,a.* FROM pg_stat_statements a WHERE $1",3.500929,1,3.500929
truncate table statistics.temp_pg_stat_statements,3.496105,1,3.496105
truncate table statistics.temp_pg_stat_statements,3.496105,1,3.496105
truncate table statistics.temp_pg_stat_statements,3.496105,1,3.496105
truncate table statistics.temp_pg_stat_statements,3.496105,1,3.496105
truncate table statistics.temp_pg_stat_statements,3.496105,1,3.496105
"/*
prompt SCRIPT: ORA_N04_all_objects

column owner           format a20
column object_name     format a30
column SUBOBJECT_NAME  format a20

prompt
prompt STATS: List all non-system database objects
prompt

select  OWNER,
	OBJECT_NAME,
	OBJECT_TYPE,
	SUBOBJECT_NAME,
	OBJECT_ID,
	DATA_OBJECT_ID,
	STATUS
        from ALL_OBJECTS
where   OWNER not in (&gOracleSpecialUsers)
order by OWNER, OBJECT_NAME, SUBOBJECT_NAME;

set long 80
-- End of script.




##########################################################
##########################################################
*/
-- File :        N04_all_objects.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system database objects.
--
-- Author :      Andy Coleman
--
-- Date :        19th March 2012
--
-- List all non-system database objects
SELECT
    nspname AS owner,
    relname AS object_name,
    CASE
        WHEN relkind = $1 THEN $2
        WHEN relkind = $3 THEN $4
        WHEN relkind = $5 THEN $6
        WHEN relkind = $7 THEN $8
        WHEN relkind = $9 THEN $10
        ELSE $11
    END AS object_type,
    $12::text AS subobject_name,  -- PostgreSQL does not have subobjects in the same way as Oracle
    pg_class.oid AS object_id,
    $13::text AS data_object_id,  -- No direct equivalent in PostgreSQL
    CASE
        WHEN relkind IN ($14, $15, $16) AND relhastriggers THEN $17
        ELSE $18
    END AS status
FROM
    pg_class pg_class 
    JOIN
     pg_namespace pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE
    nspname NOT IN ($19, $20)
    AND pg_class.relkind IN ($21, $22, $23, $24, $25)
ORDER BY
    nspname, relname",3.472344,8,0.434043
"/*
prompt SCRIPT: ORA_N04_all_objects

column owner           format a20
column object_name     format a30
column SUBOBJECT_NAME  format a20

prompt
prompt STATS: List all non-system database objects
prompt

select  OWNER,
	OBJECT_NAME,
	OBJECT_TYPE,
	SUBOBJECT_NAME,
	OBJECT_ID,
	DATA_OBJECT_ID,
	STATUS
        from ALL_OBJECTS
where   OWNER not in (&gOracleSpecialUsers)
order by OWNER, OBJECT_NAME, SUBOBJECT_NAME;

set long 80
-- End of script.




##########################################################
##########################################################
*/
-- File :        N04_all_objects.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system database objects.
--
-- Author :      Andy Coleman
--
-- Date :        19th March 2012
--
-- List all non-system database objects
SELECT
    nspname AS owner,
    relname AS object_name,
    CASE
        WHEN relkind = $1 THEN $2
        WHEN relkind = $3 THEN $4
        WHEN relkind = $5 THEN $6
        WHEN relkind = $7 THEN $8
        WHEN relkind = $9 THEN $10
        ELSE $11
    END AS object_type,
    $12::text AS subobject_name,  -- PostgreSQL does not have subobjects in the same way as Oracle
    pg_class.oid AS object_id,
    $13::text AS data_object_id,  -- No direct equivalent in PostgreSQL
    CASE
        WHEN relkind IN ($14, $15, $16) AND relhastriggers THEN $17
        ELSE $18
    END AS status
FROM
    pg_class pg_class 
    JOIN
     pg_namespace pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE
    nspname NOT IN ($19, $20)
    AND pg_class.relkind IN ($21, $22, $23, $24, $25)
ORDER BY
    nspname, relname",3.472344,8,0.434043
"/*
prompt SCRIPT: ORA_N04_all_objects

column owner           format a20
column object_name     format a30
column SUBOBJECT_NAME  format a20

prompt
prompt STATS: List all non-system database objects
prompt

select  OWNER,
	OBJECT_NAME,
	OBJECT_TYPE,
	SUBOBJECT_NAME,
	OBJECT_ID,
	DATA_OBJECT_ID,
	STATUS
        from ALL_OBJECTS
where   OWNER not in (&gOracleSpecialUsers)
order by OWNER, OBJECT_NAME, SUBOBJECT_NAME;

set long 80
-- End of script.




##########################################################
##########################################################
*/
-- File :        N04_all_objects.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system database objects.
--
-- Author :      Andy Coleman
--
-- Date :        19th March 2012
--
-- List all non-system database objects
SELECT
    nspname AS owner,
    relname AS object_name,
    CASE
        WHEN relkind = $1 THEN $2
        WHEN relkind = $3 THEN $4
        WHEN relkind = $5 THEN $6
        WHEN relkind = $7 THEN $8
        WHEN relkind = $9 THEN $10
        ELSE $11
    END AS object_type,
    $12::text AS subobject_name,  -- PostgreSQL does not have subobjects in the same way as Oracle
    pg_class.oid AS object_id,
    $13::text AS data_object_id,  -- No direct equivalent in PostgreSQL
    CASE
        WHEN relkind IN ($14, $15, $16) AND relhastriggers THEN $17
        ELSE $18
    END AS status
FROM
    pg_class pg_class 
    JOIN
     pg_namespace pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE
    nspname NOT IN ($19, $20)
    AND pg_class.relkind IN ($21, $22, $23, $24, $25)
ORDER BY
    nspname, relname",3.472344,8,0.434043
"/*
prompt SCRIPT: ORA_N04_all_objects

column owner           format a20
column object_name     format a30
column SUBOBJECT_NAME  format a20

prompt
prompt STATS: List all non-system database objects
prompt

select  OWNER,
	OBJECT_NAME,
	OBJECT_TYPE,
	SUBOBJECT_NAME,
	OBJECT_ID,
	DATA_OBJECT_ID,
	STATUS
        from ALL_OBJECTS
where   OWNER not in (&gOracleSpecialUsers)
order by OWNER, OBJECT_NAME, SUBOBJECT_NAME;

set long 80
-- End of script.




##########################################################
##########################################################
*/
-- File :        N04_all_objects.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system database objects.
--
-- Author :      Andy Coleman
--
-- Date :        19th March 2012
--
-- List all non-system database objects
SELECT
    nspname AS owner,
    relname AS object_name,
    CASE
        WHEN relkind = $1 THEN $2
        WHEN relkind = $3 THEN $4
        WHEN relkind = $5 THEN $6
        WHEN relkind = $7 THEN $8
        WHEN relkind = $9 THEN $10
        ELSE $11
    END AS object_type,
    $12::text AS subobject_name,  -- PostgreSQL does not have subobjects in the same way as Oracle
    pg_class.oid AS object_id,
    $13::text AS data_object_id,  -- No direct equivalent in PostgreSQL
    CASE
        WHEN relkind IN ($14, $15, $16) AND relhastriggers THEN $17
        ELSE $18
    END AS status
FROM
    pg_class pg_class 
    JOIN
     pg_namespace pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE
    nspname NOT IN ($19, $20)
    AND pg_class.relkind IN ($21, $22, $23, $24, $25)
ORDER BY
    nspname, relname",3.472344,8,0.434043
"/*
prompt SCRIPT: ORA_N04_all_objects

column owner           format a20
column object_name     format a30
column SUBOBJECT_NAME  format a20

prompt
prompt STATS: List all non-system database objects
prompt

select  OWNER,
	OBJECT_NAME,
	OBJECT_TYPE,
	SUBOBJECT_NAME,
	OBJECT_ID,
	DATA_OBJECT_ID,
	STATUS
        from ALL_OBJECTS
where   OWNER not in (&gOracleSpecialUsers)
order by OWNER, OBJECT_NAME, SUBOBJECT_NAME;

set long 80
-- End of script.




##########################################################
##########################################################
*/
-- File :        N04_all_objects.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system database objects.
--
-- Author :      Andy Coleman
--
-- Date :        19th March 2012
--
-- List all non-system database objects
SELECT
    nspname AS owner,
    relname AS object_name,
    CASE
        WHEN relkind = $1 THEN $2
        WHEN relkind = $3 THEN $4
        WHEN relkind = $5 THEN $6
        WHEN relkind = $7 THEN $8
        WHEN relkind = $9 THEN $10
        ELSE $11
    END AS object_type,
    $12::text AS subobject_name,  -- PostgreSQL does not have subobjects in the same way as Oracle
    pg_class.oid AS object_id,
    $13::text AS data_object_id,  -- No direct equivalent in PostgreSQL
    CASE
        WHEN relkind IN ($14, $15, $16) AND relhastriggers THEN $17
        ELSE $18
    END AS status
FROM
    pg_class pg_class 
    JOIN
     pg_namespace pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE
    nspname NOT IN ($19, $20)
    AND pg_class.relkind IN ($21, $22, $23, $24, $25)
ORDER BY
    nspname, relname",3.472344,8,0.434043
create table statistics.temp_pg_wait_sampling_get_profile as select * from pg_wait_sampling_get_profile() with no data,3.384817,1,3.384817
create table statistics.temp_pg_wait_sampling_get_profile as select * from pg_wait_sampling_get_profile() with no data,3.384817,1,3.384817
create table statistics.temp_pg_wait_sampling_get_profile as select * from pg_wait_sampling_get_profile() with no data,3.384817,1,3.384817
create table statistics.temp_pg_wait_sampling_get_profile as select * from pg_wait_sampling_get_profile() with no data,3.384817,1,3.384817
create table statistics.temp_pg_wait_sampling_get_profile as select * from pg_wait_sampling_get_profile() with no data,3.384817,1,3.384817
"insert into cron.job_run_details (jobid, runid, database, username, command, status) values ($1,$2,$3,$4,$5,$6)",3.3555900000000003,61,0.05500967213114756
"insert into cron.job_run_details (jobid, runid, database, username, command, status) values ($1,$2,$3,$4,$5,$6)",3.2945680000000004,60,0.054909466666666684
"create table statistics.temp_user_calls as SELECT
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname with no data",3.252195,1,3.252195
"create table statistics.temp_user_calls as SELECT
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname with no data",3.252195,1,3.252195
"create table statistics.temp_user_calls as SELECT
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname with no data",3.252195,1,3.252195
"create table statistics.temp_user_calls as SELECT
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname with no data",3.252195,1,3.252195
"create table statistics.temp_user_calls as SELECT
  rolname AS username,
  sum(calls) AS total_calls,
  round(sum(total_exec_time::numeric), $1) AS total_exec_time_ms
FROM pg_stat_statements s
JOIN pg_roles r ON s.userid = r.oid
GROUP BY rolname with no data",3.252195,1,3.252195
"insert into cron.job_run_details (jobid, runid, database, username, command, status) values ($1,$2,$3,$4,$5,$6)",3.2499640000000003,59,0.055084135593220354
create table temp_pg_stat_activity as select * from pg_stat_activity with no data,3.222822,1,3.222822
create table temp_pg_stat_activity as select * from pg_stat_activity with no data,3.222822,1,3.222822
create table temp_pg_stat_activity as select * from pg_stat_activity with no data,3.222822,1,3.222822
create table temp_pg_stat_activity as select * from pg_stat_activity with no data,3.222822,1,3.222822
create table temp_pg_stat_activity as select * from pg_stat_activity with no data,3.222822,1,3.222822
"create table statistics.temp_pg_wait_sampling_get_history as select now() as current_date,a.* from pg_wait_sampling_get_history() a with no data",3.212628,1,3.212628
"create table statistics.temp_pg_wait_sampling_get_history as select now() as current_date,a.* from pg_wait_sampling_get_history() a with no data",3.212628,1,3.212628
"create table statistics.temp_pg_wait_sampling_get_history as select now() as current_date,a.* from pg_wait_sampling_get_history() a with no data",3.212628,1,3.212628
"create table statistics.temp_pg_wait_sampling_get_history as select now() as current_date,a.* from pg_wait_sampling_get_history() a with no data",3.212628,1,3.212628
"create table statistics.temp_pg_wait_sampling_get_history as select now() as current_date,a.* from pg_wait_sampling_get_history() a with no data",3.212628,1,3.212628
"CREATE TABLE statistics.ash_wait_sampling_sample AS
SELECT now() as sample_time,a.* FROM pg_wait_sampling_current a WHERE $1",3.191363,1,3.191363
"CREATE TABLE statistics.ash_wait_sampling_sample AS
SELECT now() as sample_time,a.* FROM pg_wait_sampling_current a WHERE $1",3.191363,1,3.191363
"CREATE TABLE statistics.ash_wait_sampling_sample AS
SELECT now() as sample_time,a.* FROM pg_wait_sampling_current a WHERE $1",3.191363,1,3.191363
"CREATE TABLE statistics.ash_wait_sampling_sample AS
SELECT now() as sample_time,a.* FROM pg_wait_sampling_current a WHERE $1",3.191363,1,3.191363
"CREATE TABLE statistics.ash_wait_sampling_sample AS
SELECT now() as sample_time,a.* FROM pg_wait_sampling_current a WHERE $1",3.191363,1,3.191363
"insert into cron.job_run_details (jobid, runid, database, username, command, status) values ($1,$2,$3,$4,$5,$6)",3.172816,58,0.05470372413793105
truncate table statistics.temp_pg_stat_activity,3.141932,1,3.141932
truncate table statistics.temp_pg_stat_activity,3.141932,1,3.141932
truncate table statistics.temp_pg_stat_activity,3.141932,1,3.141932
truncate table statistics.temp_pg_stat_activity,3.141932,1,3.141932
truncate table statistics.temp_pg_stat_activity,3.141932,1,3.141932
"insert into cron.job_run_details (jobid, runid, database, username, command, status) values ($1,$2,$3,$4,$5,$6)",3.141207,57,0.05510889473684212
"CREATE OR REPLACE FUNCTION dump_activity_to_file(filepath TEXT)
RETURNS VOID AS $$
begin
COPY (SELECT pid, usename, state, query_start, query FROM pg_stat_activity ) TO '/tmp/it_employees.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",3.115458,1,3.115458
"CREATE OR REPLACE FUNCTION dump_activity_to_file(filepath TEXT)
RETURNS VOID AS $$
begin
COPY (SELECT pid, usename, state, query_start, query FROM pg_stat_activity ) TO '/tmp/it_employees.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",3.115458,1,3.115458
"CREATE OR REPLACE FUNCTION dump_activity_to_file(filepath TEXT)
RETURNS VOID AS $$
begin
COPY (SELECT pid, usename, state, query_start, query FROM pg_stat_activity ) TO '/tmp/it_employees.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",3.115458,1,3.115458
"CREATE OR REPLACE FUNCTION dump_activity_to_file(filepath TEXT)
RETURNS VOID AS $$
begin
COPY (SELECT pid, usename, state, query_start, query FROM pg_stat_activity ) TO '/tmp/it_employees.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",3.115458,1,3.115458
"CREATE OR REPLACE FUNCTION dump_activity_to_file(filepath TEXT)
RETURNS VOID AS $$
begin
COPY (SELECT pid, usename, state, query_start, query FROM pg_stat_activity ) TO '/tmp/it_employees.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",3.115458,1,3.115458
truncate table pgbench_branches,3.100182,1,3.100182
truncate table pgbench_branches,3.100182,1,3.100182
truncate table pgbench_branches,3.100182,1,3.100182
truncate table pgbench_branches,3.100182,1,3.100182
truncate table pgbench_branches,3.100182,1,3.100182
"CREATE TABLE statistics.ash_session_sample (
    sample_time       TIMESTAMP DEFAULT now(),
    pid               INT,
    usename           TEXT,
    application_name  TEXT,
    client_addr       INET,
    state             TEXT,
    wait_event_type   TEXT,
    wait_event        TEXT,
    backend_type      TEXT,
    query             TEXT,
    queryid           BIGINT
)",3.090475,1,3.090475
"CREATE TABLE statistics.ash_session_sample (
    sample_time       TIMESTAMP DEFAULT now(),
    pid               INT,
    usename           TEXT,
    application_name  TEXT,
    client_addr       INET,
    state             TEXT,
    wait_event_type   TEXT,
    wait_event        TEXT,
    backend_type      TEXT,
    query             TEXT,
    queryid           BIGINT
)",3.090475,1,3.090475
"CREATE TABLE statistics.ash_session_sample (
    sample_time       TIMESTAMP DEFAULT now(),
    pid               INT,
    usename           TEXT,
    application_name  TEXT,
    client_addr       INET,
    state             TEXT,
    wait_event_type   TEXT,
    wait_event        TEXT,
    backend_type      TEXT,
    query             TEXT,
    queryid           BIGINT
)",3.090475,1,3.090475
"CREATE TABLE statistics.ash_session_sample (
    sample_time       TIMESTAMP DEFAULT now(),
    pid               INT,
    usename           TEXT,
    application_name  TEXT,
    client_addr       INET,
    state             TEXT,
    wait_event_type   TEXT,
    wait_event        TEXT,
    backend_type      TEXT,
    query             TEXT,
    queryid           BIGINT
)",3.090475,1,3.090475
"CREATE TABLE statistics.ash_session_sample (
    sample_time       TIMESTAMP DEFAULT now(),
    pid               INT,
    usename           TEXT,
    application_name  TEXT,
    client_addr       INET,
    state             TEXT,
    wait_event_type   TEXT,
    wait_event        TEXT,
    backend_type      TEXT,
    query             TEXT,
    queryid           BIGINT
)",3.090475,1,3.090475
"create table statistics.temp_blocked_sessions as 
SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted
with no data",3.02804,1,3.02804
"create table statistics.temp_blocked_sessions as 
SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted
with no data",3.02804,1,3.02804
"create table statistics.temp_blocked_sessions as 
SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted
with no data",3.02804,1,3.02804
"create table statistics.temp_blocked_sessions as 
SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted
with no data",3.02804,1,3.02804
"create table statistics.temp_blocked_sessions as 
SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
       blocking.pid AS blocking_pid, blocking.query AS blocking_query
FROM pg_locks blocked_locks
JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
  AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
  AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
  AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
  AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
  AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
  AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
  AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
  AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
  AND blocked_locks.mode = blocking_locks.mode
  AND blocked.pid <> blocking_locks.pid
JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
WHERE NOT blocked_locks.granted
with no data",3.02804,1,3.02804
truncate table statistics.temp_database_connections,3.027044,1,3.027044
truncate table statistics.temp_database_connections,3.027044,1,3.027044
truncate table statistics.temp_database_connections,3.027044,1,3.027044
truncate table statistics.temp_database_connections,3.027044,1,3.027044
truncate table statistics.temp_database_connections,3.027044,1,3.027044
truncate table statistics.temp_blocked_sessions,3.024499,1,3.024499
truncate table statistics.temp_blocked_sessions,3.024499,1,3.024499
truncate table statistics.temp_blocked_sessions,3.024499,1,3.024499
truncate table statistics.temp_blocked_sessions,3.024499,1,3.024499
truncate table statistics.temp_blocked_sessions,3.024499,1,3.024499
create table statistics.temp_pg_wait_sampling_get_history as select * from pg_wait_sampling_get_history() with no data,2.896388,1,2.896388
create table statistics.temp_pg_wait_sampling_get_history as select * from pg_wait_sampling_get_history() with no data,2.896388,1,2.896388
create table statistics.temp_pg_wait_sampling_get_history as select * from pg_wait_sampling_get_history() with no data,2.896388,1,2.896388
create table statistics.temp_pg_wait_sampling_get_history as select * from pg_wait_sampling_get_history() with no data,2.896388,1,2.896388
create table statistics.temp_pg_wait_sampling_get_history as select * from pg_wait_sampling_get_history() with no data,2.896388,1,2.896388
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",2.788962,1,2.788962
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",2.788962,1,2.788962
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",2.788962,1,2.788962
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",2.788962,1,2.788962
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",2.788962,1,2.788962
truncate table statistics.temp_pg_wait_sampling_get_history,2.769998,1,2.769998
truncate table statistics.temp_pg_wait_sampling_get_history,2.769998,1,2.769998
truncate table statistics.temp_pg_wait_sampling_get_history,2.769998,1,2.769998
truncate table statistics.temp_pg_wait_sampling_get_history,2.769998,1,2.769998
truncate table statistics.temp_pg_wait_sampling_get_history,2.769998,1,2.769998
"create table statistics.temp_database_connections as SELECT datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database with no data",2.717797,1,2.717797
"create table statistics.temp_database_connections as SELECT datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database with no data",2.717797,1,2.717797
"create table statistics.temp_database_connections as SELECT datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database with no data",2.717797,1,2.717797
"create table statistics.temp_database_connections as SELECT datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database with no data",2.717797,1,2.717797
"create table statistics.temp_database_connections as SELECT datname, numbackends AS connections,
       pg_size_pretty(pg_database_size(datname)) AS db_size,
       xact_commit, xact_rollback, blks_read, blks_hit
FROM pg_stat_database with no data",2.717797,1,2.717797
"SELECT e.extname AS ""Name"", e.extversion AS ""Version"", n.nspname AS ""Schema"", c.description AS ""Description""
FROM pg_catalog.pg_extension e LEFT JOIN pg_catalog.pg_namespace n ON n.oid = e.extnamespace LEFT JOIN pg_catalog.pg_description c ON c.objoid = e.oid AND c.classoid = $1::pg_catalog.regclass
ORDER BY 1",2.623955,3,0.8746516666666666
"SELECT e.extname AS ""Name"", e.extversion AS ""Version"", n.nspname AS ""Schema"", c.description AS ""Description""
FROM pg_catalog.pg_extension e LEFT JOIN pg_catalog.pg_namespace n ON n.oid = e.extnamespace LEFT JOIN pg_catalog.pg_description c ON c.objoid = e.oid AND c.classoid = $1::pg_catalog.regclass
ORDER BY 1",2.623955,3,0.8746516666666666
"SELECT e.extname AS ""Name"", e.extversion AS ""Version"", n.nspname AS ""Schema"", c.description AS ""Description""
FROM pg_catalog.pg_extension e LEFT JOIN pg_catalog.pg_namespace n ON n.oid = e.extnamespace LEFT JOIN pg_catalog.pg_description c ON c.objoid = e.oid AND c.classoid = $1::pg_catalog.regclass
ORDER BY 1",2.623955,3,0.8746516666666666
"SELECT e.extname AS ""Name"", e.extversion AS ""Version"", n.nspname AS ""Schema"", c.description AS ""Description""
FROM pg_catalog.pg_extension e LEFT JOIN pg_catalog.pg_namespace n ON n.oid = e.extnamespace LEFT JOIN pg_catalog.pg_description c ON c.objoid = e.oid AND c.classoid = $1::pg_catalog.regclass
ORDER BY 1",2.623955,3,0.8746516666666666
"SELECT e.extname AS ""Name"", e.extversion AS ""Version"", n.nspname AS ""Schema"", c.description AS ""Description""
FROM pg_catalog.pg_extension e LEFT JOIN pg_catalog.pg_namespace n ON n.oid = e.extnamespace LEFT JOIN pg_catalog.pg_description c ON c.objoid = e.oid AND c.classoid = $1::pg_catalog.regclass
ORDER BY 1",2.623955,3,0.8746516666666666
truncate table pgbench_tellers,2.498155,1,2.498155
truncate table pgbench_tellers,2.498155,1,2.498155
truncate table pgbench_tellers,2.498155,1,2.498155
truncate table pgbench_tellers,2.498155,1,2.498155
truncate table pgbench_tellers,2.498155,1,2.498155
"drop table if exists pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers",2.420628,3,0.806876
"drop table if exists pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers",2.420628,3,0.806876
"drop table if exists pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers",2.420628,3,0.806876
"drop table if exists pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers",2.420628,3,0.806876
"drop table if exists pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers",2.420628,3,0.806876
truncate table statistics.temp_pg_wait_sampling_get_profile,2.40231,1,2.40231
truncate table statistics.temp_pg_wait_sampling_get_profile,2.40231,1,2.40231
truncate table statistics.temp_pg_wait_sampling_get_profile,2.40231,1,2.40231
truncate table statistics.temp_pg_wait_sampling_get_profile,2.40231,1,2.40231
truncate table statistics.temp_pg_wait_sampling_get_profile,2.40231,1,2.40231
"COPY (SELECT pid, usename, state, query_start, query FROM pg_stat_activity ) TO '/tmp/it_employees.csv' WITH CSV HEADER",2.294543,1,2.294543
"COPY (SELECT pid, usename, state, query_start, query FROM pg_stat_activity ) TO '/tmp/it_employees.csv' WITH CSV HEADER",2.294543,1,2.294543
"COPY (SELECT pid, usename, state, query_start, query FROM pg_stat_activity ) TO '/tmp/it_employees.csv' WITH CSV HEADER",2.294543,1,2.294543
"COPY (SELECT pid, usename, state, query_start, query FROM pg_stat_activity ) TO '/tmp/it_employees.csv' WITH CSV HEADER",2.294543,1,2.294543
"COPY (SELECT pid, usename, state, query_start, query FROM pg_stat_activity ) TO '/tmp/it_employees.csv' WITH CSV HEADER",2.294543,1,2.294543
"SELECT 
    n.nspname AS owner,
    c.relname AS table_name,
    t.relname AS toast_table,
    pg_relation_size(t.oid) / $1 / $2 / $3 AS gbytes
FROM 
    pg_class c
JOIN 
    pg_namespace n ON n.oid = c.relnamespace
JOIN 
    pg_class t ON c.reltoastrelid = t.oid
WHERE 
    n.nspname NOT IN ($4, $5, $6)
    AND c.relname NOT LIKE $7
ORDER BY 
    owner, table_name, toast_table",2.2010300000000003,7,0.3144328571428571
"SELECT 
    n.nspname AS owner,
    c.relname AS table_name,
    t.relname AS toast_table,
    pg_relation_size(t.oid) / $1 / $2 / $3 AS gbytes
FROM 
    pg_class c
JOIN 
    pg_namespace n ON n.oid = c.relnamespace
JOIN 
    pg_class t ON c.reltoastrelid = t.oid
WHERE 
    n.nspname NOT IN ($4, $5, $6)
    AND c.relname NOT LIKE $7
ORDER BY 
    owner, table_name, toast_table",2.2010300000000003,7,0.3144328571428571
"SELECT 
    n.nspname AS owner,
    c.relname AS table_name,
    t.relname AS toast_table,
    pg_relation_size(t.oid) / $1 / $2 / $3 AS gbytes
FROM 
    pg_class c
JOIN 
    pg_namespace n ON n.oid = c.relnamespace
JOIN 
    pg_class t ON c.reltoastrelid = t.oid
WHERE 
    n.nspname NOT IN ($4, $5, $6)
    AND c.relname NOT LIKE $7
ORDER BY 
    owner, table_name, toast_table",2.2010300000000003,7,0.3144328571428571
"SELECT 
    n.nspname AS owner,
    c.relname AS table_name,
    t.relname AS toast_table,
    pg_relation_size(t.oid) / $1 / $2 / $3 AS gbytes
FROM 
    pg_class c
JOIN 
    pg_namespace n ON n.oid = c.relnamespace
JOIN 
    pg_class t ON c.reltoastrelid = t.oid
WHERE 
    n.nspname NOT IN ($4, $5, $6)
    AND c.relname NOT LIKE $7
ORDER BY 
    owner, table_name, toast_table",2.2010300000000003,7,0.3144328571428571
"SELECT 
    n.nspname AS owner,
    c.relname AS table_name,
    t.relname AS toast_table,
    pg_relation_size(t.oid) / $1 / $2 / $3 AS gbytes
FROM 
    pg_class c
JOIN 
    pg_namespace n ON n.oid = c.relnamespace
JOIN 
    pg_class t ON c.reltoastrelid = t.oid
WHERE 
    n.nspname NOT IN ($4, $5, $6)
    AND c.relname NOT LIKE $7
ORDER BY 
    owner, table_name, toast_table",2.2010300000000003,7,0.3144328571428571
SELECT $1,1.9932849999999984,532,0.0037467763157894743
SELECT $1,1.9932849999999984,532,0.0037467763157894743
SELECT $1,1.9932849999999984,532,0.0037467763157894743
SELECT $1,1.9932849999999984,532,0.0037467763157894743
SELECT $1,1.9932849999999984,532,0.0037467763157894743
"update cron.job_run_details set job_pid = $1, status = $2 where runid = $3",1.962751,61,0.032176245901639346
select * from pg_stat_activity,1.9607569999999996,10,0.1960757
select * from pg_stat_activity,1.9607569999999996,10,0.1960757
select * from pg_stat_activity,1.9607569999999996,10,0.1960757
select * from pg_stat_activity,1.9607569999999996,10,0.1960757
select * from pg_stat_activity,1.9607569999999996,10,0.1960757
"update cron.job_run_details set job_pid = $1, status = $2 where runid = $3",1.9450999999999998,60,0.032418333333333334
"update cron.job_run_details set job_pid = $1, status = $2 where runid = $3",1.9236259999999998,59,0.032603830508474575
"update cron.job_run_details set job_pid = $1, status = $2 where runid = $3",1.903563,58,0.03282005172413793
"update cron.job_run_details set job_pid = $1, status = $2 where runid = $3",1.886091,57,0.03308931578947369
"SELECT pg_catalog.pg_get_viewdef($1::pg_catalog.oid, $2)",1.805732,3,0.6019106666666666
"SELECT pg_catalog.pg_get_viewdef($1::pg_catalog.oid, $2)",1.805732,3,0.6019106666666666
"SELECT pg_catalog.pg_get_viewdef($1::pg_catalog.oid, $2)",1.805732,3,0.6019106666666666
"SELECT pg_catalog.pg_get_viewdef($1::pg_catalog.oid, $2)",1.805732,3,0.6019106666666666
"SELECT pg_catalog.pg_get_viewdef($1::pg_catalog.oid, $2)",1.805732,3,0.6019106666666666
"SELECT $1 || TO_CHAR(CURRENT_TIMESTAMP, $2) AS ""Comment""",1.6988740000000002,8,0.21235925
"SELECT $1 || TO_CHAR(CURRENT_TIMESTAMP, $2) AS ""Comment""",1.6988740000000002,8,0.21235925
"SELECT $1 || TO_CHAR(CURRENT_TIMESTAMP, $2) AS ""Comment""",1.6988740000000002,8,0.21235925
"SELECT $1 || TO_CHAR(CURRENT_TIMESTAMP, $2) AS ""Comment""",1.6988740000000002,8,0.21235925
"SELECT $1 || TO_CHAR(CURRENT_TIMESTAMP, $2) AS ""Comment""",1.6988740000000002,8,0.21235925
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.629829,1,1.629829
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.629829,1,1.629829
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.629829,1,1.629829
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.629829,1,1.629829
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.629829,1,1.629829
drop table statistics.temp_pg_stat_activity,1.625355,3,0.5417850000000001
drop table statistics.temp_pg_stat_activity,1.625355,3,0.5417850000000001
drop table statistics.temp_pg_stat_activity,1.625355,3,0.5417850000000001
drop table statistics.temp_pg_stat_activity,1.625355,3,0.5417850000000001
drop table statistics.temp_pg_stat_activity,1.625355,3,0.5417850000000001
select * from pg_stat_statements,1.624687,5,0.3249374
select * from pg_stat_statements,1.624687,5,0.3249374
select * from pg_stat_statements,1.624687,5,0.3249374
select * from pg_stat_statements,1.624687,5,0.3249374
select * from pg_stat_statements,1.624687,5,0.3249374
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.563952,1,1.563952
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.563952,1,1.563952
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.563952,1,1.563952
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.563952,1,1.563952
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.563952,1,1.563952
"select o.n, p.partstrat, pg_catalog.count(i.inhparent) from pg_catalog.pg_class as c join pg_catalog.pg_namespace as n on (n.oid = c.relnamespace) cross join lateral (select pg_catalog.array_position(pg_catalog.current_schemas($1), n.nspname)) as o(n) left join pg_catalog.pg_partitioned_table as p on (p.partrelid = c.oid) left join pg_catalog.pg_inherits as i on (c.oid = i.inhparent) where c.relname = $2 and o.n is not null group by 1, 2 order by 1 asc limit $3",1.546415,7,0.22091642857142857
"select o.n, p.partstrat, pg_catalog.count(i.inhparent) from pg_catalog.pg_class as c join pg_catalog.pg_namespace as n on (n.oid = c.relnamespace) cross join lateral (select pg_catalog.array_position(pg_catalog.current_schemas($1), n.nspname)) as o(n) left join pg_catalog.pg_partitioned_table as p on (p.partrelid = c.oid) left join pg_catalog.pg_inherits as i on (c.oid = i.inhparent) where c.relname = $2 and o.n is not null group by 1, 2 order by 1 asc limit $3",1.546415,7,0.22091642857142857
"select o.n, p.partstrat, pg_catalog.count(i.inhparent) from pg_catalog.pg_class as c join pg_catalog.pg_namespace as n on (n.oid = c.relnamespace) cross join lateral (select pg_catalog.array_position(pg_catalog.current_schemas($1), n.nspname)) as o(n) left join pg_catalog.pg_partitioned_table as p on (p.partrelid = c.oid) left join pg_catalog.pg_inherits as i on (c.oid = i.inhparent) where c.relname = $2 and o.n is not null group by 1, 2 order by 1 asc limit $3",1.546415,7,0.22091642857142857
"select o.n, p.partstrat, pg_catalog.count(i.inhparent) from pg_catalog.pg_class as c join pg_catalog.pg_namespace as n on (n.oid = c.relnamespace) cross join lateral (select pg_catalog.array_position(pg_catalog.current_schemas($1), n.nspname)) as o(n) left join pg_catalog.pg_partitioned_table as p on (p.partrelid = c.oid) left join pg_catalog.pg_inherits as i on (c.oid = i.inhparent) where c.relname = $2 and o.n is not null group by 1, 2 order by 1 asc limit $3",1.546415,7,0.22091642857142857
"select o.n, p.partstrat, pg_catalog.count(i.inhparent) from pg_catalog.pg_class as c join pg_catalog.pg_namespace as n on (n.oid = c.relnamespace) cross join lateral (select pg_catalog.array_position(pg_catalog.current_schemas($1), n.nspname)) as o(n) left join pg_catalog.pg_partitioned_table as p on (p.partrelid = c.oid) left join pg_catalog.pg_inherits as i on (c.oid = i.inhparent) where c.relname = $2 and o.n is not null group by 1, 2 order by 1 asc limit $3",1.546415,7,0.22091642857142857
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.536675,1,1.536675
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.536675,1,1.536675
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.536675,1,1.536675
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.536675,1,1.536675
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.536675,1,1.536675
"update cron.job_run_details set status = $1, return_message = $2, end_time = $3 where runid = $4",1.534675,60,0.025577916666666676
"update cron.job_run_details set status = $1, return_message = $2, end_time = $3 where runid = $4",1.514934,59,0.025676847457627126
"update cron.job_run_details set status = $1, return_message = $2, end_time = $3 where runid = $4",1.497737,58,0.02582305172413794
"update cron.job_run_details set status = $1, return_message = $2, end_time = $3 where runid = $4",1.4807080000000001,57,0.025977333333333342
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
	log_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Switch Statistics (Redo Generation Monitoring)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Switch Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Control Checkpoint count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     switch_count), E'
')
           FROM (
             SELECT count(*) AS switch_count FROM pg_control_checkpoint()
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		



    -- Archive Statistics (if archiving is enabled)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Archiver Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Archived, Failed, Last Archived WAL, Last Archived WAL Time, Last Failed WAL, Last Failed WAL Time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s',
                     archived_count, failed_count, last_archived_wal, last_archived_time, last_failed_wal, last_failed_time, stats_reset), E'
')
           FROM (
             SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.476601,1,1.476601
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
	log_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Switch Statistics (Redo Generation Monitoring)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Switch Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Control Checkpoint count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     switch_count), E'
')
           FROM (
             SELECT count(*) AS switch_count FROM pg_control_checkpoint()
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		



    -- Archive Statistics (if archiving is enabled)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Archiver Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Archived, Failed, Last Archived WAL, Last Archived WAL Time, Last Failed WAL, Last Failed WAL Time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s',
                     archived_count, failed_count, last_archived_wal, last_archived_time, last_failed_wal, last_failed_time, stats_reset), E'
')
           FROM (
             SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.476601,1,1.476601
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
	log_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Switch Statistics (Redo Generation Monitoring)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Switch Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Control Checkpoint count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     switch_count), E'
')
           FROM (
             SELECT count(*) AS switch_count FROM pg_control_checkpoint()
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		



    -- Archive Statistics (if archiving is enabled)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Archiver Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Archived, Failed, Last Archived WAL, Last Archived WAL Time, Last Failed WAL, Last Failed WAL Time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s',
                     archived_count, failed_count, last_archived_wal, last_archived_time, last_failed_wal, last_failed_time, stats_reset), E'
')
           FROM (
             SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.476601,1,1.476601
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
	log_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Switch Statistics (Redo Generation Monitoring)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Switch Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Control Checkpoint count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     switch_count), E'
')
           FROM (
             SELECT count(*) AS switch_count FROM pg_control_checkpoint()
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		



    -- Archive Statistics (if archiving is enabled)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Archiver Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Archived, Failed, Last Archived WAL, Last Archived WAL Time, Last Failed WAL, Last Failed WAL Time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s',
                     archived_count, failed_count, last_archived_wal, last_archived_time, last_failed_wal, last_failed_time, stats_reset), E'
')
           FROM (
             SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.476601,1,1.476601
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
	log_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Switch Statistics (Redo Generation Monitoring)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Switch Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Control Checkpoint count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     switch_count), E'
')
           FROM (
             SELECT count(*) AS switch_count FROM pg_control_checkpoint()
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		



    -- Archive Statistics (if archiving is enabled)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Archiver Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Archived, Failed, Last Archived WAL, Last Archived WAL Time, Last Failed WAL, Last Failed WAL Time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s',
                     archived_count, failed_count, last_archived_wal, last_archived_time, last_failed_wal, last_failed_time, stats_reset), E'
')
           FROM (
             SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.476601,1,1.476601
"update cron.job_run_details set status = $1, return_message = $2, end_time = $3 where runid = $4",1.446206,55,0.026294654545454554
"SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, $1, $2),
  pg_catalog.pg_get_constraintdef(con.oid, $3), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ($4,$5,$6))
WHERE c.oid = $7 AND c.oid = i.indrelid AND i.indexrelid = c2.oid
ORDER BY i.indisprimary DESC, c2.relname",1.365823,1,1.365823
"SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, $1, $2),
  pg_catalog.pg_get_constraintdef(con.oid, $3), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ($4,$5,$6))
WHERE c.oid = $7 AND c.oid = i.indrelid AND i.indexrelid = c2.oid
ORDER BY i.indisprimary DESC, c2.relname",1.365823,1,1.365823
"SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, $1, $2),
  pg_catalog.pg_get_constraintdef(con.oid, $3), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ($4,$5,$6))
WHERE c.oid = $7 AND c.oid = i.indrelid AND i.indexrelid = c2.oid
ORDER BY i.indisprimary DESC, c2.relname",1.365823,1,1.365823
"SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, $1, $2),
  pg_catalog.pg_get_constraintdef(con.oid, $3), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ($4,$5,$6))
WHERE c.oid = $7 AND c.oid = i.indrelid AND i.indexrelid = c2.oid
ORDER BY i.indisprimary DESC, c2.relname",1.365823,1,1.365823
"SELECT c2.relname, i.indisprimary, i.indisunique, i.indisclustered, i.indisvalid, pg_catalog.pg_get_indexdef(i.indexrelid, $1, $2),
  pg_catalog.pg_get_constraintdef(con.oid, $3), contype, condeferrable, condeferred, i.indisreplident, c2.reltablespace
FROM pg_catalog.pg_class c, pg_catalog.pg_class c2, pg_catalog.pg_index i
  LEFT JOIN pg_catalog.pg_constraint con ON (conrelid = i.indrelid AND conindid = i.indexrelid AND contype IN ($4,$5,$6))
WHERE c.oid = $7 AND c.oid = i.indrelid AND i.indexrelid = c2.oid
ORDER BY i.indisprimary DESC, c2.relname",1.365823,1,1.365823
select * from pg_class,1.337357,1,1.337357
select * from pg_class,1.337357,1,1.337357
select * from pg_class,1.337357,1,1.337357
select * from pg_class,1.337357,1,1.337357
select * from pg_class,1.337357,1,1.337357
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, query_id
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	  
END;
$$ LANGUAGE plpgsql",1.336469,2,0.6682345
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, query_id
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	  
END;
$$ LANGUAGE plpgsql",1.336469,2,0.6682345
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, query_id
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	  
END;
$$ LANGUAGE plpgsql",1.336469,2,0.6682345
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, query_id
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	  
END;
$$ LANGUAGE plpgsql",1.336469,2,0.6682345
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, query_id
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	  
END;
$$ LANGUAGE plpgsql",1.336469,2,0.6682345
update cron.job_run_details set status = $1 where runid = $2,1.2963269999999996,61,0.021251262295081976
DO $$ begin raise notice 'SCRIPT: ORA_A01_software_installed'; end; $$,1.291497,2,0.6457485
DO $$ begin raise notice 'SCRIPT: ORA_A01_software_installed'; end; $$,1.291497,2,0.6457485
DO $$ begin raise notice 'SCRIPT: ORA_A01_software_installed'; end; $$,1.291497,2,0.6457485
DO $$ begin raise notice 'SCRIPT: ORA_A01_software_installed'; end; $$,1.291497,2,0.6457485
DO $$ begin raise notice 'SCRIPT: ORA_A01_software_installed'; end; $$,1.291497,2,0.6457485
update cron.job_run_details set status = $1 where runid = $2,1.2794399999999995,60,0.02132400000000001
select * from statistics.query_details,1.2646400000000002,13,0.09728000000000002
select * from statistics.query_details,1.2646400000000002,13,0.09728000000000002
select * from statistics.query_details,1.2646400000000002,13,0.09728000000000002
select * from statistics.query_details,1.2646400000000002,13,0.09728000000000002
select * from statistics.query_details,1.2646400000000002,13,0.09728000000000002
update cron.job_run_details set status = $1 where runid = $2,1.2594339999999995,59,0.021346338983050855
update cron.job_run_details set status = $1 where runid = $2,1.2413019999999995,58,0.021401758620689663
"SELECT
    t.tablename AS table_name,
    $1 AS compression 
FROM
    pg_tables t
JOIN
    pg_class c ON t.tablename = c.relname
WHERE
    c.reltoastrelid <> $2 
    AND t.schemaname = $3",1.225554,8,0.15319425
"SELECT
    t.tablename AS table_name,
    $1 AS compression 
FROM
    pg_tables t
JOIN
    pg_class c ON t.tablename = c.relname
WHERE
    c.reltoastrelid <> $2 
    AND t.schemaname = $3",1.225554,8,0.15319425
"SELECT
    t.tablename AS table_name,
    $1 AS compression 
FROM
    pg_tables t
JOIN
    pg_class c ON t.tablename = c.relname
WHERE
    c.reltoastrelid <> $2 
    AND t.schemaname = $3",1.225554,8,0.15319425
"SELECT
    t.tablename AS table_name,
    $1 AS compression 
FROM
    pg_tables t
JOIN
    pg_class c ON t.tablename = c.relname
WHERE
    c.reltoastrelid <> $2 
    AND t.schemaname = $3",1.225554,8,0.15319425
"SELECT
    t.tablename AS table_name,
    $1 AS compression 
FROM
    pg_tables t
JOIN
    pg_class c ON t.tablename = c.relname
WHERE
    c.reltoastrelid <> $2 
    AND t.schemaname = $3",1.225554,8,0.15319425
update cron.job_run_details set status = $1 where runid = $2,1.2162609999999994,57,0.02133791228070176
"update cron.job_run_details set status = $1, start_time = $2 where runid = $3",1.1938069999999996,61,0.019570606557377048
"update cron.job_run_details set status = $1, start_time = $2 where runid = $3",1.1775829999999996,60,0.019626383333333334
"update cron.job_run_details set status = $1, start_time = $2 where runid = $3",1.1619619999999995,59,0.019694271186440678
"update cron.job_run_details set status = $1, start_time = $2 where runid = $3",1.1481639999999995,58,0.01979593103448276
"update cron.job_run_details set status = $1, start_time = $2 where runid = $3",1.1335779999999995,57,0.019887333333333333
"SELECT 
  relname AS table_name,
  n_dead_tup AS dead_tuples,
  n_live_tup AS live_tuples
FROM pg_stat_user_tables
ORDER BY n_dead_tup DESC
LIMIT $1",1.070392,8,0.13379899999999997
"SELECT 
  relname AS table_name,
  n_dead_tup AS dead_tuples,
  n_live_tup AS live_tuples
FROM pg_stat_user_tables
ORDER BY n_dead_tup DESC
LIMIT $1",1.070392,8,0.13379899999999997
"SELECT 
  relname AS table_name,
  n_dead_tup AS dead_tuples,
  n_live_tup AS live_tuples
FROM pg_stat_user_tables
ORDER BY n_dead_tup DESC
LIMIT $1",1.070392,8,0.13379899999999997
"SELECT 
  relname AS table_name,
  n_dead_tup AS dead_tuples,
  n_live_tup AS live_tuples
FROM pg_stat_user_tables
ORDER BY n_dead_tup DESC
LIMIT $1",1.070392,8,0.13379899999999997
"SELECT 
  relname AS table_name,
  n_dead_tup AS dead_tuples,
  n_live_tup AS live_tuples
FROM pg_stat_user_tables
ORDER BY n_dead_tup DESC
LIMIT $1",1.070392,8,0.13379899999999997
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    rec record;
	output_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Active Connections by State
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nActive Connections by State:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('State: %s, Count: %s\n', rec.state, rec.connection_count), true);
    END LOOP;

    -- Number of connected users
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nNumber of connected users:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s\n', rec.usename), true);
    END LOOP;

    -- Long Running Queries (> 5 mins)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nLong Running Queries (> 5 mins):\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, User: %s, DB: %s, Duration: %s, Query: %s\n', rec.pid, rec.usename, rec.datname, rec.duration, rec.query_snippet), true);
    END LOOP;

    -- Processes with Wait Events
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nProcesses with Wait Events:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s, DB: %s, Event Type: %s, Event: %s\n', rec.usename, rec.datname, rec.wait_event_type, rec.wait_event), true);
    END LOOP;

    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Total Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(mean_exec_time::numeric, 2) AS avg_time_ms,
               rows, LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY total_exec_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time (ms): %s, Rows: %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_ms, rec.rows, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Execution Count
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Execution Count:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(total_exec_time::numeric / calls, 2) AS avg_time_per_call_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY calls DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time per Call (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_per_call_ms, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Average Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Average Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Avg Time (ms): %s, Total Time (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.avg_time_ms, rec.total_exec_time_ms, rec.query_snippet), true);
    END LOOP;

END;
$$ LANGUAGE plpgsql",1.05555,2,0.527775
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    rec record;
	output_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Active Connections by State
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nActive Connections by State:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('State: %s, Count: %s\n', rec.state, rec.connection_count), true);
    END LOOP;

    -- Number of connected users
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nNumber of connected users:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s\n', rec.usename), true);
    END LOOP;

    -- Long Running Queries (> 5 mins)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nLong Running Queries (> 5 mins):\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, User: %s, DB: %s, Duration: %s, Query: %s\n', rec.pid, rec.usename, rec.datname, rec.duration, rec.query_snippet), true);
    END LOOP;

    -- Processes with Wait Events
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nProcesses with Wait Events:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s, DB: %s, Event Type: %s, Event: %s\n', rec.usename, rec.datname, rec.wait_event_type, rec.wait_event), true);
    END LOOP;

    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Total Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(mean_exec_time::numeric, 2) AS avg_time_ms,
               rows, LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY total_exec_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time (ms): %s, Rows: %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_ms, rec.rows, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Execution Count
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Execution Count:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(total_exec_time::numeric / calls, 2) AS avg_time_per_call_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY calls DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time per Call (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_per_call_ms, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Average Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Average Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Avg Time (ms): %s, Total Time (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.avg_time_ms, rec.total_exec_time_ms, rec.query_snippet), true);
    END LOOP;

END;
$$ LANGUAGE plpgsql",1.05555,2,0.527775
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    rec record;
	output_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Active Connections by State
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nActive Connections by State:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('State: %s, Count: %s\n', rec.state, rec.connection_count), true);
    END LOOP;

    -- Number of connected users
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nNumber of connected users:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s\n', rec.usename), true);
    END LOOP;

    -- Long Running Queries (> 5 mins)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nLong Running Queries (> 5 mins):\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, User: %s, DB: %s, Duration: %s, Query: %s\n', rec.pid, rec.usename, rec.datname, rec.duration, rec.query_snippet), true);
    END LOOP;

    -- Processes with Wait Events
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nProcesses with Wait Events:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s, DB: %s, Event Type: %s, Event: %s\n', rec.usename, rec.datname, rec.wait_event_type, rec.wait_event), true);
    END LOOP;

    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Total Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(mean_exec_time::numeric, 2) AS avg_time_ms,
               rows, LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY total_exec_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time (ms): %s, Rows: %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_ms, rec.rows, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Execution Count
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Execution Count:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(total_exec_time::numeric / calls, 2) AS avg_time_per_call_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY calls DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time per Call (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_per_call_ms, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Average Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Average Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Avg Time (ms): %s, Total Time (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.avg_time_ms, rec.total_exec_time_ms, rec.query_snippet), true);
    END LOOP;

END;
$$ LANGUAGE plpgsql",1.05555,2,0.527775
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    rec record;
	output_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Active Connections by State
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nActive Connections by State:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('State: %s, Count: %s\n', rec.state, rec.connection_count), true);
    END LOOP;

    -- Number of connected users
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nNumber of connected users:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s\n', rec.usename), true);
    END LOOP;

    -- Long Running Queries (> 5 mins)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nLong Running Queries (> 5 mins):\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, User: %s, DB: %s, Duration: %s, Query: %s\n', rec.pid, rec.usename, rec.datname, rec.duration, rec.query_snippet), true);
    END LOOP;

    -- Processes with Wait Events
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nProcesses with Wait Events:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s, DB: %s, Event Type: %s, Event: %s\n', rec.usename, rec.datname, rec.wait_event_type, rec.wait_event), true);
    END LOOP;

    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Total Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(mean_exec_time::numeric, 2) AS avg_time_ms,
               rows, LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY total_exec_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time (ms): %s, Rows: %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_ms, rec.rows, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Execution Count
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Execution Count:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(total_exec_time::numeric / calls, 2) AS avg_time_per_call_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY calls DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time per Call (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_per_call_ms, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Average Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Average Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Avg Time (ms): %s, Total Time (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.avg_time_ms, rec.total_exec_time_ms, rec.query_snippet), true);
    END LOOP;

END;
$$ LANGUAGE plpgsql",1.05555,2,0.527775
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    rec record;
	output_file TEXT := '/home/postgres/app/log/db_snapshot_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Active Connections by State
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nActive Connections by State:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('State: %s, Count: %s\n', rec.state, rec.connection_count), true);
    END LOOP;

    -- Number of connected users
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nNumber of connected users:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s\n', rec.usename), true);
    END LOOP;

    -- Long Running Queries (> 5 mins)
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nLong Running Queries (> 5 mins):\n----------------------------------------\n', true);
    FOR rec IN
        SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('PID: %s, User: %s, DB: %s, Duration: %s, Query: %s\n', rec.pid, rec.usename, rec.datname, rec.duration, rec.query_snippet), true);
    END LOOP;

    -- Processes with Wait Events
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nProcesses with Wait Events:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('User: %s, DB: %s, Event Type: %s, Event: %s\n', rec.usename, rec.datname, rec.wait_event_type, rec.wait_event), true);
    END LOOP;

    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Total Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(mean_exec_time::numeric, 2) AS avg_time_ms,
               rows, LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY total_exec_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time (ms): %s, Rows: %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_ms, rec.rows, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Execution Count
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Execution Count:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               round(total_exec_time::numeric / calls, 2) AS avg_time_per_call_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY calls DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Total Time (ms): %s, Avg Time per Call (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.total_exec_time_ms, rec.avg_time_per_call_ms, rec.query_snippet), true);
    END LOOP;

    -- Top 10 Queries by Average Execution Time
    PERFORM pg_catalog.pg_file_write(output_file, E'\n----------------------------------------\nTop 10 Queries by Average Execution Time:\n----------------------------------------\n', true);
    FOR rec IN
        SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
    LOOP
        PERFORM pg_catalog.pg_file_write(output_file, format('QueryID: %s, Calls: %s, Avg Time (ms): %s, Total Time (ms): %s, Query: %s\n', rec.queryid, rec.calls, rec.avg_time_ms, rec.total_exec_time_ms, rec.query_snippet), true);
    END LOOP;

END;
$$ LANGUAGE plpgsql",1.05555,2,0.527775
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Switch Statistics (Redo Generation Monitoring)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Switch Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Control Checkpoint count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     switch_count), E'
')
           FROM (
             SELECT count(*) AS switch_count FROM pg_control_checkpoint()
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		



    -- Archive Statistics (if archiving is enabled)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Archiver Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Archived, Failed, Last Archived WAL, Last Archived WAL Time, Last Failed WAL, Last Failed WAL Time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s',
                     archived_count, failed_count, last_archived_wal, last_archived_time, last_failed_wal, last_failed_time, stats_reset), E'
')
           FROM (
             SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.022953,1,1.022953
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Switch Statistics (Redo Generation Monitoring)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Switch Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Control Checkpoint count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     switch_count), E'
')
           FROM (
             SELECT count(*) AS switch_count FROM pg_control_checkpoint()
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		



    -- Archive Statistics (if archiving is enabled)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Archiver Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Archived, Failed, Last Archived WAL, Last Archived WAL Time, Last Failed WAL, Last Failed WAL Time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s',
                     archived_count, failed_count, last_archived_wal, last_archived_time, last_failed_wal, last_failed_time, stats_reset), E'
')
           FROM (
             SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.022953,1,1.022953
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Switch Statistics (Redo Generation Monitoring)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Switch Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Control Checkpoint count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     switch_count), E'
')
           FROM (
             SELECT count(*) AS switch_count FROM pg_control_checkpoint()
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		



    -- Archive Statistics (if archiving is enabled)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Archiver Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Archived, Failed, Last Archived WAL, Last Archived WAL Time, Last Failed WAL, Last Failed WAL Time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s',
                     archived_count, failed_count, last_archived_wal, last_archived_time, last_failed_wal, last_failed_time, stats_reset), E'
')
           FROM (
             SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.022953,1,1.022953
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Switch Statistics (Redo Generation Monitoring)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Switch Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Control Checkpoint count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     switch_count), E'
')
           FROM (
             SELECT count(*) AS switch_count FROM pg_control_checkpoint()
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		



    -- Archive Statistics (if archiving is enabled)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Archiver Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Archived, Failed, Last Archived WAL, Last Archived WAL Time, Last Failed WAL, Last Failed WAL Time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s',
                     archived_count, failed_count, last_archived_wal, last_archived_time, last_failed_wal, last_failed_time, stats_reset), E'
')
           FROM (
             SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.022953,1,1.022953
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


    -- Buffer Cache Usage by Schema
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Schema
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Schema, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     schema_name,buffers,size_mb), E'
')
           FROM (
             SELECT 
        n.nspname AS schema_name,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    JOIN pg_namespace n ON c.relnamespace = n.oid
    GROUP BY n.nspname
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Statistics
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'WAL Records, WAL FPIs, WAL Bytes, WAL Write, WAL sync, WAL write time, WAL sync time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s,%s',
                     wal_records,wal_fpi,wal_bytes,wal_write,wal_sync,wal_write_time,wal_sync_time,stats_reset), E'
')
           FROM (
             SELECT 
        wal_records, wal_fpi, wal_bytes, wal_write, wal_sync, wal_write_time, wal_sync_time, stats_reset
    FROM pg_stat_wal
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- WAL Switch Statistics (Redo Generation Monitoring)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Switch Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Control Checkpoint count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     switch_count), E'
')
           FROM (
             SELECT count(*) AS switch_count FROM pg_control_checkpoint()
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		



    -- Archive Statistics (if archiving is enabled)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- WAL Archiver Statistics
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Archived, Failed, Last Archived WAL, Last Archived WAL Time, Last Failed WAL, Last Failed WAL Time, Stats Reset
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,%s',
                     archived_count, failed_count, last_archived_wal, last_archived_time, last_failed_wal, last_failed_time, stats_reset), E'
')
           FROM (
             SELECT archived_count, failed_count, last_archived_wal, last_failed_wal, last_archived_time, last_failed_time, stats_reset
    FROM pg_stat_archiver
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	



END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.022953,1,1.022953
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.011869,1,1.011869
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.011869,1,1.011869
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.011869,1,1.011869
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.011869,1,1.011869
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Average Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Buffer Cache Usage by Relation
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Buffer Cache Usage by Relation
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'Relation, Buffers, Size (MB)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s',
                     relation,buffers,size_mb), E'
')
           FROM (
             SELECT 
        c.oid::regclass AS relation,
        count(*) AS buffers,
        round(count(*) * current_setting('block_size')::int / 1024 / 1024, 2) AS size_mb
    FROM pg_buffercache b
    JOIN pg_class c ON b.relfilenode = pg_relation_filenode(c.oid)
        AND b.reldatabase IN (0, (SELECT oid FROM pg_database WHERE datname = current_database()))
    GROUP BY c.oid
    ORDER BY buffers DESC
    LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);		
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",1.011869,1,1.011869
"truncate table pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers",1.0097939999999999,3,0.336598
"truncate table pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers",1.0097939999999999,3,0.336598
"truncate table pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers",1.0097939999999999,3,0.336598
"truncate table pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers",1.0097939999999999,3,0.336598
"truncate table pgbench_accounts, pgbench_branches, pgbench_history, pgbench_tellers",1.0097939999999999,3,0.336598
select * from pg_class where relname like $1,1.00166,1,1.00166
select * from pg_class where relname like $1,1.00166,1,1.00166
select * from pg_class where relname like $1,1.00166,1,1.00166
select * from pg_class where relname like $1,1.00166,1,1.00166
select * from pg_class where relname like $1,1.00166,1,1.00166
"select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.987242,1,0.987242
"select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.987242,1,0.987242
"select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.987242,1,0.987242
"select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.987242,1,0.987242
"select psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.987242,1,0.987242
select * from statistics.ash_stat_statements_sample,0.983587,1,0.983587
select * from statistics.ash_stat_statements_sample,0.983587,1,0.983587
select * from statistics.ash_stat_statements_sample,0.983587,1,0.983587
select * from statistics.ash_stat_statements_sample,0.983587,1,0.983587
select * from statistics.ash_stat_statements_sample,0.983587,1,0.983587
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.972323,1,0.972323
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.972323,1,0.972323
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.972323,1,0.972323
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.972323,1,0.972323
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.972323,1,0.972323
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated,
  a.attstorage,
  pg_catalog.col_description(a.attrelid, a.attnum)
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $2 AND a.attnum > $3 AND NOT a.attisdropped
ORDER BY a.attnum",0.968855,3,0.32295166666666664
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated,
  a.attstorage,
  pg_catalog.col_description(a.attrelid, a.attnum)
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $2 AND a.attnum > $3 AND NOT a.attisdropped
ORDER BY a.attnum",0.968855,3,0.32295166666666664
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated,
  a.attstorage,
  pg_catalog.col_description(a.attrelid, a.attnum)
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $2 AND a.attnum > $3 AND NOT a.attisdropped
ORDER BY a.attnum",0.968855,3,0.32295166666666664
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated,
  a.attstorage,
  pg_catalog.col_description(a.attrelid, a.attnum)
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $2 AND a.attnum > $3 AND NOT a.attisdropped
ORDER BY a.attnum",0.968855,3,0.32295166666666664
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated,
  a.attstorage,
  pg_catalog.col_description(a.attrelid, a.attnum)
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $2 AND a.attnum > $3 AND NOT a.attisdropped
ORDER BY a.attnum",0.968855,3,0.32295166666666664
drop table statistics.temp_pg_stat_statements,0.8788,2,0.4394
drop table statistics.temp_pg_stat_statements,0.8788,2,0.4394
drop table statistics.temp_pg_stat_statements,0.8788,2,0.4394
drop table statistics.temp_pg_stat_statements,0.8788,2,0.4394
drop table statistics.temp_pg_stat_statements,0.8788,2,0.4394
vacuum pgbench_branches,0.8499640000000002,7,0.12142342857142857
vacuum pgbench_branches,0.8499640000000002,7,0.12142342857142857
vacuum pgbench_branches,0.8499640000000002,7,0.12142342857142857
vacuum pgbench_branches,0.8499640000000002,7,0.12142342857142857
vacuum pgbench_branches,0.8499640000000002,7,0.12142342857142857
"create table pgbench_tellers(tid int not null,bid int,tbalance int,filler char(84)) with (fillfactor=100)",0.843671,3,0.28122366666666665
"create table pgbench_tellers(tid int not null,bid int,tbalance int,filler char(84)) with (fillfactor=100)",0.843671,3,0.28122366666666665
"create table pgbench_tellers(tid int not null,bid int,tbalance int,filler char(84)) with (fillfactor=100)",0.843671,3,0.28122366666666665
"create table pgbench_tellers(tid int not null,bid int,tbalance int,filler char(84)) with (fillfactor=100)",0.843671,3,0.28122366666666665
"create table pgbench_tellers(tid int not null,bid int,tbalance int,filler char(84)) with (fillfactor=100)",0.843671,3,0.28122366666666665
select relname from pg_class where relname like $1,0.798621,2,0.3993105
select relname from pg_class where relname like $1,0.798621,2,0.3993105
select relname from pg_class where relname like $1,0.798621,2,0.3993105
select relname from pg_class where relname like $1,0.798621,2,0.3993105
select relname from pg_class where relname like $1,0.798621,2,0.3993105
"SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, $1 AS relhasoids, c.relispartition, $2, c.reltablespace, CASE WHEN c.reloftype = $3 THEN $4 ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
FROM pg_catalog.pg_class c
 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
WHERE c.oid = $5",0.7921009999999999,7,0.11315728571428571
"SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, $1 AS relhasoids, c.relispartition, $2, c.reltablespace, CASE WHEN c.reloftype = $3 THEN $4 ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
FROM pg_catalog.pg_class c
 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
WHERE c.oid = $5",0.7921009999999999,7,0.11315728571428571
"SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, $1 AS relhasoids, c.relispartition, $2, c.reltablespace, CASE WHEN c.reloftype = $3 THEN $4 ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
FROM pg_catalog.pg_class c
 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
WHERE c.oid = $5",0.7921009999999999,7,0.11315728571428571
"SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, $1 AS relhasoids, c.relispartition, $2, c.reltablespace, CASE WHEN c.reloftype = $3 THEN $4 ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
FROM pg_catalog.pg_class c
 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
WHERE c.oid = $5",0.7921009999999999,7,0.11315728571428571
"SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, $1 AS relhasoids, c.relispartition, $2, c.reltablespace, CASE WHEN c.reloftype = $3 THEN $4 ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
FROM pg_catalog.pg_class c
 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
WHERE c.oid = $5",0.7921009999999999,7,0.11315728571428571
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.785974,1,0.785974
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.785974,1,0.785974
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.785974,1,0.785974
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.785974,1,0.785974
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.785974,1,0.785974
select * FROM cron.job,0.777774,1,0.777774
select * FROM cron.job,0.777774,1,0.777774
select * FROM cron.job,0.777774,1,0.777774
select * FROM cron.job,0.777774,1,0.777774
select * FROM cron.job,0.777774,1,0.777774
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.755576,1,0.755576
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.755576,1,0.755576
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.755576,1,0.755576
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.755576,1,0.755576
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);





    -- Top 10 Queries by Average Execution Time
		
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,AvgTime_ms,TotalTime_ms,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(avg_time_ms, 'FM999999999.00'), to_char(total_exec_time_ms, 'FM999999999.00'),
                     replace(LEFT(query_snippet, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, round(mean_exec_time::numeric, 2) AS avg_time_ms,
               round(total_exec_time::numeric, 2) AS total_exec_time_ms,
               LEFT(query, 100) AS query_snippet
        FROM pg_stat_statements
        ORDER BY avg_time_ms DESC
        LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	

    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	



    -- Processes with Wait Events
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Processes with Wait Events
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'usename, DBname, query, wait_event_type, wait_event
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s',
                     usename,datname,query,wait_event_type,wait_event), E'
')
           FROM (
             SELECT usename, datname, query, wait_event_type, wait_event
        FROM pg_stat_activity
        WHERE state != 'idle' AND wait_event IS NOT NULL
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.755576,1,0.755576
"/*
column db_link	format a60
column host	format a200
column DB_LINK  format a40

prompt SCRIPT: ORA_U02_database_links

prompt CHECK: if integration is using database links

SELECT  *
FROM    dba_db_links;




################################################################################
################################################################################
*/
-- File :        U02_database_links.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script will list any database links being used.
--
-- Author :      Jerry Alderson
--
-- Date :        30th January 2002
--
-- Script: U02_database_links
-- Check if integration is using database links
-- PostgreSQL uses the dblink extension for cross-database connections.
-- List all dblink connections used in the database.
SELECT *
FROM
    pg_catalog.pg_extension
WHERE
    extname = $1",0.746396,8,0.09329950000000001
"/*
column db_link	format a60
column host	format a200
column DB_LINK  format a40

prompt SCRIPT: ORA_U02_database_links

prompt CHECK: if integration is using database links

SELECT  *
FROM    dba_db_links;




################################################################################
################################################################################
*/
-- File :        U02_database_links.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script will list any database links being used.
--
-- Author :      Jerry Alderson
--
-- Date :        30th January 2002
--
-- Script: U02_database_links
-- Check if integration is using database links
-- PostgreSQL uses the dblink extension for cross-database connections.
-- List all dblink connections used in the database.
SELECT *
FROM
    pg_catalog.pg_extension
WHERE
    extname = $1",0.746396,8,0.09329950000000001
"/*
column db_link	format a60
column host	format a200
column DB_LINK  format a40

prompt SCRIPT: ORA_U02_database_links

prompt CHECK: if integration is using database links

SELECT  *
FROM    dba_db_links;




################################################################################
################################################################################
*/
-- File :        U02_database_links.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script will list any database links being used.
--
-- Author :      Jerry Alderson
--
-- Date :        30th January 2002
--
-- Script: U02_database_links
-- Check if integration is using database links
-- PostgreSQL uses the dblink extension for cross-database connections.
-- List all dblink connections used in the database.
SELECT *
FROM
    pg_catalog.pg_extension
WHERE
    extname = $1",0.746396,8,0.09329950000000001
"/*
column db_link	format a60
column host	format a200
column DB_LINK  format a40

prompt SCRIPT: ORA_U02_database_links

prompt CHECK: if integration is using database links

SELECT  *
FROM    dba_db_links;




################################################################################
################################################################################
*/
-- File :        U02_database_links.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script will list any database links being used.
--
-- Author :      Jerry Alderson
--
-- Date :        30th January 2002
--
-- Script: U02_database_links
-- Check if integration is using database links
-- PostgreSQL uses the dblink extension for cross-database connections.
-- List all dblink connections used in the database.
SELECT *
FROM
    pg_catalog.pg_extension
WHERE
    extname = $1",0.746396,8,0.09329950000000001
"/*
column db_link	format a60
column host	format a200
column DB_LINK  format a40

prompt SCRIPT: ORA_U02_database_links

prompt CHECK: if integration is using database links

SELECT  *
FROM    dba_db_links;




################################################################################
################################################################################
*/
-- File :        U02_database_links.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script will list any database links being used.
--
-- Author :      Jerry Alderson
--
-- Date :        30th January 2002
--
-- Script: U02_database_links
-- Check if integration is using database links
-- PostgreSQL uses the dblink extension for cross-database connections.
-- List all dblink connections used in the database.
SELECT *
FROM
    pg_catalog.pg_extension
WHERE
    extname = $1",0.746396,8,0.09329950000000001
SELECT count(*) AS switch_count FROM pg_control_checkpoint(),0.733425,1,0.733425
SELECT count(*) AS switch_count FROM pg_control_checkpoint(),0.733425,1,0.733425
SELECT count(*) AS switch_count FROM pg_control_checkpoint(),0.733425,1,0.733425
SELECT count(*) AS switch_count FROM pg_control_checkpoint(),0.733425,1,0.733425
SELECT count(*) AS switch_count FROM pg_control_checkpoint(),0.733425,1,0.733425
"SELECT jobid, schedule, command FROM cron.job",0.6722370000000001,9,0.074693
"SELECT jobid, schedule, command FROM cron.job",0.6722370000000001,9,0.074693
"SELECT jobid, schedule, command FROM cron.job",0.6722370000000001,9,0.074693
"SELECT jobid, schedule, command FROM cron.job",0.6722370000000001,9,0.074693
"SELECT jobid, schedule, command FROM cron.job",0.6722370000000001,9,0.074693
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT := to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
	filepath TEXT := '/home/postgres/app/log';
begin
COPY (SELECT wait_event, COUNT(*) AS samples
FROM ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.67043,1,0.67043
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT := to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
	filepath TEXT := '/home/postgres/app/log';
begin
COPY (SELECT wait_event, COUNT(*) AS samples
FROM ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.67043,1,0.67043
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT := to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
	filepath TEXT := '/home/postgres/app/log';
begin
COPY (SELECT wait_event, COUNT(*) AS samples
FROM ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.67043,1,0.67043
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT := to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
	filepath TEXT := '/home/postgres/app/log';
begin
COPY (SELECT wait_event, COUNT(*) AS samples
FROM ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.67043,1,0.67043
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT := to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
	filepath TEXT := '/home/postgres/app/log';
begin
COPY (SELECT wait_event, COUNT(*) AS samples
FROM ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.67043,1,0.67043
vacuum analyze pgbench_history,0.632108,3,0.21070266666666665
vacuum analyze pgbench_history,0.632108,3,0.21070266666666665
vacuum analyze pgbench_history,0.632108,3,0.21070266666666665
vacuum analyze pgbench_history,0.632108,3,0.21070266666666665
vacuum analyze pgbench_history,0.632108,3,0.21070266666666665
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.622786,1,0.622786
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.622786,1,0.622786
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.622786,1,0.622786
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.622786,1,0.622786
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     datname,connections,db_size,xact_commit,xact_rollback,blks_read,blks_hit), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.622786,1,0.622786
"SELECT f.relname AS temp_file,
       pg_size_pretty(pg_total_relation_size(f.oid)) AS size
FROM pg_class f
WHERE f.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1)
ORDER BY f.relname",0.619746,8,0.07746825
"SELECT f.relname AS temp_file,
       pg_size_pretty(pg_total_relation_size(f.oid)) AS size
FROM pg_class f
WHERE f.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1)
ORDER BY f.relname",0.619746,8,0.07746825
"SELECT f.relname AS temp_file,
       pg_size_pretty(pg_total_relation_size(f.oid)) AS size
FROM pg_class f
WHERE f.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1)
ORDER BY f.relname",0.619746,8,0.07746825
"SELECT f.relname AS temp_file,
       pg_size_pretty(pg_total_relation_size(f.oid)) AS size
FROM pg_class f
WHERE f.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1)
ORDER BY f.relname",0.619746,8,0.07746825
"SELECT f.relname AS temp_file,
       pg_size_pretty(pg_total_relation_size(f.oid)) AS size
FROM pg_class f
WHERE f.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1)
ORDER BY f.relname",0.619746,8,0.07746825
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %filename WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %filename WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.6094999999999999,2,0.30474999999999997
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %filename WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %filename WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.6094999999999999,2,0.30474999999999997
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %filename WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %filename WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.6094999999999999,2,0.30474999999999997
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %filename WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %filename WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.6094999999999999,2,0.30474999999999997
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %filename WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %filename WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.6094999999999999,2,0.30474999999999997
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     usename), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.607973,1,0.607973
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     usename), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.607973,1,0.607973
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     usename), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.607973,1,0.607973
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     usename), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.607973,1,0.607973
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top 10 Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
		LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
			 LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);



    -- Blocking and Blocked Queries
	
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Blocking and Blocked Queries
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'blocked_pid,blocked_query,blocking_pid,blocking_query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,""%s"",%s,""%s""',
                     blocked_pid, blocked_query, blocking_pid, blocking_query
              ), E'
')
           FROM (
             SELECT blocked.pid AS blocked_pid, blocked.query AS blocked_query,
        blocking.pid AS blocking_pid, blocking.query AS blocking_query
        FROM pg_locks blocked_locks
        JOIN pg_stat_activity blocked ON blocked.pid = blocked_locks.pid
        JOIN pg_locks blocking_locks ON blocked_locks.locktype = blocking_locks.locktype
        AND blocked_locks.database IS NOT DISTINCT FROM blocking_locks.database
        AND blocked_locks.relation IS NOT DISTINCT FROM blocking_locks.relation
        AND blocked_locks.page IS NOT DISTINCT FROM blocking_locks.page
        AND blocked_locks.tuple IS NOT DISTINCT FROM blocking_locks.tuple
        AND blocked_locks.transactionid IS NOT DISTINCT FROM blocking_locks.transactionid
        AND blocked_locks.classid IS NOT DISTINCT FROM blocking_locks.classid
        AND blocked_locks.objid IS NOT DISTINCT FROM blocking_locks.objid
        AND blocked_locks.objsubid IS NOT DISTINCT FROM blocking_locks.objsubid
        AND blocked_locks.mode = blocking_locks.mode
        AND blocked.pid <> blocking_locks.pid
        JOIN pg_stat_activity blocking ON blocking.pid = blocking_locks.pid
        WHERE NOT blocked_locks.granted
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Database block info
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Database block info
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'db_name, connections, db_size, xact_commit, xact_rollback, blks_read, blks_hit
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s',
                     usename), E'
')
           FROM (
             SELECT datname, numbackends AS connections,
        pg_size_pretty(pg_database_size(datname)) AS db_size,
        xact_commit, xact_rollback, blks_read, blks_hit
        FROM pg_stat_database
        ORDER BY pg_database_size(datname) DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	


END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.607973,1,0.607973
drop table statistics.temp_user_calls,0.601799,2,0.3008995
drop table statistics.temp_user_calls,0.601799,2,0.3008995
drop table statistics.temp_user_calls,0.601799,2,0.3008995
drop table statistics.temp_user_calls,0.601799,2,0.3008995
drop table statistics.temp_user_calls,0.601799,2,0.3008995
"create table pgbench_accounts(aid    int not null,bid int,abalance int,filler char(84)) with (fillfactor=100)",0.598413,3,0.199471
"create table pgbench_accounts(aid    int not null,bid int,abalance int,filler char(84)) with (fillfactor=100)",0.598413,3,0.199471
"create table pgbench_accounts(aid    int not null,bid int,abalance int,filler char(84)) with (fillfactor=100)",0.598413,3,0.199471
"create table pgbench_accounts(aid    int not null,bid int,abalance int,filler char(84)) with (fillfactor=100)",0.598413,3,0.199471
"create table pgbench_accounts(aid    int not null,bid int,abalance int,filler char(84)) with (fillfactor=100)",0.598413,3,0.199471
select * from statistics.temp_pg_stat_activity,0.5978209999999998,3,0.19927366666666668
select * from statistics.temp_pg_stat_activity,0.5978209999999998,3,0.19927366666666668
select * from statistics.temp_pg_stat_activity,0.5978209999999998,3,0.19927366666666668
select * from statistics.temp_pg_stat_activity,0.5978209999999998,3,0.19927366666666668
select * from statistics.temp_pg_stat_activity,0.5978209999999998,3,0.19927366666666668
"SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) $1 COLLATE pg_catalog.default
  AND n.nspname OPERATOR(pg_catalog.~) $2 COLLATE pg_catalog.default
ORDER BY 2, 3",0.593592,6,0.09893199999999999
"SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) $1 COLLATE pg_catalog.default
  AND n.nspname OPERATOR(pg_catalog.~) $2 COLLATE pg_catalog.default
ORDER BY 2, 3",0.593592,6,0.09893199999999999
"SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) $1 COLLATE pg_catalog.default
  AND n.nspname OPERATOR(pg_catalog.~) $2 COLLATE pg_catalog.default
ORDER BY 2, 3",0.593592,6,0.09893199999999999
"SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) $1 COLLATE pg_catalog.default
  AND n.nspname OPERATOR(pg_catalog.~) $2 COLLATE pg_catalog.default
ORDER BY 2, 3",0.593592,6,0.09893199999999999
"SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) $1 COLLATE pg_catalog.default
  AND n.nspname OPERATOR(pg_catalog.~) $2 COLLATE pg_catalog.default
ORDER BY 2, 3",0.593592,6,0.09893199999999999
"create table pgbench_branches(bid int not null,bbalance int,filler char(88)) with (fillfactor=100)",0.584504,3,0.19483466666666666
"create table pgbench_branches(bid int not null,bbalance int,filler char(88)) with (fillfactor=100)",0.584504,3,0.19483466666666666
"create table pgbench_branches(bid int not null,bbalance int,filler char(88)) with (fillfactor=100)",0.584504,3,0.19483466666666666
"create table pgbench_branches(bid int not null,bbalance int,filler char(88)) with (fillfactor=100)",0.584504,3,0.19483466666666666
"create table pgbench_branches(bid int not null,bbalance int,filler char(88)) with (fillfactor=100)",0.584504,3,0.19483466666666666
drop table statistics.temp_pg_wait_sampling_get_history,0.5745169999999999,2,0.28725849999999997
drop table statistics.temp_pg_wait_sampling_get_history,0.5745169999999999,2,0.28725849999999997
drop table statistics.temp_pg_wait_sampling_get_history,0.5745169999999999,2,0.28725849999999997
drop table statistics.temp_pg_wait_sampling_get_history,0.5745169999999999,2,0.28725849999999997
drop table statistics.temp_pg_wait_sampling_get_history,0.5745169999999999,2,0.28725849999999997
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.530252,1,0.530252
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.530252,1,0.530252
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.530252,1,0.530252
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.530252,1,0.530252
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
	
    -- Top Queries by Execution Time	
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Execution Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, Runtime
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     pid, runtime), E'
')
           FROM (
             SELECT pid, now() - query_start AS runtime,
        usename, datname,
        LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active'
        ORDER BY runtime DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	
		

    -- Top Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.530252,1,0.530252
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $2 AND a.attnum > $3 AND NOT a.attisdropped
ORDER BY a.attnum",0.527654,7,0.07537914285714285
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $2 AND a.attnum > $3 AND NOT a.attisdropped
ORDER BY a.attnum",0.527654,7,0.07537914285714285
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $2 AND a.attnum > $3 AND NOT a.attisdropped
ORDER BY a.attnum",0.527654,7,0.07537914285714285
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $2 AND a.attnum > $3 AND NOT a.attisdropped
ORDER BY a.attnum",0.527654,7,0.07537914285714285
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $2 AND a.attnum > $3 AND NOT a.attisdropped
ORDER BY a.attnum",0.527654,7,0.07537914285714285
drop table statistics.temp_blocked_sessions,0.521341,2,0.2606705
drop table statistics.temp_blocked_sessions,0.521341,2,0.2606705
drop table statistics.temp_blocked_sessions,0.521341,2,0.2606705
drop table statistics.temp_blocked_sessions,0.521341,2,0.2606705
drop table statistics.temp_blocked_sessions,0.521341,2,0.2606705
"SELECT tablename
FROM pg_tables
WHERE schemaname = $1",0.513347,6,0.08555783333333332
"SELECT tablename
FROM pg_tables
WHERE schemaname = $1",0.513347,6,0.08555783333333332
"SELECT tablename
FROM pg_tables
WHERE schemaname = $1",0.513347,6,0.08555783333333332
"SELECT tablename
FROM pg_tables
WHERE schemaname = $1",0.513347,6,0.08555783333333332
"SELECT tablename
FROM pg_tables
WHERE schemaname = $1",0.513347,6,0.08555783333333332
drop table temp_pg_stat_activity,0.508677,1,0.508677
drop table temp_pg_stat_activity,0.508677,1,0.508677
drop table temp_pg_stat_activity,0.508677,1,0.508677
drop table temp_pg_stat_activity,0.508677,1,0.508677
drop table temp_pg_stat_activity,0.508677,1,0.508677
drop table statistics.temp_database_connections,0.491672,2,0.245836
drop table statistics.temp_database_connections,0.491672,2,0.245836
drop table statistics.temp_database_connections,0.491672,2,0.245836
drop table statistics.temp_database_connections,0.491672,2,0.245836
drop table statistics.temp_database_connections,0.491672,2,0.245836
SELECT * FROM pg_stat_database,0.480044,8,0.0600055
SELECT * FROM pg_stat_database,0.480044,8,0.0600055
SELECT * FROM pg_stat_database,0.480044,8,0.0600055
SELECT * FROM pg_stat_database,0.480044,8,0.0600055
SELECT * FROM pg_stat_database,0.480044,8,0.0600055
drop table statistics.temp_pg_wait_sampling_get_profile,0.47530300000000003,2,0.23765150000000002
drop table statistics.temp_pg_wait_sampling_get_profile,0.47530300000000003,2,0.23765150000000002
drop table statistics.temp_pg_wait_sampling_get_profile,0.47530300000000003,2,0.23765150000000002
drop table statistics.temp_pg_wait_sampling_get_profile,0.47530300000000003,2,0.23765150000000002
drop table statistics.temp_pg_wait_sampling_get_profile,0.47530300000000003,2,0.23765150000000002
select * from pg_wait_sampling_get_profile(),0.47381300000000004,2,0.23690650000000002
select * from pg_wait_sampling_get_profile(),0.47381300000000004,2,0.23690650000000002
select * from pg_wait_sampling_get_profile(),0.47381300000000004,2,0.23690650000000002
select * from pg_wait_sampling_get_profile(),0.47381300000000004,2,0.23690650000000002
select * from pg_wait_sampling_get_profile(),0.47381300000000004,2,0.23690650000000002
drop function statistics.dump_activity_snapshot,0.448242,4,0.11206050000000001
drop function statistics.dump_activity_snapshot,0.448242,4,0.11206050000000001
drop function statistics.dump_activity_snapshot,0.448242,4,0.11206050000000001
drop function statistics.dump_activity_snapshot,0.448242,4,0.11206050000000001
drop function statistics.dump_activity_snapshot,0.448242,4,0.11206050000000001
grant pg_read_all_stats to testuser,0.445337,2,0.2226685
grant pg_read_all_stats to testuser,0.445337,2,0.2226685
grant pg_read_all_stats to testuser,0.445337,2,0.2226685
grant pg_read_all_stats to testuser,0.445337,2,0.2226685
grant pg_read_all_stats to testuser,0.445337,2,0.2226685
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(log_file, '=== Top 10 Queries by Total Time ===' || E'
', false);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'
', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%.2f,%.2f,%s,""%s""',
                     queryid, calls,
                     total_exec_time::numeric,
                     mean_exec_time::numeric,
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.434342,2,0.217171
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(log_file, '=== Top 10 Queries by Total Time ===' || E'
', false);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'
', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%.2f,%.2f,%s,""%s""',
                     queryid, calls,
                     total_exec_time::numeric,
                     mean_exec_time::numeric,
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.434342,2,0.217171
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(log_file, '=== Top 10 Queries by Total Time ===' || E'
', false);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'
', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%.2f,%.2f,%s,""%s""',
                     queryid, calls,
                     total_exec_time::numeric,
                     mean_exec_time::numeric,
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.434342,2,0.217171
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(log_file, '=== Top 10 Queries by Total Time ===' || E'
', false);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'
', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%.2f,%.2f,%s,""%s""',
                     queryid, calls,
                     total_exec_time::numeric,
                     mean_exec_time::numeric,
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.434342,2,0.217171
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(log_file, '=== Top 10 Queries by Total Time ===' || E'
', false);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'
', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%.2f,%.2f,%s,""%s""',
                     queryid, calls,
                     total_exec_time::numeric,
                     mean_exec_time::numeric,
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.434342,2,0.217171
"/*
prompt SCRIPT: ORA_N05_all_sequences

column SEQUENCE_OWNER  format a20
column SEQUENCE_NAME   format a30
column CYCLE_FLAG      format a10
column ORDER_FLAG      format a10
column INCREMENT_BY    format 999999999999
column CACHE_SIZE      format 9999999999

prompt
prompt WARNINGs: List any non-system database sequence which has
prompt               - a LAST_NUMBER greater than 20% of its MAX_VALUE, or
prompt               - a LAST_NUMBER greater than 20% of 1 billion, or
prompt               - CACHE_SIZE > 1000
prompt

select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
and	(LAST_NUMBER > 0.2*MAX_VALUE or LAST_NUMBER > 0.2*1000000000)
UNION ALL
select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
and	CACHE_SIZE > 1000
order by SEQUENCE_OWNER, SEQUENCE_NAME;


prompt
prompt STATS: List all non-system database sequences
prompt        Note that the Oracle monitoring script also captures similar information hourly.
prompt

select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
order by SEQUENCE_OWNER, SEQUENCE_NAME;

-- End of script.





################################################################################
################################################################################
*/
-- File :        N05_all_sequences.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system sequences.
--
-- Author :      Andy Coleman
--
-- Date :        19th March 2012
--
-- WARNINGs: List any non-system database sequence which has:
--   - a LAST_NUMBER greater than 20% of its MAX_VALUE, or
--   - a LAST_NUMBER greater than 20% of 1 billion, or
--   - CACHE_SIZE > 1000
SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $1 ELSE $2 END AS cycle_flag,
    CASE WHEN cycle THEN $3 ELSE $4 END AS order_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($5, $6)
    AND (last_value > $7 * max_value OR last_value > $8 * $9)
UNION ALL
SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $10 ELSE $11 END AS cycle_flag,
    CASE WHEN cycle THEN $12 ELSE $13 END AS order_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($14, $15)
    AND last_value > $16
ORDER BY
    sequence_owner, sequence_name",0.425681,8,0.053210125
"/*
prompt SCRIPT: ORA_N05_all_sequences

column SEQUENCE_OWNER  format a20
column SEQUENCE_NAME   format a30
column CYCLE_FLAG      format a10
column ORDER_FLAG      format a10
column INCREMENT_BY    format 999999999999
column CACHE_SIZE      format 9999999999

prompt
prompt WARNINGs: List any non-system database sequence which has
prompt               - a LAST_NUMBER greater than 20% of its MAX_VALUE, or
prompt               - a LAST_NUMBER greater than 20% of 1 billion, or
prompt               - CACHE_SIZE > 1000
prompt

select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
and	(LAST_NUMBER > 0.2*MAX_VALUE or LAST_NUMBER > 0.2*1000000000)
UNION ALL
select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
and	CACHE_SIZE > 1000
order by SEQUENCE_OWNER, SEQUENCE_NAME;


prompt
prompt STATS: List all non-system database sequences
prompt        Note that the Oracle monitoring script also captures similar information hourly.
prompt

select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
order by SEQUENCE_OWNER, SEQUENCE_NAME;

-- End of script.





################################################################################
################################################################################
*/
-- File :        N05_all_sequences.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system sequences.
--
-- Author :      Andy Coleman
--
-- Date :        19th March 2012
--
-- WARNINGs: List any non-system database sequence which has:
--   - a LAST_NUMBER greater than 20% of its MAX_VALUE, or
--   - a LAST_NUMBER greater than 20% of 1 billion, or
--   - CACHE_SIZE > 1000
SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $1 ELSE $2 END AS cycle_flag,
    CASE WHEN cycle THEN $3 ELSE $4 END AS order_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($5, $6)
    AND (last_value > $7 * max_value OR last_value > $8 * $9)
UNION ALL
SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $10 ELSE $11 END AS cycle_flag,
    CASE WHEN cycle THEN $12 ELSE $13 END AS order_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($14, $15)
    AND last_value > $16
ORDER BY
    sequence_owner, sequence_name",0.425681,8,0.053210125
"/*
prompt SCRIPT: ORA_N05_all_sequences

column SEQUENCE_OWNER  format a20
column SEQUENCE_NAME   format a30
column CYCLE_FLAG      format a10
column ORDER_FLAG      format a10
column INCREMENT_BY    format 999999999999
column CACHE_SIZE      format 9999999999

prompt
prompt WARNINGs: List any non-system database sequence which has
prompt               - a LAST_NUMBER greater than 20% of its MAX_VALUE, or
prompt               - a LAST_NUMBER greater than 20% of 1 billion, or
prompt               - CACHE_SIZE > 1000
prompt

select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
and	(LAST_NUMBER > 0.2*MAX_VALUE or LAST_NUMBER > 0.2*1000000000)
UNION ALL
select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
and	CACHE_SIZE > 1000
order by SEQUENCE_OWNER, SEQUENCE_NAME;


prompt
prompt STATS: List all non-system database sequences
prompt        Note that the Oracle monitoring script also captures similar information hourly.
prompt

select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
order by SEQUENCE_OWNER, SEQUENCE_NAME;

-- End of script.





################################################################################
################################################################################
*/
-- File :        N05_all_sequences.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system sequences.
--
-- Author :      Andy Coleman
--
-- Date :        19th March 2012
--
-- WARNINGs: List any non-system database sequence which has:
--   - a LAST_NUMBER greater than 20% of its MAX_VALUE, or
--   - a LAST_NUMBER greater than 20% of 1 billion, or
--   - CACHE_SIZE > 1000
SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $1 ELSE $2 END AS cycle_flag,
    CASE WHEN cycle THEN $3 ELSE $4 END AS order_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($5, $6)
    AND (last_value > $7 * max_value OR last_value > $8 * $9)
UNION ALL
SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $10 ELSE $11 END AS cycle_flag,
    CASE WHEN cycle THEN $12 ELSE $13 END AS order_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($14, $15)
    AND last_value > $16
ORDER BY
    sequence_owner, sequence_name",0.425681,8,0.053210125
"/*
prompt SCRIPT: ORA_N05_all_sequences

column SEQUENCE_OWNER  format a20
column SEQUENCE_NAME   format a30
column CYCLE_FLAG      format a10
column ORDER_FLAG      format a10
column INCREMENT_BY    format 999999999999
column CACHE_SIZE      format 9999999999

prompt
prompt WARNINGs: List any non-system database sequence which has
prompt               - a LAST_NUMBER greater than 20% of its MAX_VALUE, or
prompt               - a LAST_NUMBER greater than 20% of 1 billion, or
prompt               - CACHE_SIZE > 1000
prompt

select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
and	(LAST_NUMBER > 0.2*MAX_VALUE or LAST_NUMBER > 0.2*1000000000)
UNION ALL
select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
and	CACHE_SIZE > 1000
order by SEQUENCE_OWNER, SEQUENCE_NAME;


prompt
prompt STATS: List all non-system database sequences
prompt        Note that the Oracle monitoring script also captures similar information hourly.
prompt

select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
order by SEQUENCE_OWNER, SEQUENCE_NAME;

-- End of script.





################################################################################
################################################################################
*/
-- File :        N05_all_sequences.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system sequences.
--
-- Author :      Andy Coleman
--
-- Date :        19th March 2012
--
-- WARNINGs: List any non-system database sequence which has:
--   - a LAST_NUMBER greater than 20% of its MAX_VALUE, or
--   - a LAST_NUMBER greater than 20% of 1 billion, or
--   - CACHE_SIZE > 1000
SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $1 ELSE $2 END AS cycle_flag,
    CASE WHEN cycle THEN $3 ELSE $4 END AS order_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($5, $6)
    AND (last_value > $7 * max_value OR last_value > $8 * $9)
UNION ALL
SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $10 ELSE $11 END AS cycle_flag,
    CASE WHEN cycle THEN $12 ELSE $13 END AS order_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($14, $15)
    AND last_value > $16
ORDER BY
    sequence_owner, sequence_name",0.425681,8,0.053210125
"/*
prompt SCRIPT: ORA_N05_all_sequences

column SEQUENCE_OWNER  format a20
column SEQUENCE_NAME   format a30
column CYCLE_FLAG      format a10
column ORDER_FLAG      format a10
column INCREMENT_BY    format 999999999999
column CACHE_SIZE      format 9999999999

prompt
prompt WARNINGs: List any non-system database sequence which has
prompt               - a LAST_NUMBER greater than 20% of its MAX_VALUE, or
prompt               - a LAST_NUMBER greater than 20% of 1 billion, or
prompt               - CACHE_SIZE > 1000
prompt

select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
and	(LAST_NUMBER > 0.2*MAX_VALUE or LAST_NUMBER > 0.2*1000000000)
UNION ALL
select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
and	CACHE_SIZE > 1000
order by SEQUENCE_OWNER, SEQUENCE_NAME;


prompt
prompt STATS: List all non-system database sequences
prompt        Note that the Oracle monitoring script also captures similar information hourly.
prompt

select	SEQUENCE_OWNER,
	SEQUENCE_NAME,
	MIN_VALUE,
	MAX_VALUE,
	INCREMENT_BY,
	CYCLE_FLAG,
	ORDER_FLAG,
	CACHE_SIZE,
	LAST_NUMBER
        from ALL_SEQUENCES
where   SEQUENCE_OWNER not in (&gOracleSpecialUsers)
order by SEQUENCE_OWNER, SEQUENCE_NAME;

-- End of script.





################################################################################
################################################################################
*/
-- File :        N05_all_sequences.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script lists all of the non-system sequences.
--
-- Author :      Andy Coleman
--
-- Date :        19th March 2012
--
-- WARNINGs: List any non-system database sequence which has:
--   - a LAST_NUMBER greater than 20% of its MAX_VALUE, or
--   - a LAST_NUMBER greater than 20% of 1 billion, or
--   - CACHE_SIZE > 1000
SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $1 ELSE $2 END AS cycle_flag,
    CASE WHEN cycle THEN $3 ELSE $4 END AS order_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($5, $6)
    AND (last_value > $7 * max_value OR last_value > $8 * $9)
UNION ALL
SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $10 ELSE $11 END AS cycle_flag,
    CASE WHEN cycle THEN $12 ELSE $13 END AS order_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($14, $15)
    AND last_value > $16
ORDER BY
    sequence_owner, sequence_name",0.425681,8,0.053210125
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.418888,1,0.418888
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.418888,1,0.418888
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.418888,1,0.418888
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.418888,1,0.418888
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.418888,1,0.418888
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     queryid, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.394699,1,0.394699
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     queryid, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.394699,1,0.394699
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     queryid, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.394699,1,0.394699
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     queryid, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.394699,1,0.394699
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     queryid, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.394699,1,0.394699
drop schema statistics,0.379736,1,0.379736
drop schema statistics,0.379736,1,0.379736
drop schema statistics,0.379736,1,0.379736
drop schema statistics,0.379736,1,0.379736
drop schema statistics,0.379736,1,0.379736
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT nvl(state,'None'), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.37053,1,0.37053
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT nvl(state,'None'), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.37053,1,0.37053
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT nvl(state,'None'), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.37053,1,0.37053
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT nvl(state,'None'), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.37053,1,0.37053
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT nvl(state,'None'), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.37053,1,0.37053
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.369186,1,0.369186
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.369186,1,0.369186
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.369186,1,0.369186
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.369186,1,0.369186
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State, Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);


    -- Number of connected users
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Number of connected users
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'User
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s',
                     usename), E'
')
           FROM (
             SELECT usename FROM pg_stat_activity WHERE usename != '' GROUP BY usename
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
	
	
    -- Long Running Queries (> 5 mins)
	
		PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Long Running Queries (> 5 mins)
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'PID, User, DB, Duration, Query
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,%s,""%s""',
                     pid, usename, datname, state, client_addr, duration, query_snippet), E'
')
           FROM (
             SELECT pid, usename, datname, state, client_addr, now() - query_start AS duration, LEFT(query, 100) AS query_snippet
        FROM pg_stat_activity
        WHERE state = 'active' AND now() - query_start > interval '5 minutes'
        ORDER BY query_start
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);	
	

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.369186,1,0.369186
"SELECT datname, state
FROM pg_stat_activity
WHERE datname <> $1 AND datname <> $2",0.36487699999999995,8,0.045609625
"SELECT datname, state
FROM pg_stat_activity
WHERE datname <> $1 AND datname <> $2",0.36487699999999995,8,0.045609625
"SELECT datname, state
FROM pg_stat_activity
WHERE datname <> $1 AND datname <> $2",0.36487699999999995,8,0.045609625
"SELECT datname, state
FROM pg_stat_activity
WHERE datname <> $1 AND datname <> $2",0.36487699999999995,8,0.045609625
"SELECT datname, state
FROM pg_stat_activity
WHERE datname <> $1 AND datname <> $2",0.36487699999999995,8,0.045609625
"SELECT proname, proargtypes, prorettype
FROM pg_proc
WHERE pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1)
  AND proname LIKE $2",0.360779,3,0.12025966666666667
"SELECT proname, proargtypes, prorettype
FROM pg_proc
WHERE pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1)
  AND proname LIKE $2",0.360779,3,0.12025966666666667
"SELECT proname, proargtypes, prorettype
FROM pg_proc
WHERE pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1)
  AND proname LIKE $2",0.360779,3,0.12025966666666667
"SELECT proname, proargtypes, prorettype
FROM pg_proc
WHERE pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1)
  AND proname LIKE $2",0.360779,3,0.12025966666666667
"SELECT proname, proargtypes, prorettype
FROM pg_proc
WHERE pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1)
  AND proname LIKE $2",0.360779,3,0.12025966666666667
"SELECT 
        now(),
        p.queryid,
        q.query,
        p.event_type,
        p.event,
        p.count as samples
    FROM pg_wait_sampling_get_profile() p
    LEFT JOIN pg_stat_statements q
        ON p.queryid = q.queryid",0.360034,1,0.360034
"SELECT 
        now(),
        p.queryid,
        q.query,
        p.event_type,
        p.event,
        p.count as samples
    FROM pg_wait_sampling_get_profile() p
    LEFT JOIN pg_stat_statements q
        ON p.queryid = q.queryid",0.360034,1,0.360034
"SELECT 
        now(),
        p.queryid,
        q.query,
        p.event_type,
        p.event,
        p.count as samples
    FROM pg_wait_sampling_get_profile() p
    LEFT JOIN pg_stat_statements q
        ON p.queryid = q.queryid",0.360034,1,0.360034
"SELECT 
        now(),
        p.queryid,
        q.query,
        p.event_type,
        p.event,
        p.count as samples
    FROM pg_wait_sampling_get_profile() p
    LEFT JOIN pg_stat_statements q
        ON p.queryid = q.queryid",0.360034,1,0.360034
"SELECT 
        now(),
        p.queryid,
        q.query,
        p.event_type,
        p.event,
        p.count as samples
    FROM pg_wait_sampling_get_profile() p
    LEFT JOIN pg_stat_statements q
        ON p.queryid = q.queryid",0.360034,1,0.360034
drop table pgbench_branches,0.355146,1,0.355146
drop table pgbench_branches,0.355146,1,0.355146
drop table pgbench_branches,0.355146,1,0.355146
drop table pgbench_branches,0.355146,1,0.355146
drop table pgbench_branches,0.355146,1,0.355146
"SELECT q.queryid, LEFT(q.query, $1) AS short_query, SUM(p.count) AS total_samples
        FROM pg_wait_sampling_get_profile() p
        JOIN pg_stat_statements q ON p.queryid = q.queryid
        GROUP BY q.queryid, q.query
        ORDER BY total_samples DESC
        LIMIT $2",0.352769,1,0.352769
"SELECT q.queryid, LEFT(q.query, $1) AS short_query, SUM(p.count) AS total_samples
        FROM pg_wait_sampling_get_profile() p
        JOIN pg_stat_statements q ON p.queryid = q.queryid
        GROUP BY q.queryid, q.query
        ORDER BY total_samples DESC
        LIMIT $2",0.352769,1,0.352769
"SELECT q.queryid, LEFT(q.query, $1) AS short_query, SUM(p.count) AS total_samples
        FROM pg_wait_sampling_get_profile() p
        JOIN pg_stat_statements q ON p.queryid = q.queryid
        GROUP BY q.queryid, q.query
        ORDER BY total_samples DESC
        LIMIT $2",0.352769,1,0.352769
"SELECT q.queryid, LEFT(q.query, $1) AS short_query, SUM(p.count) AS total_samples
        FROM pg_wait_sampling_get_profile() p
        JOIN pg_stat_statements q ON p.queryid = q.queryid
        GROUP BY q.queryid, q.query
        ORDER BY total_samples DESC
        LIMIT $2",0.352769,1,0.352769
"SELECT q.queryid, LEFT(q.query, $1) AS short_query, SUM(p.count) AS total_samples
        FROM pg_wait_sampling_get_profile() p
        JOIN pg_stat_statements q ON p.queryid = q.queryid
        GROUP BY q.queryid, q.query
        ORDER BY total_samples DESC
        LIMIT $2",0.352769,1,0.352769
"SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) $1 COLLATE pg_catalog.default
  AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 2, 3",0.33001899999999995,7,0.04714557142857143
"SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) $1 COLLATE pg_catalog.default
  AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 2, 3",0.33001899999999995,7,0.04714557142857143
"SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) $1 COLLATE pg_catalog.default
  AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 2, 3",0.33001899999999995,7,0.04714557142857143
"SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) $1 COLLATE pg_catalog.default
  AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 2, 3",0.33001899999999995,7,0.04714557142857143
"SELECT c.oid,
  n.nspname,
  c.relname
FROM pg_catalog.pg_class c
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname OPERATOR(pg_catalog.~) $1 COLLATE pg_catalog.default
  AND pg_catalog.pg_table_is_visible(c.oid)
ORDER BY 2, 3",0.33001899999999995,7,0.04714557142857143
"SELECT event_type, event, SUM(count) AS total_samples
        FROM pg_wait_sampling_get_profile()
        GROUP BY event_type, event
        ORDER BY total_samples DESC
        LIMIT $1",0.31865099999999996,1,0.31865099999999996
"SELECT event_type, event, SUM(count) AS total_samples
        FROM pg_wait_sampling_get_profile()
        GROUP BY event_type, event
        ORDER BY total_samples DESC
        LIMIT $1",0.31865099999999996,1,0.31865099999999996
"SELECT event_type, event, SUM(count) AS total_samples
        FROM pg_wait_sampling_get_profile()
        GROUP BY event_type, event
        ORDER BY total_samples DESC
        LIMIT $1",0.31865099999999996,1,0.31865099999999996
"SELECT event_type, event, SUM(count) AS total_samples
        FROM pg_wait_sampling_get_profile()
        GROUP BY event_type, event
        ORDER BY total_samples DESC
        LIMIT $1",0.31865099999999996,1,0.31865099999999996
"SELECT event_type, event, SUM(count) AS total_samples
        FROM pg_wait_sampling_get_profile()
        GROUP BY event_type, event
        ORDER BY total_samples DESC
        LIMIT $1",0.31865099999999996,1,0.31865099999999996
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.314638,1,0.314638
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.314638,1,0.314638
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.314638,1,0.314638
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.314638,1,0.314638
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.314638,1,0.314638
"insert into statistics.query_details
 select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.30696599999999996,1,0.30696599999999996
"insert into statistics.query_details
 select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.30696599999999996,1,0.30696599999999996
"insert into statistics.query_details
 select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.30696599999999996,1,0.30696599999999996
"insert into statistics.query_details
 select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.30696599999999996,1,0.30696599999999996
"insert into statistics.query_details
 select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.30696599999999996,1,0.30696599999999996
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.30546099999999987,100,0.0030546099999999997
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.30546099999999987,100,0.0030546099999999997
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.30546099999999987,100,0.0030546099999999997
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.30546099999999987,100,0.0030546099999999997
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.30546099999999987,100,0.0030546099999999997
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.297429,1,0.297429
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.297429,1,0.297429
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.297429,1,0.297429
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.297429,1,0.297429
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.297429,1,0.297429
drop table pgbench_tellers,0.296578,1,0.296578
drop table pgbench_tellers,0.296578,1,0.296578
drop table pgbench_tellers,0.296578,1,0.296578
drop table pgbench_tellers,0.296578,1,0.296578
drop table pgbench_tellers,0.296578,1,0.296578
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None'), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.292958,1,0.292958
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None'), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.292958,1,0.292958
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None'), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.292958,1,0.292958
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None'), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.292958,1,0.292958
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None'), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.292958,1,0.292958
"SELECT spcname AS tablespace_name
FROM pg_tablespace
ORDER BY tablespace_name",0.29024500000000003,8,0.036280625000000004
"SELECT spcname AS tablespace_name
FROM pg_tablespace
ORDER BY tablespace_name",0.29024500000000003,8,0.036280625000000004
"SELECT spcname AS tablespace_name
FROM pg_tablespace
ORDER BY tablespace_name",0.29024500000000003,8,0.036280625000000004
"SELECT spcname AS tablespace_name
FROM pg_tablespace
ORDER BY tablespace_name",0.29024500000000003,8,0.036280625000000004
"SELECT spcname AS tablespace_name
FROM pg_tablespace
ORDER BY tablespace_name",0.29024500000000003,8,0.036280625000000004
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.28921,1,0.28921
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.28921,1,0.28921
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.28921,1,0.28921
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.28921,1,0.28921
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.28921,1,0.28921
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.286557,1,0.286557
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.286557,1,0.286557
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.286557,1,0.286557
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.286557,1,0.286557
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.286557,1,0.286557
create schema testschema,0.2825,1,0.2825
create schema testschema,0.2825,1,0.2825
create schema testschema,0.2825,1,0.2825
create schema testschema,0.2825,1,0.2825
create schema testschema,0.2825,1,0.2825
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %l WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %l WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %l WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.272055,1,0.272055
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %l WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %l WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %l WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.272055,1,0.272055
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %l WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %l WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %l WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.272055,1,0.272055
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %l WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %l WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %l WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.272055,1,0.272055
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %l WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %l WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %l WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %l WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.272055,1,0.272055
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     query_id, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.271981,1,0.271981
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     query_id, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.271981,1,0.271981
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     query_id, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.271981,1,0.271981
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     query_id, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.271981,1,0.271981
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     query_id, connection_count), E'
')
           FROM (
             SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.271981,1,0.271981
"SELECT
    n.nspname AS schema,
    t.relname AS table_name,
    i.relname AS index_name,
    pg_get_indexdef(ix.indexrelid) AS index_definition,
    pg_get_expr(ix.indexprs, ix.indrelid) as func_expr
FROM
    pg_index ix
JOIN pg_class i ON i.oid = ix.indexrelid
JOIN pg_class t ON t.oid = ix.indrelid
JOIN pg_namespace n ON n.oid = t.relnamespace
where ix.indexprs is not null
ORDER BY
    n.nspname,
    t.relname,
    i.relname",0.27102000000000004,9,0.03011333333333334
"SELECT
    n.nspname AS schema,
    t.relname AS table_name,
    i.relname AS index_name,
    pg_get_indexdef(ix.indexrelid) AS index_definition,
    pg_get_expr(ix.indexprs, ix.indrelid) as func_expr
FROM
    pg_index ix
JOIN pg_class i ON i.oid = ix.indexrelid
JOIN pg_class t ON t.oid = ix.indrelid
JOIN pg_namespace n ON n.oid = t.relnamespace
where ix.indexprs is not null
ORDER BY
    n.nspname,
    t.relname,
    i.relname",0.27102000000000004,9,0.03011333333333334
"SELECT
    n.nspname AS schema,
    t.relname AS table_name,
    i.relname AS index_name,
    pg_get_indexdef(ix.indexrelid) AS index_definition,
    pg_get_expr(ix.indexprs, ix.indrelid) as func_expr
FROM
    pg_index ix
JOIN pg_class i ON i.oid = ix.indexrelid
JOIN pg_class t ON t.oid = ix.indrelid
JOIN pg_namespace n ON n.oid = t.relnamespace
where ix.indexprs is not null
ORDER BY
    n.nspname,
    t.relname,
    i.relname",0.27102000000000004,9,0.03011333333333334
"SELECT
    n.nspname AS schema,
    t.relname AS table_name,
    i.relname AS index_name,
    pg_get_indexdef(ix.indexrelid) AS index_definition,
    pg_get_expr(ix.indexprs, ix.indrelid) as func_expr
FROM
    pg_index ix
JOIN pg_class i ON i.oid = ix.indexrelid
JOIN pg_class t ON t.oid = ix.indrelid
JOIN pg_namespace n ON n.oid = t.relnamespace
where ix.indexprs is not null
ORDER BY
    n.nspname,
    t.relname,
    i.relname",0.27102000000000004,9,0.03011333333333334
"SELECT
    n.nspname AS schema,
    t.relname AS table_name,
    i.relname AS index_name,
    pg_get_indexdef(ix.indexrelid) AS index_definition,
    pg_get_expr(ix.indexprs, ix.indrelid) as func_expr
FROM
    pg_index ix
JOIN pg_class i ON i.oid = ix.indexrelid
JOIN pg_class t ON t.oid = ix.indrelid
JOIN pg_namespace n ON n.oid = t.relnamespace
where ix.indexprs is not null
ORDER BY
    n.nspname,
    t.relname,
    i.relname",0.27102000000000004,9,0.03011333333333334
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.268169,1,0.268169
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.268169,1,0.268169
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.268169,1,0.268169
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.268169,1,0.268169
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot.lst';
BEGIN

    -- Active Connections by State
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Active Connections by State
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'State,Count
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s""',
                     state, connection_count), E'
')
           FROM (
             SELECT COALESCE(state,'None') AS state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);
	PERFORM pg_catalog.pg_file_write(log_file, '-------------------------------------------------------------------------------------
' || E'', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.268169,1,0.268169
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.262674,1,0.262674
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.262674,1,0.262674
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.262674,1,0.262674
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.262674,1,0.262674
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_time, calls, mean_time
FROM ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.262674,1,0.262674
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.259163,1,0.259163
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.259163,1,0.259163
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.259163,1,0.259163
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.259163,1,0.259163
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------
' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.259163,1,0.259163
SELECT cron.unschedule($1),0.256826,4,0.0642065
SELECT cron.unschedule($1),0.256826,4,0.0642065
SELECT cron.unschedule($1),0.256826,4,0.0642065
SELECT cron.unschedule($1),0.256826,4,0.0642065
SELECT cron.unschedule($1),0.256826,4,0.0642065
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.2546810000000001,100,0.00254681
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.2546810000000001,100,0.00254681
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.2546810000000001,100,0.00254681
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.2546810000000001,100,0.00254681
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.2546810000000001,100,0.00254681
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.25176799999999994,100,0.0025176800000000004
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.25176799999999994,100,0.0025176800000000004
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.25176799999999994,100,0.0025176800000000004
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.25176799999999994,100,0.0025176800000000004
"insert into pgbench_tellers(tid,bid,tbalance) values ($1,$2,$3)",0.25176799999999994,100,0.0025176800000000004
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.246474,1,0.246474
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.246474,1,0.246474
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.246474,1,0.246474
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.246474,1,0.246474
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.246474,1,0.246474
"select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.245334,1,0.245334
"select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.245334,1,0.245334
"select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.245334,1,0.245334
"select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.245334,1,0.245334
"select distinct psa.query_id
          ,psa.query
  from pg_stat_activity psa left outer join pg_stat_statements pss
    on psa.query_id=pss.queryid
 where psa.pid<>pg_backend_pid()
   and query_id is not null
  and  psa.query_id not in (select query_id from statistics.query_details)",0.245334,1,0.245334
drop function dump_activity_to_file,0.244937,1,0.244937
drop function dump_activity_to_file,0.244937,1,0.244937
drop function dump_activity_to_file,0.244937,1,0.244937
drop function dump_activity_to_file,0.244937,1,0.244937
drop function dump_activity_to_file,0.244937,1,0.244937
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_wait_type_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.234533,1,0.234533
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_wait_type_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.234533,1,0.234533
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_wait_type_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.234533,1,0.234533
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_wait_type_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.234533,1,0.234533
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_wait_type_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.234533,1,0.234533
create schema statistics,0.232126,1,0.232126
create schema statistics,0.232126,1,0.232126
create schema statistics,0.232126,1,0.232126
create schema statistics,0.232126,1,0.232126
create schema statistics,0.232126,1,0.232126
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.231904,1,0.231904
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.231904,1,0.231904
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.231904,1,0.231904
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.231904,1,0.231904
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT event_type, event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY event_type, event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.231904,1,0.231904
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time \n' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet\n' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.231658,1,0.231658
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time \n' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet\n' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.231658,1,0.231658
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time \n' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet\n' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.231658,1,0.231658
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time \n' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet\n' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.231658,1,0.231658
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time \n' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet\n' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------\n' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.231658,1,0.231658
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.230378,1,0.230378
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.230378,1,0.230378
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.230378,1,0.230378
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.230378,1,0.230378
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_sql_by_exec_count_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );
	
-- Top SQLs by total execution time
filename := filepath||'top_sql_by_exec_time_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, total_exec_time, calls, mean_exec_time
FROM statistics.ash_stat_statements_sample
WHERE sample_time > now() - interval ''5 minutes''
ORDER BY total_exec_time DESC ) TO %L WITH CSV HEADER',
        filename
    );	

-- Wait Event Distribution by Wait Type
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event_type, wait_event, COUNT(*) AS occurrences
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event_type, wait_event
ORDER BY occurrences DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
-- Sessions with Highest Waits
filename := filepath||'top_waiting_session_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT pid, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY pid
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );		
	
-- Queries with Highest Waits
filename := filepath||'top_waiting_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT query, COUNT(*) AS wait_samples
FROM statistics.ash_wait_sampling_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY query
ORDER BY wait_samples DESC ) TO %L WITH CSV HEADER',
        filename
    );	
	
END;
$$ LANGUAGE plpgsql",0.230378,1,0.230378
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, query_id
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	
COMMIT;	
	  
END;
$$ LANGUAGE plpgsql",0.230191,1,0.230191
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, query_id
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	
COMMIT;	
	  
END;
$$ LANGUAGE plpgsql",0.230191,1,0.230191
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, query_id
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	
COMMIT;	
	  
END;
$$ LANGUAGE plpgsql",0.230191,1,0.230191
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, query_id
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	
COMMIT;	
	  
END;
$$ LANGUAGE plpgsql",0.230191,1,0.230191
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, query_id
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	
COMMIT;	
	  
END;
$$ LANGUAGE plpgsql",0.230191,1,0.230191
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	
COMMIT;	
	  
END;
$$ LANGUAGE plpgsql",0.229884,1,0.229884
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	
COMMIT;	
	  
END;
$$ LANGUAGE plpgsql",0.229884,1,0.229884
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	
COMMIT;	
	  
END;
$$ LANGUAGE plpgsql",0.229884,1,0.229884
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	
COMMIT;	
	  
END;
$$ LANGUAGE plpgsql",0.229884,1,0.229884
"CREATE OR REPLACE FUNCTION statistics.load_ash_waits_data()
RETURNS VOID AS $$
BEGIN
    INSERT INTO statistics.ash_session_sample (
      sample_time, pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    )
    SELECT
      now(), pid, usename, application_name, client_addr, state,
      wait_event_type, wait_event, backend_type, query, queryid
    FROM pg_stat_activity
    WHERE state IN ('active')
      AND pid <> pg_backend_pid();
	  
INSERT INTO statistics.ash_wait_sampling_sample
    SELECT now(), a.* FROM pg_wait_sampling_current a;

INSERT INTO statistics.ash_stat_statements_sample
    SELECT now(), a.* FROM pg_stat_statements a;	
	
COMMIT;	
	  
END;
$$ LANGUAGE plpgsql",0.229884,1,0.229884
drop table pgbench_history,0.227894,1,0.227894
drop table pgbench_history,0.227894,1,0.227894
drop table pgbench_history,0.227894,1,0.227894
drop table pgbench_history,0.227894,1,0.227894
drop table pgbench_history,0.227894,1,0.227894
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time ' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.22763,1,0.22763
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time ' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.22763,1,0.22763
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time ' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.22763,1,0.22763
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time ' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.22763,1,0.22763
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time ' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.22763,1,0.22763
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(log_file, '=== Top 10 Queries by Total Time ===' || E'
', false);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'
', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.217312,1,0.217312
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(log_file, '=== Top 10 Queries by Total Time ===' || E'
', false);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'
', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.217312,1,0.217312
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(log_file, '=== Top 10 Queries by Total Time ===' || E'
', false);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'
', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.217312,1,0.217312
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(log_file, '=== Top 10 Queries by Total Time ===' || E'
', false);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'
', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.217312,1,0.217312
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
    PERFORM pg_catalog.pg_file_write(log_file, '=== Top 10 Queries by Total Time ===' || E'
', false);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'
', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.217312,1,0.217312
"CREATE OR REPLACE FUNCTION add_numbers(a INT, b INT)
RETURNS INT AS $$
BEGIN
    RETURN a + b;
END;
$$ LANGUAGE plpgsql",0.21458,1,0.21458
"CREATE OR REPLACE FUNCTION add_numbers(a INT, b INT)
RETURNS INT AS $$
BEGIN
    RETURN a + b;
END;
$$ LANGUAGE plpgsql",0.21458,1,0.21458
"CREATE OR REPLACE FUNCTION add_numbers(a INT, b INT)
RETURNS INT AS $$
BEGIN
    RETURN a + b;
END;
$$ LANGUAGE plpgsql",0.21458,1,0.21458
"CREATE OR REPLACE FUNCTION add_numbers(a INT, b INT)
RETURNS INT AS $$
BEGIN
    RETURN a + b;
END;
$$ LANGUAGE plpgsql",0.21458,1,0.21458
"CREATE OR REPLACE FUNCTION add_numbers(a INT, b INT)
RETURNS INT AS $$
BEGIN
    RETURN a + b;
END;
$$ LANGUAGE plpgsql",0.21458,1,0.21458
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
	' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
	' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.212042,1,0.212042
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
	' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
	' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.212042,1,0.212042
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
	' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
	' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.212042,1,0.212042
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
	' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
	' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.212042,1,0.212042
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time
	' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet
	' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------
	' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%s,%s,%s,""%s""',
                     queryid, calls, to_char(total_exec_time, 'FM999999999.00'), to_char(mean_exec_time, 'FM999999999.00'),
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.212042,1,0.212042
select * from pg_wait_sampling_profile,0.21188700000000002,1,0.21188700000000002
select * from pg_wait_sampling_profile,0.21188700000000002,1,0.21188700000000002
select * from pg_wait_sampling_profile,0.21188700000000002,1,0.21188700000000002
select * from pg_wait_sampling_profile,0.21188700000000002,1,0.21188700000000002
select * from pg_wait_sampling_profile,0.21188700000000002,1,0.21188700000000002
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time ' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%.2f,%.2f,%s,""%s""',
                     queryid, calls,
                     total_exec_time::numeric,
                     mean_exec_time::numeric,
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.206776,1,0.206776
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time ' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%.2f,%.2f,%s,""%s""',
                     queryid, calls,
                     total_exec_time::numeric,
                     mean_exec_time::numeric,
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.206776,1,0.206776
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time ' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%.2f,%.2f,%s,""%s""',
                     queryid, calls,
                     total_exec_time::numeric,
                     mean_exec_time::numeric,
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.206776,1,0.206776
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time ' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%.2f,%.2f,%s,""%s""',
                     queryid, calls,
                     total_exec_time::numeric,
                     mean_exec_time::numeric,
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.206776,1,0.206776
"CREATE OR REPLACE FUNCTION statistics.run_health_check()
RETURNS void AS $$
DECLARE
    log_file TEXT := '/home/postgres/app/log/db_snapshot_' || to_char(now(), 'YYYYMMDD_HH24MI') || '.lst';
BEGIN
    -- Top 10 Queries by Total Time
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', false);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, ' -- Top 10 Queries by Total Time ' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file, 'QueryID,Calls,TotalTime_ms,AvgTime_ms,Rows,QuerySnippet' || E'', true);
	PERFORM pg_catalog.pg_file_write(log_file, '--------------------------------------' || E'', true);
    PERFORM pg_catalog.pg_file_write(log_file,
        COALESCE(
          (SELECT string_agg(
              format('%s,%s,%.2f,%.2f,%s,""%s""',
                     queryid, calls,
                     total_exec_time::numeric,
                     mean_exec_time::numeric,
                     rows,
                     replace(LEFT(query, 100), '""', '""""')
              ), E'
')
           FROM (
             SELECT queryid, calls, total_exec_time, mean_exec_time, rows, query
             FROM pg_stat_statements
             ORDER BY total_exec_time DESC
             LIMIT 10
           ) t
          ), 'No data') || E'
', true);

    -- Additional sections can be appended here in the same pattern

END;
$$ LANGUAGE plpgsql SECURITY DEFINER",0.206776,1,0.206776
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT := to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
	filepath TEXT := '/home/postgres/app/log/';
begin
COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
--ORDER BY samples DESC ) TO filepath||'top_waits_'||filename WITH CSV HEADER;
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits_123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.201119,1,0.201119
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT := to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
	filepath TEXT := '/home/postgres/app/log/';
begin
COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
--ORDER BY samples DESC ) TO filepath||'top_waits_'||filename WITH CSV HEADER;
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits_123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.201119,1,0.201119
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT := to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
	filepath TEXT := '/home/postgres/app/log/';
begin
COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
--ORDER BY samples DESC ) TO filepath||'top_waits_'||filename WITH CSV HEADER;
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits_123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.201119,1,0.201119
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT := to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
	filepath TEXT := '/home/postgres/app/log/';
begin
COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
--ORDER BY samples DESC ) TO filepath||'top_waits_'||filename WITH CSV HEADER;
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits_123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.201119,1,0.201119
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT := to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
	filepath TEXT := '/home/postgres/app/log/';
begin
COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
--ORDER BY samples DESC ) TO filepath||'top_waits_'||filename WITH CSV HEADER;
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits_123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.201119,1,0.201119
drop user testuser,0.199451,1,0.199451
drop user testuser,0.199451,1,0.199451
drop user testuser,0.199451,1,0.199451
drop user testuser,0.199451,1,0.199451
drop user testuser,0.199451,1,0.199451
"/*
set long 5000

column comment format a80

prompt SCRIPT: ORA_S01_bespoke_triggers_defined

prompt CHECK: list the bespoke triggers defined on the tables used in Geneva which do not have the standard names used in the Geneva product

col TRIGGER_NAME for a40
col TRIGGERING_EVENT for a40
col REFERENCING_NAMES for a33
col WHEN_CLAUSE for a100

select	*
from	all_triggers
where	owner = '%vSchemaOwner'
and    (trigger_name not like 'TRDA%'
and	trigger_name not like 'TRDB%'
and	trigger_name not like 'TRIA%'
and	trigger_name not like 'TRIB%'
and	trigger_name not like 'TRUA%'
and	trigger_name not like 'TRUB%')
or	trigger_name like '%\_%' escape '\'
order by table_name;

set long 80





##########################################################################
##########################################################################
*/
-- File :        S01_bespoke_triggers_defined.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script will list all of the bespoke triggers defined on
--               the tables used in Geneva which do not have the standard names
--               used in the Geneva product.
--
-- Author :      Jerry Alderson
--
-- Date :        12th November 2001
--
-- List bespoke triggers defined on tables that don't follow standard Geneva names
SELECT
    tgname AS trigger_name,
    CASE
        WHEN tgtype::integer & $1 = $2 THEN $3
        WHEN tgtype::integer & $4 = $5 THEN $6
        ELSE $7
    END AS triggering_event,
    tgargs AS referencing_names,
    tgqual AS when_clause,
    relname AS table_name
FROM
    pg_trigger
    JOIN pg_class ON pg_trigger.tgrelid = pg_class.oid
    JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE
    pg_namespace.nspname = $8  -- Replace with actual schema owner
    AND (
        tgname NOT LIKE $9 AND
        tgname NOT LIKE $10 AND
        tgname NOT LIKE $11 AND
        tgname NOT LIKE $12 AND
        tgname NOT LIKE $13 AND
        tgname NOT LIKE $14 OR
        tgname LIKE $15 
    )
ORDER BY
    table_name",0.19492299999999999,8,0.024365374999999998
"/*
set long 5000

column comment format a80

prompt SCRIPT: ORA_S01_bespoke_triggers_defined

prompt CHECK: list the bespoke triggers defined on the tables used in Geneva which do not have the standard names used in the Geneva product

col TRIGGER_NAME for a40
col TRIGGERING_EVENT for a40
col REFERENCING_NAMES for a33
col WHEN_CLAUSE for a100

select	*
from	all_triggers
where	owner = '%vSchemaOwner'
and    (trigger_name not like 'TRDA%'
and	trigger_name not like 'TRDB%'
and	trigger_name not like 'TRIA%'
and	trigger_name not like 'TRIB%'
and	trigger_name not like 'TRUA%'
and	trigger_name not like 'TRUB%')
or	trigger_name like '%\_%' escape '\'
order by table_name;

set long 80





##########################################################################
##########################################################################
*/
-- File :        S01_bespoke_triggers_defined.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script will list all of the bespoke triggers defined on
--               the tables used in Geneva which do not have the standard names
--               used in the Geneva product.
--
-- Author :      Jerry Alderson
--
-- Date :        12th November 2001
--
-- List bespoke triggers defined on tables that don't follow standard Geneva names
SELECT
    tgname AS trigger_name,
    CASE
        WHEN tgtype::integer & $1 = $2 THEN $3
        WHEN tgtype::integer & $4 = $5 THEN $6
        ELSE $7
    END AS triggering_event,
    tgargs AS referencing_names,
    tgqual AS when_clause,
    relname AS table_name
FROM
    pg_trigger
    JOIN pg_class ON pg_trigger.tgrelid = pg_class.oid
    JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE
    pg_namespace.nspname = $8  -- Replace with actual schema owner
    AND (
        tgname NOT LIKE $9 AND
        tgname NOT LIKE $10 AND
        tgname NOT LIKE $11 AND
        tgname NOT LIKE $12 AND
        tgname NOT LIKE $13 AND
        tgname NOT LIKE $14 OR
        tgname LIKE $15 
    )
ORDER BY
    table_name",0.19492299999999999,8,0.024365374999999998
"/*
set long 5000

column comment format a80

prompt SCRIPT: ORA_S01_bespoke_triggers_defined

prompt CHECK: list the bespoke triggers defined on the tables used in Geneva which do not have the standard names used in the Geneva product

col TRIGGER_NAME for a40
col TRIGGERING_EVENT for a40
col REFERENCING_NAMES for a33
col WHEN_CLAUSE for a100

select	*
from	all_triggers
where	owner = '%vSchemaOwner'
and    (trigger_name not like 'TRDA%'
and	trigger_name not like 'TRDB%'
and	trigger_name not like 'TRIA%'
and	trigger_name not like 'TRIB%'
and	trigger_name not like 'TRUA%'
and	trigger_name not like 'TRUB%')
or	trigger_name like '%\_%' escape '\'
order by table_name;

set long 80





##########################################################################
##########################################################################
*/
-- File :        S01_bespoke_triggers_defined.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script will list all of the bespoke triggers defined on
--               the tables used in Geneva which do not have the standard names
--               used in the Geneva product.
--
-- Author :      Jerry Alderson
--
-- Date :        12th November 2001
--
-- List bespoke triggers defined on tables that don't follow standard Geneva names
SELECT
    tgname AS trigger_name,
    CASE
        WHEN tgtype::integer & $1 = $2 THEN $3
        WHEN tgtype::integer & $4 = $5 THEN $6
        ELSE $7
    END AS triggering_event,
    tgargs AS referencing_names,
    tgqual AS when_clause,
    relname AS table_name
FROM
    pg_trigger
    JOIN pg_class ON pg_trigger.tgrelid = pg_class.oid
    JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE
    pg_namespace.nspname = $8  -- Replace with actual schema owner
    AND (
        tgname NOT LIKE $9 AND
        tgname NOT LIKE $10 AND
        tgname NOT LIKE $11 AND
        tgname NOT LIKE $12 AND
        tgname NOT LIKE $13 AND
        tgname NOT LIKE $14 OR
        tgname LIKE $15 
    )
ORDER BY
    table_name",0.19492299999999999,8,0.024365374999999998
"/*
set long 5000

column comment format a80

prompt SCRIPT: ORA_S01_bespoke_triggers_defined

prompt CHECK: list the bespoke triggers defined on the tables used in Geneva which do not have the standard names used in the Geneva product

col TRIGGER_NAME for a40
col TRIGGERING_EVENT for a40
col REFERENCING_NAMES for a33
col WHEN_CLAUSE for a100

select	*
from	all_triggers
where	owner = '%vSchemaOwner'
and    (trigger_name not like 'TRDA%'
and	trigger_name not like 'TRDB%'
and	trigger_name not like 'TRIA%'
and	trigger_name not like 'TRIB%'
and	trigger_name not like 'TRUA%'
and	trigger_name not like 'TRUB%')
or	trigger_name like '%\_%' escape '\'
order by table_name;

set long 80





##########################################################################
##########################################################################
*/
-- File :        S01_bespoke_triggers_defined.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script will list all of the bespoke triggers defined on
--               the tables used in Geneva which do not have the standard names
--               used in the Geneva product.
--
-- Author :      Jerry Alderson
--
-- Date :        12th November 2001
--
-- List bespoke triggers defined on tables that don't follow standard Geneva names
SELECT
    tgname AS trigger_name,
    CASE
        WHEN tgtype::integer & $1 = $2 THEN $3
        WHEN tgtype::integer & $4 = $5 THEN $6
        ELSE $7
    END AS triggering_event,
    tgargs AS referencing_names,
    tgqual AS when_clause,
    relname AS table_name
FROM
    pg_trigger
    JOIN pg_class ON pg_trigger.tgrelid = pg_class.oid
    JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE
    pg_namespace.nspname = $8  -- Replace with actual schema owner
    AND (
        tgname NOT LIKE $9 AND
        tgname NOT LIKE $10 AND
        tgname NOT LIKE $11 AND
        tgname NOT LIKE $12 AND
        tgname NOT LIKE $13 AND
        tgname NOT LIKE $14 OR
        tgname LIKE $15 
    )
ORDER BY
    table_name",0.19492299999999999,8,0.024365374999999998
"/*
set long 5000

column comment format a80

prompt SCRIPT: ORA_S01_bespoke_triggers_defined

prompt CHECK: list the bespoke triggers defined on the tables used in Geneva which do not have the standard names used in the Geneva product

col TRIGGER_NAME for a40
col TRIGGERING_EVENT for a40
col REFERENCING_NAMES for a33
col WHEN_CLAUSE for a100

select	*
from	all_triggers
where	owner = '%vSchemaOwner'
and    (trigger_name not like 'TRDA%'
and	trigger_name not like 'TRDB%'
and	trigger_name not like 'TRIA%'
and	trigger_name not like 'TRIB%'
and	trigger_name not like 'TRUA%'
and	trigger_name not like 'TRUB%')
or	trigger_name like '%\_%' escape '\'
order by table_name;

set long 80





##########################################################################
##########################################################################
*/
-- File :        S01_bespoke_triggers_defined.sql
--
-- Title :       Health-check data analysis script
--
-- Description : This script will list all of the bespoke triggers defined on
--               the tables used in Geneva which do not have the standard names
--               used in the Geneva product.
--
-- Author :      Jerry Alderson
--
-- Date :        12th November 2001
--
-- List bespoke triggers defined on tables that don't follow standard Geneva names
SELECT
    tgname AS trigger_name,
    CASE
        WHEN tgtype::integer & $1 = $2 THEN $3
        WHEN tgtype::integer & $4 = $5 THEN $6
        ELSE $7
    END AS triggering_event,
    tgargs AS referencing_names,
    tgqual AS when_clause,
    relname AS table_name
FROM
    pg_trigger
    JOIN pg_class ON pg_trigger.tgrelid = pg_class.oid
    JOIN pg_namespace ON pg_class.relnamespace = pg_namespace.oid
WHERE
    pg_namespace.nspname = $8  -- Replace with actual schema owner
    AND (
        tgname NOT LIKE $9 AND
        tgname NOT LIKE $10 AND
        tgname NOT LIKE $11 AND
        tgname NOT LIKE $12 AND
        tgname NOT LIKE $13 AND
        tgname NOT LIKE $14 OR
        tgname LIKE $15 
    )
ORDER BY
    table_name",0.19492299999999999,8,0.024365374999999998
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS size
FROM pg_tablespace
WHERE spcname NOT IN ($1, $2)  -- pg_default is analogous to SYSTEM
ORDER BY tablespace_name",0.19368999999999997,16,0.012105624999999998
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS size
FROM pg_tablespace
WHERE spcname NOT IN ($1, $2)  -- pg_default is analogous to SYSTEM
ORDER BY tablespace_name",0.19368999999999997,16,0.012105624999999998
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS size
FROM pg_tablespace
WHERE spcname NOT IN ($1, $2)  -- pg_default is analogous to SYSTEM
ORDER BY tablespace_name",0.19368999999999997,16,0.012105624999999998
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS size
FROM pg_tablespace
WHERE spcname NOT IN ($1, $2)  -- pg_default is analogous to SYSTEM
ORDER BY tablespace_name",0.19368999999999997,16,0.012105624999999998
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS size
FROM pg_tablespace
WHERE spcname NOT IN ($1, $2)  -- pg_default is analogous to SYSTEM
ORDER BY tablespace_name",0.19368999999999997,16,0.012105624999999998
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
	
END;
$$ LANGUAGE plpgsql",0.192278,1,0.192278
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
	
END;
$$ LANGUAGE plpgsql",0.192278,1,0.192278
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
	
END;
$$ LANGUAGE plpgsql",0.192278,1,0.192278
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
	
END;
$$ LANGUAGE plpgsql",0.192278,1,0.192278
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
-- top waits
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
-- Top active queries by sample count
filename := filepath||'top_queries_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT queryid, COUNT(*) AS active_samples
FROM ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY queryid
ORDER BY active_samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
	
	
END;
$$ LANGUAGE plpgsql",0.192278,1,0.192278
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
--ORDER BY samples DESC ) TO filepath||'top_waits_'||filename WITH CSV HEADER;
ORDER BY samples DESC ) TO '/home/postgres/app/log/123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.192272,1,0.192272
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
--ORDER BY samples DESC ) TO filepath||'top_waits_'||filename WITH CSV HEADER;
ORDER BY samples DESC ) TO '/home/postgres/app/log/123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.192272,1,0.192272
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
--ORDER BY samples DESC ) TO filepath||'top_waits_'||filename WITH CSV HEADER;
ORDER BY samples DESC ) TO '/home/postgres/app/log/123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.192272,1,0.192272
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
--ORDER BY samples DESC ) TO filepath||'top_waits_'||filename WITH CSV HEADER;
ORDER BY samples DESC ) TO '/home/postgres/app/log/123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.192272,1,0.192272
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
--ORDER BY samples DESC ) TO filepath||'top_waits_'||filename WITH CSV HEADER;
ORDER BY samples DESC ) TO '/home/postgres/app/log/123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.192272,1,0.192272
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated,
  a.attstorage,
  a.attcompression AS attcompression,
  CASE WHEN a.attstattarget=$2 THEN $3 ELSE a.attstattarget END AS attstattarget,
  pg_catalog.col_description(a.attrelid, a.attnum)
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $4 AND a.attnum > $5 AND NOT a.attisdropped
ORDER BY a.attnum",0.19162300000000002,1,0.19162300000000002
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated,
  a.attstorage,
  a.attcompression AS attcompression,
  CASE WHEN a.attstattarget=$2 THEN $3 ELSE a.attstattarget END AS attstattarget,
  pg_catalog.col_description(a.attrelid, a.attnum)
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $4 AND a.attnum > $5 AND NOT a.attisdropped
ORDER BY a.attnum",0.19162300000000002,1,0.19162300000000002
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated,
  a.attstorage,
  a.attcompression AS attcompression,
  CASE WHEN a.attstattarget=$2 THEN $3 ELSE a.attstattarget END AS attstattarget,
  pg_catalog.col_description(a.attrelid, a.attnum)
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $4 AND a.attnum > $5 AND NOT a.attisdropped
ORDER BY a.attnum",0.19162300000000002,1,0.19162300000000002
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated,
  a.attstorage,
  a.attcompression AS attcompression,
  CASE WHEN a.attstattarget=$2 THEN $3 ELSE a.attstattarget END AS attstattarget,
  pg_catalog.col_description(a.attrelid, a.attnum)
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $4 AND a.attnum > $5 AND NOT a.attisdropped
ORDER BY a.attnum",0.19162300000000002,1,0.19162300000000002
"SELECT a.attname,
  pg_catalog.format_type(a.atttypid, a.atttypmod),
  (SELECT pg_catalog.pg_get_expr(d.adbin, d.adrelid, $1)
   FROM pg_catalog.pg_attrdef d
   WHERE d.adrelid = a.attrelid AND d.adnum = a.attnum AND a.atthasdef),
  a.attnotnull,
  (SELECT c.collname FROM pg_catalog.pg_collation c, pg_catalog.pg_type t
   WHERE c.oid = a.attcollation AND t.oid = a.atttypid AND a.attcollation <> t.typcollation) AS attcollation,
  a.attidentity,
  a.attgenerated,
  a.attstorage,
  a.attcompression AS attcompression,
  CASE WHEN a.attstattarget=$2 THEN $3 ELSE a.attstattarget END AS attstattarget,
  pg_catalog.col_description(a.attrelid, a.attnum)
FROM pg_catalog.pg_attribute a
WHERE a.attrelid = $4 AND a.attnum > $5 AND NOT a.attisdropped
ORDER BY a.attnum",0.19162300000000002,1,0.19162300000000002
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
END;
$$ LANGUAGE plpgsql",0.185486,1,0.185486
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
END;
$$ LANGUAGE plpgsql",0.185486,1,0.185486
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
END;
$$ LANGUAGE plpgsql",0.185486,1,0.185486
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
END;
$$ LANGUAGE plpgsql",0.185486,1,0.185486
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
    EXECUTE format(
        'COPY (SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval ''5 minutes''
GROUP BY wait_event
ORDER BY samples DESC ) TO %filename WITH CSV HEADER',
        filename
    );
END;
$$ LANGUAGE plpgsql",0.185486,1,0.185486
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
COPY (SELECT wait_event, COUNT(*) AS samples
FROM ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits_123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.171032,1,0.171032
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
COPY (SELECT wait_event, COUNT(*) AS samples
FROM ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits_123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.171032,1,0.171032
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
COPY (SELECT wait_event, COUNT(*) AS samples
FROM ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits_123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.171032,1,0.171032
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
COPY (SELECT wait_event, COUNT(*) AS samples
FROM ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits_123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.171032,1,0.171032
"CREATE OR REPLACE FUNCTION statistics.dump_activity_snapshot()
RETURNS VOID AS $$
DECLARE
    filename TEXT;
	filepath TEXT := '/home/postgres/app/log/';
begin
filename := filepath||'top_waits_'||to_char(now(), 'YYYYMMDD_HH24MI') || '.csv';
COPY (SELECT wait_event, COUNT(*) AS samples
FROM ash_session_sample
WHERE sample_time > now() - interval '5 minutes'
GROUP BY wait_event
ORDER BY samples DESC ) TO '/home/postgres/app/log/top_waits_123.csv' WITH CSV HEADER;
END;
$$ LANGUAGE plpgsql",0.171032,1,0.171032
SELECT * FROM pg_stat_bgwriter,0.16002300000000003,16,0.010001437500000002
SELECT * FROM pg_stat_bgwriter,0.16002300000000003,16,0.010001437500000002
SELECT * FROM pg_stat_bgwriter,0.16002300000000003,16,0.010001437500000002
SELECT * FROM pg_stat_bgwriter,0.16002300000000003,16,0.010001437500000002
SELECT * FROM pg_stat_bgwriter,0.16002300000000003,16,0.010001437500000002
"SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ $1
ORDER BY 1",0.158944,4,0.039736
"SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ $1
ORDER BY 1",0.158944,4,0.039736
"SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ $1
ORDER BY 1",0.158944,4,0.039736
"SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ $1
ORDER BY 1",0.158944,4,0.039736
"SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ $1
ORDER BY 1",0.158944,4,0.039736
"SELECT n.nspname AS ""Name"",
  pg_catalog.pg_get_userbyid(n.nspowner) AS ""Owner""
FROM pg_catalog.pg_namespace n
WHERE n.nspname !~ $1 AND n.nspname <> $2
ORDER BY 1",0.145673,3,0.048557666666666666
"SELECT n.nspname AS ""Name"",
  pg_catalog.pg_get_userbyid(n.nspowner) AS ""Owner""
FROM pg_catalog.pg_namespace n
WHERE n.nspname !~ $1 AND n.nspname <> $2
ORDER BY 1",0.145673,3,0.048557666666666666
"SELECT n.nspname AS ""Name"",
  pg_catalog.pg_get_userbyid(n.nspowner) AS ""Owner""
FROM pg_catalog.pg_namespace n
WHERE n.nspname !~ $1 AND n.nspname <> $2
ORDER BY 1",0.145673,3,0.048557666666666666
"SELECT n.nspname AS ""Name"",
  pg_catalog.pg_get_userbyid(n.nspowner) AS ""Owner""
FROM pg_catalog.pg_namespace n
WHERE n.nspname !~ $1 AND n.nspname <> $2
ORDER BY 1",0.145673,3,0.048557666666666666
"SELECT n.nspname AS ""Name"",
  pg_catalog.pg_get_userbyid(n.nspowner) AS ""Owner""
FROM pg_catalog.pg_namespace n
WHERE n.nspname !~ $1 AND n.nspname <> $2
ORDER BY 1",0.145673,3,0.048557666666666666
"SELECT pubname
     , $1
     , $2
FROM pg_catalog.pg_publication p
     JOIN pg_catalog.pg_publication_namespace pn ON p.oid = pn.pnpubid
     JOIN pg_catalog.pg_class pc ON pc.relnamespace = pn.pnnspid
WHERE pc.oid =$3 and pg_catalog.pg_relation_is_publishable($4)
UNION
SELECT pubname
     , pg_get_expr(pr.prqual, c.oid)
     , (CASE WHEN pr.prattrs IS NOT NULL THEN
         (SELECT string_agg(attname, $5)
           FROM pg_catalog.generate_series($6, pg_catalog.array_upper(pr.prattrs::pg_catalog.int2[], $7)) s,
                pg_catalog.pg_attribute
          WHERE attrelid = pr.prrelid AND attnum = prattrs[s])
        ELSE $8 END) FROM pg_catalog.pg_publication p
     JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
     JOIN pg_catalog.pg_class c ON c.oid = pr.prrelid
WHERE pr.prrelid = $9
UNION
SELECT pubname
     , $10
     , $11
FROM pg_catalog.pg_publication p
WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable($12)
ORDER BY 1",0.136197,7,0.019456714285714286
"SELECT pubname
     , $1
     , $2
FROM pg_catalog.pg_publication p
     JOIN pg_catalog.pg_publication_namespace pn ON p.oid = pn.pnpubid
     JOIN pg_catalog.pg_class pc ON pc.relnamespace = pn.pnnspid
WHERE pc.oid =$3 and pg_catalog.pg_relation_is_publishable($4)
UNION
SELECT pubname
     , pg_get_expr(pr.prqual, c.oid)
     , (CASE WHEN pr.prattrs IS NOT NULL THEN
         (SELECT string_agg(attname, $5)
           FROM pg_catalog.generate_series($6, pg_catalog.array_upper(pr.prattrs::pg_catalog.int2[], $7)) s,
                pg_catalog.pg_attribute
          WHERE attrelid = pr.prrelid AND attnum = prattrs[s])
        ELSE $8 END) FROM pg_catalog.pg_publication p
     JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
     JOIN pg_catalog.pg_class c ON c.oid = pr.prrelid
WHERE pr.prrelid = $9
UNION
SELECT pubname
     , $10
     , $11
FROM pg_catalog.pg_publication p
WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable($12)
ORDER BY 1",0.136197,7,0.019456714285714286
"SELECT pubname
     , $1
     , $2
FROM pg_catalog.pg_publication p
     JOIN pg_catalog.pg_publication_namespace pn ON p.oid = pn.pnpubid
     JOIN pg_catalog.pg_class pc ON pc.relnamespace = pn.pnnspid
WHERE pc.oid =$3 and pg_catalog.pg_relation_is_publishable($4)
UNION
SELECT pubname
     , pg_get_expr(pr.prqual, c.oid)
     , (CASE WHEN pr.prattrs IS NOT NULL THEN
         (SELECT string_agg(attname, $5)
           FROM pg_catalog.generate_series($6, pg_catalog.array_upper(pr.prattrs::pg_catalog.int2[], $7)) s,
                pg_catalog.pg_attribute
          WHERE attrelid = pr.prrelid AND attnum = prattrs[s])
        ELSE $8 END) FROM pg_catalog.pg_publication p
     JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
     JOIN pg_catalog.pg_class c ON c.oid = pr.prrelid
WHERE pr.prrelid = $9
UNION
SELECT pubname
     , $10
     , $11
FROM pg_catalog.pg_publication p
WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable($12)
ORDER BY 1",0.136197,7,0.019456714285714286
"SELECT pubname
     , $1
     , $2
FROM pg_catalog.pg_publication p
     JOIN pg_catalog.pg_publication_namespace pn ON p.oid = pn.pnpubid
     JOIN pg_catalog.pg_class pc ON pc.relnamespace = pn.pnnspid
WHERE pc.oid =$3 and pg_catalog.pg_relation_is_publishable($4)
UNION
SELECT pubname
     , pg_get_expr(pr.prqual, c.oid)
     , (CASE WHEN pr.prattrs IS NOT NULL THEN
         (SELECT string_agg(attname, $5)
           FROM pg_catalog.generate_series($6, pg_catalog.array_upper(pr.prattrs::pg_catalog.int2[], $7)) s,
                pg_catalog.pg_attribute
          WHERE attrelid = pr.prrelid AND attnum = prattrs[s])
        ELSE $8 END) FROM pg_catalog.pg_publication p
     JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
     JOIN pg_catalog.pg_class c ON c.oid = pr.prrelid
WHERE pr.prrelid = $9
UNION
SELECT pubname
     , $10
     , $11
FROM pg_catalog.pg_publication p
WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable($12)
ORDER BY 1",0.136197,7,0.019456714285714286
"SELECT pubname
     , $1
     , $2
FROM pg_catalog.pg_publication p
     JOIN pg_catalog.pg_publication_namespace pn ON p.oid = pn.pnpubid
     JOIN pg_catalog.pg_class pc ON pc.relnamespace = pn.pnnspid
WHERE pc.oid =$3 and pg_catalog.pg_relation_is_publishable($4)
UNION
SELECT pubname
     , pg_get_expr(pr.prqual, c.oid)
     , (CASE WHEN pr.prattrs IS NOT NULL THEN
         (SELECT string_agg(attname, $5)
           FROM pg_catalog.generate_series($6, pg_catalog.array_upper(pr.prattrs::pg_catalog.int2[], $7)) s,
                pg_catalog.pg_attribute
          WHERE attrelid = pr.prrelid AND attnum = prattrs[s])
        ELSE $8 END) FROM pg_catalog.pg_publication p
     JOIN pg_catalog.pg_publication_rel pr ON p.oid = pr.prpubid
     JOIN pg_catalog.pg_class c ON c.oid = pr.prrelid
WHERE pr.prrelid = $9
UNION
SELECT pubname
     , $10
     , $11
FROM pg_catalog.pg_publication p
WHERE p.puballtables AND pg_catalog.pg_relation_is_publishable($12)
ORDER BY 1",0.136197,7,0.019456714285714286
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS total_size,
       pg_size_pretty(sum(pg_table_size(c.oid))) AS used_size
FROM pg_tablespace spc
JOIN pg_class c ON c.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1) -- or your namespace
WHERE spcname NOT IN ($2, $3)
GROUP BY spcname
ORDER BY spcname",0.128675,8,0.016084374999999998
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS total_size,
       pg_size_pretty(sum(pg_table_size(c.oid))) AS used_size
FROM pg_tablespace spc
JOIN pg_class c ON c.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1) -- or your namespace
WHERE spcname NOT IN ($2, $3)
GROUP BY spcname
ORDER BY spcname",0.128675,8,0.016084374999999998
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS total_size,
       pg_size_pretty(sum(pg_table_size(c.oid))) AS used_size
FROM pg_tablespace spc
JOIN pg_class c ON c.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1) -- or your namespace
WHERE spcname NOT IN ($2, $3)
GROUP BY spcname
ORDER BY spcname",0.128675,8,0.016084374999999998
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS total_size,
       pg_size_pretty(sum(pg_table_size(c.oid))) AS used_size
FROM pg_tablespace spc
JOIN pg_class c ON c.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1) -- or your namespace
WHERE spcname NOT IN ($2, $3)
GROUP BY spcname
ORDER BY spcname",0.128675,8,0.016084374999999998
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS total_size,
       pg_size_pretty(sum(pg_table_size(c.oid))) AS used_size
FROM pg_tablespace spc
JOIN pg_class c ON c.relnamespace = (SELECT oid FROM pg_namespace WHERE nspname = $1) -- or your namespace
WHERE spcname NOT IN ($2, $3)
GROUP BY spcname
ORDER BY spcname",0.128675,8,0.016084374999999998
SELECT * FROM pg_replication_slots,0.123087,8,0.015385875
SELECT * FROM pg_replication_slots,0.123087,8,0.015385875
SELECT * FROM pg_replication_slots,0.123087,8,0.015385875
SELECT * FROM pg_replication_slots,0.123087,8,0.015385875
SELECT * FROM pg_replication_slots,0.123087,8,0.015385875
"SELECT n.nspname AS ""Name"",
  pg_catalog.pg_get_userbyid(n.nspowner) AS ""Owner""
FROM pg_catalog.pg_namespace n
WHERE n.nspname !~ $1 AND n.nspname <> $2
ORDER BY 1",0.12215,3,0.040716666666666665
"SELECT n.nspname AS ""Name"",
  pg_catalog.pg_get_userbyid(n.nspowner) AS ""Owner""
FROM pg_catalog.pg_namespace n
WHERE n.nspname !~ $1 AND n.nspname <> $2
ORDER BY 1",0.12215,3,0.040716666666666665
"SELECT n.nspname AS ""Name"",
  pg_catalog.pg_get_userbyid(n.nspowner) AS ""Owner""
FROM pg_catalog.pg_namespace n
WHERE n.nspname !~ $1 AND n.nspname <> $2
ORDER BY 1",0.12215,3,0.040716666666666665
"SELECT n.nspname AS ""Name"",
  pg_catalog.pg_get_userbyid(n.nspowner) AS ""Owner""
FROM pg_catalog.pg_namespace n
WHERE n.nspname !~ $1 AND n.nspname <> $2
ORDER BY 1",0.12215,3,0.040716666666666665
"SELECT n.nspname AS ""Name"",
  pg_catalog.pg_get_userbyid(n.nspowner) AS ""Owner""
FROM pg_catalog.pg_namespace n
WHERE n.nspname !~ $1 AND n.nspname <> $2
ORDER BY 1",0.12215,3,0.040716666666666665
"SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $1 ELSE $2 END AS cycle_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($3, $4)
ORDER BY
    sequence_owner, sequence_name",0.12112800000000001,8,0.015141000000000002
"SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $1 ELSE $2 END AS cycle_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($3, $4)
ORDER BY
    sequence_owner, sequence_name",0.12112800000000001,8,0.015141000000000002
"SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $1 ELSE $2 END AS cycle_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($3, $4)
ORDER BY
    sequence_owner, sequence_name",0.12112800000000001,8,0.015141000000000002
"SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $1 ELSE $2 END AS cycle_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($3, $4)
ORDER BY
    sequence_owner, sequence_name",0.12112800000000001,8,0.015141000000000002
"SELECT
    schemaname AS sequence_owner,
    sequencename AS sequence_name,
    min_value,
    max_value,
    increment_by,
    CASE WHEN cycle THEN $1 ELSE $2 END AS cycle_flag,
    cache_size,
    last_value AS last_number
FROM
    pg_sequences
WHERE
    schemaname NOT IN ($3, $4)
ORDER BY
    sequence_owner, sequence_name",0.12112800000000001,8,0.015141000000000002
alter user testuser superuser,0.118436,1,0.118436
alter user testuser superuser,0.118436,1,0.118436
alter user testuser superuser,0.118436,1,0.118436
alter user testuser superuser,0.118436,1,0.118436
alter user testuser superuser,0.118436,1,0.118436
"SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, $1 AS relhasoids, c.relispartition, pg_catalog.array_to_string(c.reloptions || array(select $2 || x from pg_catalog.unnest(tc.reloptions) x), $3)
, c.reltablespace, CASE WHEN c.reloftype = $4 THEN $5 ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
FROM pg_catalog.pg_class c
 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
WHERE c.oid = $6",0.11460800000000002,4,0.028652
"SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, $1 AS relhasoids, c.relispartition, pg_catalog.array_to_string(c.reloptions || array(select $2 || x from pg_catalog.unnest(tc.reloptions) x), $3)
, c.reltablespace, CASE WHEN c.reloftype = $4 THEN $5 ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
FROM pg_catalog.pg_class c
 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
WHERE c.oid = $6",0.11460800000000002,4,0.028652
"SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, $1 AS relhasoids, c.relispartition, pg_catalog.array_to_string(c.reloptions || array(select $2 || x from pg_catalog.unnest(tc.reloptions) x), $3)
, c.reltablespace, CASE WHEN c.reloftype = $4 THEN $5 ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
FROM pg_catalog.pg_class c
 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
WHERE c.oid = $6",0.11460800000000002,4,0.028652
"SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, $1 AS relhasoids, c.relispartition, pg_catalog.array_to_string(c.reloptions || array(select $2 || x from pg_catalog.unnest(tc.reloptions) x), $3)
, c.reltablespace, CASE WHEN c.reloftype = $4 THEN $5 ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
FROM pg_catalog.pg_class c
 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
WHERE c.oid = $6",0.11460800000000002,4,0.028652
"SELECT c.relchecks, c.relkind, c.relhasindex, c.relhasrules, c.relhastriggers, c.relrowsecurity, c.relforcerowsecurity, $1 AS relhasoids, c.relispartition, pg_catalog.array_to_string(c.reloptions || array(select $2 || x from pg_catalog.unnest(tc.reloptions) x), $3)
, c.reltablespace, CASE WHEN c.reloftype = $4 THEN $5 ELSE c.reloftype::pg_catalog.regtype::pg_catalog.text END, c.relpersistence, c.relreplident, am.amname
FROM pg_catalog.pg_class c
 LEFT JOIN pg_catalog.pg_class tc ON (c.reltoastrelid = tc.oid)
LEFT JOIN pg_catalog.pg_am am ON (c.relam = am.oid)
WHERE c.oid = $6",0.11460800000000002,4,0.028652
drop schema testschema,0.114042,1,0.114042
drop schema testschema,0.114042,1,0.114042
drop schema testschema,0.114042,1,0.114042
drop schema testschema,0.114042,1,0.114042
drop schema testschema,0.114042,1,0.114042
drop function add_numbers,0.113419,1,0.113419
drop function add_numbers,0.113419,1,0.113419
drop function add_numbers,0.113419,1,0.113419
drop function add_numbers,0.113419,1,0.113419
drop function add_numbers,0.113419,1,0.113419
"SELECT to_char(current_timestamp, $1)",0.108649,2,0.0543245
"SELECT to_char(current_timestamp, $1)",0.108649,2,0.0543245
"SELECT to_char(current_timestamp, $1)",0.108649,2,0.0543245
"SELECT to_char(current_timestamp, $1)",0.108649,2,0.0543245
"SELECT to_char(current_timestamp, $1)",0.108649,2,0.0543245
DO $$ begin raise notice 'CHECK: list the software installed (versions and options)'; end; $$,0.107251,2,0.0536255
DO $$ begin raise notice 'CHECK: list the software installed (versions and options)'; end; $$,0.107251,2,0.0536255
DO $$ begin raise notice 'CHECK: list the software installed (versions and options)'; end; $$,0.107251,2,0.0536255
DO $$ begin raise notice 'CHECK: list the software installed (versions and options)'; end; $$,0.107251,2,0.0536255
DO $$ begin raise notice 'CHECK: list the software installed (versions and options)'; end; $$,0.107251,2,0.0536255
select * from statistics.temp_database_connections,0.105406,1,0.105406
select * from statistics.temp_database_connections,0.105406,1,0.105406
select * from statistics.temp_database_connections,0.105406,1,0.105406
select * from statistics.temp_database_connections,0.105406,1,0.105406
select * from statistics.temp_database_connections,0.105406,1,0.105406
select count(*) from pgbench_branches,0.10063000000000001,4,0.0251575
select count(*) from pgbench_branches,0.10063000000000001,4,0.0251575
select count(*) from pgbench_branches,0.10063000000000001,4,0.0251575
select count(*) from pgbench_branches,0.10063000000000001,4,0.0251575
select count(*) from pgbench_branches,0.10063000000000001,4,0.0251575
"SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval $1
GROUP BY wait_event
ORDER BY samples DESC",0.095765,3,0.03192166666666667
"SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval $1
GROUP BY wait_event
ORDER BY samples DESC",0.095765,3,0.03192166666666667
"SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval $1
GROUP BY wait_event
ORDER BY samples DESC",0.095765,3,0.03192166666666667
"SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval $1
GROUP BY wait_event
ORDER BY samples DESC",0.095765,3,0.03192166666666667
"SELECT wait_event, COUNT(*) AS samples
FROM statistics.ash_session_sample
WHERE sample_time > now() - interval $1
GROUP BY wait_event
ORDER BY samples DESC",0.095765,3,0.03192166666666667
create schema statistics,0.094452,1,0.094452
create schema statistics,0.094452,1,0.094452
create schema statistics,0.094452,1,0.094452
create schema statistics,0.094452,1,0.094452
create schema statistics,0.094452,1,0.094452
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.086771,10,0.008677100000000002
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.086771,10,0.008677100000000002
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.086771,10,0.008677100000000002
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.086771,10,0.008677100000000002
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.086771,10,0.008677100000000002
select count($1) from statistics.ash_session_sample,0.081647,3,0.02721566666666667
select count($1) from statistics.ash_session_sample,0.081647,3,0.02721566666666667
select count($1) from statistics.ash_session_sample,0.081647,3,0.02721566666666667
select count($1) from statistics.ash_session_sample,0.081647,3,0.02721566666666667
select count($1) from statistics.ash_session_sample,0.081647,3,0.02721566666666667
DO $$ begin raise notice 'CHECK: list pg_settings'; end; $$,0.078981,2,0.0394905
DO $$ begin raise notice 'CHECK: list pg_settings'; end; $$,0.078981,2,0.0394905
DO $$ begin raise notice 'CHECK: list pg_settings'; end; $$,0.078981,2,0.0394905
DO $$ begin raise notice 'CHECK: list pg_settings'; end; $$,0.078981,2,0.0394905
DO $$ begin raise notice 'CHECK: list pg_settings'; end; $$,0.078981,2,0.0394905
DO $$ begin raise notice 'CHECK: list pg_file_settings'; end; $$,0.075502,2,0.037751
DO $$ begin raise notice 'CHECK: list pg_file_settings'; end; $$,0.075502,2,0.037751
DO $$ begin raise notice 'CHECK: list pg_file_settings'; end; $$,0.075502,2,0.037751
DO $$ begin raise notice 'CHECK: list pg_file_settings'; end; $$,0.075502,2,0.037751
DO $$ begin raise notice 'CHECK: list pg_file_settings'; end; $$,0.075502,2,0.037751
select * from statistics.query_details,0.069435,3,0.023145000000000002
select * from statistics.query_details,0.069435,3,0.023145000000000002
select * from statistics.query_details,0.069435,3,0.023145000000000002
select * from statistics.query_details,0.069435,3,0.023145000000000002
select * from statistics.query_details,0.069435,3,0.023145000000000002
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS size
FROM pg_tablespace
WHERE spcname LIKE $1
ORDER BY tablespace_name",0.06806899999999999,8,0.008508625
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS size
FROM pg_tablespace
WHERE spcname LIKE $1
ORDER BY tablespace_name",0.06806899999999999,8,0.008508625
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS size
FROM pg_tablespace
WHERE spcname LIKE $1
ORDER BY tablespace_name",0.06806899999999999,8,0.008508625
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS size
FROM pg_tablespace
WHERE spcname LIKE $1
ORDER BY tablespace_name",0.06806899999999999,8,0.008508625
"SELECT spcname AS tablespace_name,
       pg_size_pretty(pg_tablespace_size(spcname)) AS size
FROM pg_tablespace
WHERE spcname LIKE $1
ORDER BY tablespace_name",0.06806899999999999,8,0.008508625
select * from statistics.temp_blocked_sessions,0.06797800000000001,1,0.06797800000000001
select * from statistics.temp_blocked_sessions,0.06797800000000001,1,0.06797800000000001
select * from statistics.temp_blocked_sessions,0.06797800000000001,1,0.06797800000000001
select * from statistics.temp_blocked_sessions,0.06797800000000001,1,0.06797800000000001
select * from statistics.temp_blocked_sessions,0.06797800000000001,1,0.06797800000000001
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.064972,10,0.006497200000000001
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.064972,10,0.006497200000000001
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.064972,10,0.006497200000000001
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.064972,10,0.006497200000000001
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.064972,10,0.006497200000000001
DO $$ begin raise notice 'CHECK: list the databases'; end; $$,0.064075,2,0.0320375
DO $$ begin raise notice 'CHECK: list the databases'; end; $$,0.064075,2,0.0320375
DO $$ begin raise notice 'CHECK: list the databases'; end; $$,0.064075,2,0.0320375
DO $$ begin raise notice 'CHECK: list the databases'; end; $$,0.064075,2,0.0320375
DO $$ begin raise notice 'CHECK: list the databases'; end; $$,0.064075,2,0.0320375
select count($1) from statistics.ash_wait_sampling_sample,0.062553,2,0.0312765
select count($1) from statistics.ash_wait_sampling_sample,0.062553,2,0.0312765
select count($1) from statistics.ash_wait_sampling_sample,0.062553,2,0.0312765
select count($1) from statistics.ash_wait_sampling_sample,0.062553,2,0.0312765
select count($1) from statistics.ash_wait_sampling_sample,0.062553,2,0.0312765
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.060258,10,0.006025800000000001
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.060258,10,0.006025800000000001
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.060258,10,0.006025800000000001
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.060258,10,0.006025800000000001
"insert into pgbench_branches(bid,bbalance) values($1,$2)",0.060258,10,0.006025800000000001
"SELECT
  d.datname as ""Name"",
  pg_catalog.pg_get_userbyid(d.datdba) as ""Owner"",
  pg_catalog.pg_encoding_to_char(d.encoding) as ""Encoding"",
  CASE d.datlocprovider WHEN $1 THEN $2 WHEN $3 THEN $4 END AS ""Locale Provider"",
  d.datcollate as ""Collate"",
  d.datctype as ""Ctype"",
  d.daticulocale as ""ICU Locale"",
  d.daticurules as ""ICU Rules"",
  pg_catalog.array_to_string(d.datacl, $5) AS ""Access privileges""
FROM pg_catalog.pg_database d
ORDER BY 1",0.058915999999999996,2,0.029457999999999998
"SELECT
  d.datname as ""Name"",
  pg_catalog.pg_get_userbyid(d.datdba) as ""Owner"",
  pg_catalog.pg_encoding_to_char(d.encoding) as ""Encoding"",
  CASE d.datlocprovider WHEN $1 THEN $2 WHEN $3 THEN $4 END AS ""Locale Provider"",
  d.datcollate as ""Collate"",
  d.datctype as ""Ctype"",
  d.daticulocale as ""ICU Locale"",
  d.daticurules as ""ICU Rules"",
  pg_catalog.array_to_string(d.datacl, $5) AS ""Access privileges""
FROM pg_catalog.pg_database d
ORDER BY 1",0.058915999999999996,2,0.029457999999999998
"SELECT
  d.datname as ""Name"",
  pg_catalog.pg_get_userbyid(d.datdba) as ""Owner"",
  pg_catalog.pg_encoding_to_char(d.encoding) as ""Encoding"",
  CASE d.datlocprovider WHEN $1 THEN $2 WHEN $3 THEN $4 END AS ""Locale Provider"",
  d.datcollate as ""Collate"",
  d.datctype as ""Ctype"",
  d.daticulocale as ""ICU Locale"",
  d.daticurules as ""ICU Rules"",
  pg_catalog.array_to_string(d.datacl, $5) AS ""Access privileges""
FROM pg_catalog.pg_database d
ORDER BY 1",0.058915999999999996,2,0.029457999999999998
"SELECT
  d.datname as ""Name"",
  pg_catalog.pg_get_userbyid(d.datdba) as ""Owner"",
  pg_catalog.pg_encoding_to_char(d.encoding) as ""Encoding"",
  CASE d.datlocprovider WHEN $1 THEN $2 WHEN $3 THEN $4 END AS ""Locale Provider"",
  d.datcollate as ""Collate"",
  d.datctype as ""Ctype"",
  d.daticulocale as ""ICU Locale"",
  d.daticurules as ""ICU Rules"",
  pg_catalog.array_to_string(d.datacl, $5) AS ""Access privileges""
FROM pg_catalog.pg_database d
ORDER BY 1",0.058915999999999996,2,0.029457999999999998
"SELECT
  d.datname as ""Name"",
  pg_catalog.pg_get_userbyid(d.datdba) as ""Owner"",
  pg_catalog.pg_encoding_to_char(d.encoding) as ""Encoding"",
  CASE d.datlocprovider WHEN $1 THEN $2 WHEN $3 THEN $4 END AS ""Locale Provider"",
  d.datcollate as ""Collate"",
  d.datctype as ""Ctype"",
  d.daticulocale as ""ICU Locale"",
  d.daticurules as ""ICU Rules"",
  pg_catalog.array_to_string(d.datacl, $5) AS ""Access privileges""
FROM pg_catalog.pg_database d
ORDER BY 1",0.058915999999999996,2,0.029457999999999998
"SELECT c.oid::pg_catalog.regclass, c.relkind, inhdetachpending, pg_catalog.pg_get_expr(c.relpartbound, c.oid)
FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
WHERE c.oid = i.inhrelid AND i.inhparent = $1
ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = $2, c.oid::pg_catalog.regclass::pg_catalog.text",0.057328,7,0.008189714285714285
"SELECT c.oid::pg_catalog.regclass, c.relkind, inhdetachpending, pg_catalog.pg_get_expr(c.relpartbound, c.oid)
FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
WHERE c.oid = i.inhrelid AND i.inhparent = $1
ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = $2, c.oid::pg_catalog.regclass::pg_catalog.text",0.057328,7,0.008189714285714285
"SELECT c.oid::pg_catalog.regclass, c.relkind, inhdetachpending, pg_catalog.pg_get_expr(c.relpartbound, c.oid)
FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
WHERE c.oid = i.inhrelid AND i.inhparent = $1
ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = $2, c.oid::pg_catalog.regclass::pg_catalog.text",0.057328,7,0.008189714285714285
"SELECT c.oid::pg_catalog.regclass, c.relkind, inhdetachpending, pg_catalog.pg_get_expr(c.relpartbound, c.oid)
FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
WHERE c.oid = i.inhrelid AND i.inhparent = $1
ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = $2, c.oid::pg_catalog.regclass::pg_catalog.text",0.057328,7,0.008189714285714285
"SELECT c.oid::pg_catalog.regclass, c.relkind, inhdetachpending, pg_catalog.pg_get_expr(c.relpartbound, c.oid)
FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
WHERE c.oid = i.inhrelid AND i.inhparent = $1
ORDER BY pg_catalog.pg_get_expr(c.relpartbound, c.oid) = $2, c.oid::pg_catalog.regclass::pg_catalog.text",0.057328,7,0.008189714285714285
"SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace::pg_catalog.text AS nsp, stxname,
pg_catalog.pg_get_statisticsobjdef_columns(oid) AS columns,
  $1 = any(stxkind) AS ndist_enabled,
  $2 = any(stxkind) AS deps_enabled,
  $3 = any(stxkind) AS mcv_enabled,
stxstattarget
FROM pg_catalog.pg_statistic_ext
WHERE stxrelid = $4
ORDER BY nsp, stxname",0.055149,7,0.007878428571428571
"SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace::pg_catalog.text AS nsp, stxname,
pg_catalog.pg_get_statisticsobjdef_columns(oid) AS columns,
  $1 = any(stxkind) AS ndist_enabled,
  $2 = any(stxkind) AS deps_enabled,
  $3 = any(stxkind) AS mcv_enabled,
stxstattarget
FROM pg_catalog.pg_statistic_ext
WHERE stxrelid = $4
ORDER BY nsp, stxname",0.055149,7,0.007878428571428571
"SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace::pg_catalog.text AS nsp, stxname,
pg_catalog.pg_get_statisticsobjdef_columns(oid) AS columns,
  $1 = any(stxkind) AS ndist_enabled,
  $2 = any(stxkind) AS deps_enabled,
  $3 = any(stxkind) AS mcv_enabled,
stxstattarget
FROM pg_catalog.pg_statistic_ext
WHERE stxrelid = $4
ORDER BY nsp, stxname",0.055149,7,0.007878428571428571
"SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace::pg_catalog.text AS nsp, stxname,
pg_catalog.pg_get_statisticsobjdef_columns(oid) AS columns,
  $1 = any(stxkind) AS ndist_enabled,
  $2 = any(stxkind) AS deps_enabled,
  $3 = any(stxkind) AS mcv_enabled,
stxstattarget
FROM pg_catalog.pg_statistic_ext
WHERE stxrelid = $4
ORDER BY nsp, stxname",0.055149,7,0.007878428571428571
"SELECT oid, stxrelid::pg_catalog.regclass, stxnamespace::pg_catalog.regnamespace::pg_catalog.text AS nsp, stxname,
pg_catalog.pg_get_statisticsobjdef_columns(oid) AS columns,
  $1 = any(stxkind) AS ndist_enabled,
  $2 = any(stxkind) AS deps_enabled,
  $3 = any(stxkind) AS mcv_enabled,
stxstattarget
FROM pg_catalog.pg_statistic_ext
WHERE stxrelid = $4
ORDER BY nsp, stxname",0.055149,7,0.007878428571428571
"SELECT datname, oid
FROM pg_database",0.053929000000000005,8,0.006741125000000001
"SELECT datname, oid
FROM pg_database",0.053929000000000005,8,0.006741125000000001
"SELECT datname, oid
FROM pg_database",0.053929000000000005,8,0.006741125000000001
"SELECT datname, oid
FROM pg_database",0.053929000000000005,8,0.006741125000000001
"SELECT datname, oid
FROM pg_database",0.053929000000000005,8,0.006741125000000001
"SELECT spcname AS tablespace_name,
       pg_tablespace_location(spc.oid) AS location
FROM pg_tablespace spc
WHERE spcname NOT IN ($1, $2)
ORDER BY tablespace_name",0.05282799999999999,8,0.0066035
"SELECT spcname AS tablespace_name,
       pg_tablespace_location(spc.oid) AS location
FROM pg_tablespace spc
WHERE spcname NOT IN ($1, $2)
ORDER BY tablespace_name",0.05282799999999999,8,0.0066035
"SELECT spcname AS tablespace_name,
       pg_tablespace_location(spc.oid) AS location
FROM pg_tablespace spc
WHERE spcname NOT IN ($1, $2)
ORDER BY tablespace_name",0.05282799999999999,8,0.0066035
"SELECT spcname AS tablespace_name,
       pg_tablespace_location(spc.oid) AS location
FROM pg_tablespace spc
WHERE spcname NOT IN ($1, $2)
ORDER BY tablespace_name",0.05282799999999999,8,0.0066035
"SELECT spcname AS tablespace_name,
       pg_tablespace_location(spc.oid) AS location
FROM pg_tablespace spc
WHERE spcname NOT IN ($1, $2)
ORDER BY tablespace_name",0.05282799999999999,8,0.0066035
select count(*) from pgbench_branches,0.050296999999999994,2,0.025148499999999997
select count(*) from pgbench_branches,0.050296999999999994,2,0.025148499999999997
select count(*) from pgbench_branches,0.050296999999999994,2,0.025148499999999997
select count(*) from pgbench_branches,0.050296999999999994,2,0.025148499999999997
select count(*) from pgbench_branches,0.050296999999999994,2,0.025148499999999997
SELECT version(),0.050101999999999994,8,0.00626275
SELECT version(),0.050101999999999994,8,0.00626275
SELECT version(),0.050101999999999994,8,0.00626275
SELECT version(),0.050101999999999994,8,0.00626275
SELECT version(),0.050101999999999994,8,0.00626275
"SELECT
    reltoast.relname AS toast_table,
    pg_total_relation_size(reltoast.oid) AS total_toast_size_bytes
FROM
    pg_class rel
JOIN pg_namespace n ON n.oid = rel.relnamespace
JOIN pg_class reltoast ON rel.reltoastrelid = reltoast.oid
WHERE
    n.nspname = $1
    AND rel.relname = $2",0.049633000000000004,8,0.006204125
"SELECT
    reltoast.relname AS toast_table,
    pg_total_relation_size(reltoast.oid) AS total_toast_size_bytes
FROM
    pg_class rel
JOIN pg_namespace n ON n.oid = rel.relnamespace
JOIN pg_class reltoast ON rel.reltoastrelid = reltoast.oid
WHERE
    n.nspname = $1
    AND rel.relname = $2",0.049633000000000004,8,0.006204125
"SELECT
    reltoast.relname AS toast_table,
    pg_total_relation_size(reltoast.oid) AS total_toast_size_bytes
FROM
    pg_class rel
JOIN pg_namespace n ON n.oid = rel.relnamespace
JOIN pg_class reltoast ON rel.reltoastrelid = reltoast.oid
WHERE
    n.nspname = $1
    AND rel.relname = $2",0.049633000000000004,8,0.006204125
"SELECT
    reltoast.relname AS toast_table,
    pg_total_relation_size(reltoast.oid) AS total_toast_size_bytes
FROM
    pg_class rel
JOIN pg_namespace n ON n.oid = rel.relnamespace
JOIN pg_class reltoast ON rel.reltoastrelid = reltoast.oid
WHERE
    n.nspname = $1
    AND rel.relname = $2",0.049633000000000004,8,0.006204125
"SELECT
    reltoast.relname AS toast_table,
    pg_total_relation_size(reltoast.oid) AS total_toast_size_bytes
FROM
    pg_class rel
JOIN pg_namespace n ON n.oid = rel.relnamespace
JOIN pg_class reltoast ON rel.reltoastrelid = reltoast.oid
WHERE
    n.nspname = $1
    AND rel.relname = $2",0.049633000000000004,8,0.006204125
"SELECT c.oid::pg_catalog.regclass
FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
WHERE c.oid = i.inhparent AND i.inhrelid = $1
  AND c.relkind != $2 AND c.relkind != $3
ORDER BY inhseqno",0.049413,7,0.007058999999999999
"SELECT c.oid::pg_catalog.regclass
FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
WHERE c.oid = i.inhparent AND i.inhrelid = $1
  AND c.relkind != $2 AND c.relkind != $3
ORDER BY inhseqno",0.049413,7,0.007058999999999999
"SELECT c.oid::pg_catalog.regclass
FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
WHERE c.oid = i.inhparent AND i.inhrelid = $1
  AND c.relkind != $2 AND c.relkind != $3
ORDER BY inhseqno",0.049413,7,0.007058999999999999
"SELECT c.oid::pg_catalog.regclass
FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
WHERE c.oid = i.inhparent AND i.inhrelid = $1
  AND c.relkind != $2 AND c.relkind != $3
ORDER BY inhseqno",0.049413,7,0.007058999999999999
"SELECT c.oid::pg_catalog.regclass
FROM pg_catalog.pg_class c, pg_catalog.pg_inherits i
WHERE c.oid = i.inhparent AND i.inhrelid = $1
  AND c.relkind != $2 AND c.relkind != $3
ORDER BY inhseqno",0.049413,7,0.007058999999999999
"SELECT COALESCE(state,$1), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state",0.049353,1,0.049353
"SELECT COALESCE(state,$1), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state",0.049353,1,0.049353
"SELECT COALESCE(state,$1), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state",0.049353,1,0.049353
"SELECT COALESCE(state,$1), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state",0.049353,1,0.049353
"SELECT COALESCE(state,$1), count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state",0.049353,1,0.049353
"SELECT checkpoints_timed, checkpoints_req, checkpoint_write_time, checkpoint_sync_time, buffers_checkpoint
FROM pg_stat_bgwriter",0.04892,8,0.006115
"SELECT checkpoints_timed, checkpoints_req, checkpoint_write_time, checkpoint_sync_time, buffers_checkpoint
FROM pg_stat_bgwriter",0.04892,8,0.006115
"SELECT checkpoints_timed, checkpoints_req, checkpoint_write_time, checkpoint_sync_time, buffers_checkpoint
FROM pg_stat_bgwriter",0.04892,8,0.006115
"SELECT checkpoints_timed, checkpoints_req, checkpoint_write_time, checkpoint_sync_time, buffers_checkpoint
FROM pg_stat_bgwriter",0.04892,8,0.006115
"SELECT checkpoints_timed, checkpoints_req, checkpoint_write_time, checkpoint_sync_time, buffers_checkpoint
FROM pg_stat_bgwriter",0.04892,8,0.006115
SELECT current_database() AS database_name,0.047629000000000005,8,0.005953625000000001
SELECT current_database() AS database_name,0.047629000000000005,8,0.005953625000000001
SELECT current_database() AS database_name,0.047629000000000005,8,0.005953625000000001
SELECT current_database() AS database_name,0.047629000000000005,8,0.005953625000000001
SELECT current_database() AS database_name,0.047629000000000005,8,0.005953625000000001
select * from pg_roles,0.044057,1,0.044057
select * from pg_roles,0.044057,1,0.044057
select * from pg_roles,0.044057,1,0.044057
select * from pg_roles,0.044057,1,0.044057
select * from pg_roles,0.044057,1,0.044057
"SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state",0.042679999999999996,1,0.042679999999999996
"SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state",0.042679999999999996,1,0.042679999999999996
"SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state",0.042679999999999996,1,0.042679999999999996
"SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state",0.042679999999999996,1,0.042679999999999996
"SELECT state, count(*) AS connection_count FROM pg_stat_activity GROUP BY state ORDER BY state",0.042679999999999996,1,0.042679999999999996
"SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ $1
ORDER BY 1",0.041746000000000005,1,0.041746000000000005
"SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ $1
ORDER BY 1",0.041746000000000005,1,0.041746000000000005
"SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ $1
ORDER BY 1",0.041746000000000005,1,0.041746000000000005
"SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ $1
ORDER BY 1",0.041746000000000005,1,0.041746000000000005
"SELECT r.rolname, r.rolsuper, r.rolinherit,
  r.rolcreaterole, r.rolcreatedb, r.rolcanlogin,
  r.rolconnlimit, r.rolvaliduntil
, r.rolreplication
, r.rolbypassrls
FROM pg_catalog.pg_roles r
WHERE r.rolname !~ $1
ORDER BY 1",0.041746000000000005,1,0.041746000000000005
select distinct * from statistics.query_details,0.035137,1,0.035137
select distinct * from statistics.query_details,0.035137,1,0.035137
select distinct * from statistics.query_details,0.035137,1,0.035137
select distinct * from statistics.query_details,0.035137,1,0.035137
select distinct * from statistics.query_details,0.035137,1,0.035137
"SELECT
    t.tablename AS table_name,
    p.relname AS partition_name
FROM
    pg_tables t
JOIN
    pg_inherits i ON t.tablename = i.inhrelid::regclass::text
JOIN
    pg_class p ON i.inhparent = p.oid
WHERE
    t.schemaname = $1",0.033467000000000004,8,0.004183375
"SELECT
    t.tablename AS table_name,
    p.relname AS partition_name
FROM
    pg_tables t
JOIN
    pg_inherits i ON t.tablename = i.inhrelid::regclass::text
JOIN
    pg_class p ON i.inhparent = p.oid
WHERE
    t.schemaname = $1",0.033467000000000004,8,0.004183375
"SELECT
    t.tablename AS table_name,
    p.relname AS partition_name
FROM
    pg_tables t
JOIN
    pg_inherits i ON t.tablename = i.inhrelid::regclass::text
JOIN
    pg_class p ON i.inhparent = p.oid
WHERE
    t.schemaname = $1",0.033467000000000004,8,0.004183375
"SELECT
    t.tablename AS table_name,
    p.relname AS partition_name
FROM
    pg_tables t
JOIN
    pg_inherits i ON t.tablename = i.inhrelid::regclass::text
JOIN
    pg_class p ON i.inhparent = p.oid
WHERE
    t.schemaname = $1",0.033467000000000004,8,0.004183375
"SELECT
    t.tablename AS table_name,
    p.relname AS partition_name
FROM
    pg_tables t
JOIN
    pg_inherits i ON t.tablename = i.inhrelid::regclass::text
JOIN
    pg_class p ON i.inhparent = p.oid
WHERE
    t.schemaname = $1",0.033467000000000004,8,0.004183375
"SELECT *
FROM
    pg_foreign_server",0.029564999999999998,8,0.003695625
"SELECT *
FROM
    pg_foreign_server",0.029564999999999998,8,0.003695625
"SELECT *
FROM
    pg_foreign_server",0.029564999999999998,8,0.003695625
"SELECT *
FROM
    pg_foreign_server",0.029564999999999998,8,0.003695625
"SELECT *
FROM
    pg_foreign_server",0.029564999999999998,8,0.003695625
select * from pg_wait_sampling_current,0.025272000000000003,1,0.025272000000000003
select * from pg_wait_sampling_current,0.025272000000000003,1,0.025272000000000003
select * from pg_wait_sampling_current,0.025272000000000003,1,0.025272000000000003
select * from pg_wait_sampling_current,0.025272000000000003,1,0.025272000000000003
select * from pg_wait_sampling_current,0.025272000000000003,1,0.025272000000000003
"SELECT n.nspname as ""Schema"",
  p.proname as ""Name"",
  pg_catalog.pg_get_function_result(p.oid) as ""Result data type"",
  pg_catalog.pg_get_function_arguments(p.oid) as ""Argument data types"",
 CASE p.prokind
  WHEN $1 THEN $2
  WHEN $3 THEN $4
  WHEN $5 THEN $6
  ELSE $7
 END as ""Type"",
 CASE
  WHEN p.provolatile = $8 THEN $9
  WHEN p.provolatile = $10 THEN $11
  WHEN p.provolatile = $12 THEN $13
 END as ""Volatility"",
 CASE
  WHEN p.proparallel = $14 THEN $15
  WHEN p.proparallel = $16 THEN $17
  WHEN p.proparallel = $18 THEN $19
 END as ""Parallel"",
 pg_catalog.pg_get_userbyid(p.proowner) as ""Owner"",
 CASE WHEN prosecdef THEN $20 ELSE $21 END AS ""Security"",
 pg_catalog.array_to_string(p.proacl, $22) AS ""Access privileges"",
 l.lanname as ""Language"",
 CASE WHEN l.lanname IN ($23, $24) THEN p.prosrc END as ""Internal name"",
 pg_catalog.obj_description(p.oid, $25) as ""Description""
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
     LEFT JOIN pg_catalog.pg_language l ON l.oid = p.prolang
WHERE p.proname OPERATOR(pg_catalog.~) $26 COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4",0.024875,1,0.024875
"SELECT n.nspname as ""Schema"",
  p.proname as ""Name"",
  pg_catalog.pg_get_function_result(p.oid) as ""Result data type"",
  pg_catalog.pg_get_function_arguments(p.oid) as ""Argument data types"",
 CASE p.prokind
  WHEN $1 THEN $2
  WHEN $3 THEN $4
  WHEN $5 THEN $6
  ELSE $7
 END as ""Type"",
 CASE
  WHEN p.provolatile = $8 THEN $9
  WHEN p.provolatile = $10 THEN $11
  WHEN p.provolatile = $12 THEN $13
 END as ""Volatility"",
 CASE
  WHEN p.proparallel = $14 THEN $15
  WHEN p.proparallel = $16 THEN $17
  WHEN p.proparallel = $18 THEN $19
 END as ""Parallel"",
 pg_catalog.pg_get_userbyid(p.proowner) as ""Owner"",
 CASE WHEN prosecdef THEN $20 ELSE $21 END AS ""Security"",
 pg_catalog.array_to_string(p.proacl, $22) AS ""Access privileges"",
 l.lanname as ""Language"",
 CASE WHEN l.lanname IN ($23, $24) THEN p.prosrc END as ""Internal name"",
 pg_catalog.obj_description(p.oid, $25) as ""Description""
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
     LEFT JOIN pg_catalog.pg_language l ON l.oid = p.prolang
WHERE p.proname OPERATOR(pg_catalog.~) $26 COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4",0.024875,1,0.024875
"SELECT n.nspname as ""Schema"",
  p.proname as ""Name"",
  pg_catalog.pg_get_function_result(p.oid) as ""Result data type"",
  pg_catalog.pg_get_function_arguments(p.oid) as ""Argument data types"",
 CASE p.prokind
  WHEN $1 THEN $2
  WHEN $3 THEN $4
  WHEN $5 THEN $6
  ELSE $7
 END as ""Type"",
 CASE
  WHEN p.provolatile = $8 THEN $9
  WHEN p.provolatile = $10 THEN $11
  WHEN p.provolatile = $12 THEN $13
 END as ""Volatility"",
 CASE
  WHEN p.proparallel = $14 THEN $15
  WHEN p.proparallel = $16 THEN $17
  WHEN p.proparallel = $18 THEN $19
 END as ""Parallel"",
 pg_catalog.pg_get_userbyid(p.proowner) as ""Owner"",
 CASE WHEN prosecdef THEN $20 ELSE $21 END AS ""Security"",
 pg_catalog.array_to_string(p.proacl, $22) AS ""Access privileges"",
 l.lanname as ""Language"",
 CASE WHEN l.lanname IN ($23, $24) THEN p.prosrc END as ""Internal name"",
 pg_catalog.obj_description(p.oid, $25) as ""Description""
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
     LEFT JOIN pg_catalog.pg_language l ON l.oid = p.prolang
WHERE p.proname OPERATOR(pg_catalog.~) $26 COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4",0.024875,1,0.024875
"SELECT n.nspname as ""Schema"",
  p.proname as ""Name"",
  pg_catalog.pg_get_function_result(p.oid) as ""Result data type"",
  pg_catalog.pg_get_function_arguments(p.oid) as ""Argument data types"",
 CASE p.prokind
  WHEN $1 THEN $2
  WHEN $3 THEN $4
  WHEN $5 THEN $6
  ELSE $7
 END as ""Type"",
 CASE
  WHEN p.provolatile = $8 THEN $9
  WHEN p.provolatile = $10 THEN $11
  WHEN p.provolatile = $12 THEN $13
 END as ""Volatility"",
 CASE
  WHEN p.proparallel = $14 THEN $15
  WHEN p.proparallel = $16 THEN $17
  WHEN p.proparallel = $18 THEN $19
 END as ""Parallel"",
 pg_catalog.pg_get_userbyid(p.proowner) as ""Owner"",
 CASE WHEN prosecdef THEN $20 ELSE $21 END AS ""Security"",
 pg_catalog.array_to_string(p.proacl, $22) AS ""Access privileges"",
 l.lanname as ""Language"",
 CASE WHEN l.lanname IN ($23, $24) THEN p.prosrc END as ""Internal name"",
 pg_catalog.obj_description(p.oid, $25) as ""Description""
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
     LEFT JOIN pg_catalog.pg_language l ON l.oid = p.prolang
WHERE p.proname OPERATOR(pg_catalog.~) $26 COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4",0.024875,1,0.024875
"SELECT n.nspname as ""Schema"",
  p.proname as ""Name"",
  pg_catalog.pg_get_function_result(p.oid) as ""Result data type"",
  pg_catalog.pg_get_function_arguments(p.oid) as ""Argument data types"",
 CASE p.prokind
  WHEN $1 THEN $2
  WHEN $3 THEN $4
  WHEN $5 THEN $6
  ELSE $7
 END as ""Type"",
 CASE
  WHEN p.provolatile = $8 THEN $9
  WHEN p.provolatile = $10 THEN $11
  WHEN p.provolatile = $12 THEN $13
 END as ""Volatility"",
 CASE
  WHEN p.proparallel = $14 THEN $15
  WHEN p.proparallel = $16 THEN $17
  WHEN p.proparallel = $18 THEN $19
 END as ""Parallel"",
 pg_catalog.pg_get_userbyid(p.proowner) as ""Owner"",
 CASE WHEN prosecdef THEN $20 ELSE $21 END AS ""Security"",
 pg_catalog.array_to_string(p.proacl, $22) AS ""Access privileges"",
 l.lanname as ""Language"",
 CASE WHEN l.lanname IN ($23, $24) THEN p.prosrc END as ""Internal name"",
 pg_catalog.obj_description(p.oid, $25) as ""Description""
FROM pg_catalog.pg_proc p
     LEFT JOIN pg_catalog.pg_namespace n ON n.oid = p.pronamespace
     LEFT JOIN pg_catalog.pg_language l ON l.oid = p.prolang
WHERE p.proname OPERATOR(pg_catalog.~) $26 COLLATE pg_catalog.default
  AND pg_catalog.pg_function_is_visible(p.oid)
ORDER BY 1, 2, 4",0.024875,1,0.024875
select * from pg_stat_wal,0.024334,1,0.024334
select * from pg_stat_wal,0.024334,1,0.024334
select * from pg_stat_wal,0.024334,1,0.024334
select * from pg_stat_wal,0.024334,1,0.024334
select * from pg_stat_wal,0.024334,1,0.024334
select * from statistics.ash_wait_sampling_sample,0.016603999999999997,1,0.016603999999999997
select * from statistics.ash_wait_sampling_sample,0.016603999999999997,1,0.016603999999999997
select * from statistics.ash_wait_sampling_sample,0.016603999999999997,1,0.016603999999999997
select * from statistics.ash_wait_sampling_sample,0.016603999999999997,1,0.016603999999999997
select * from statistics.ash_wait_sampling_sample,0.016603999999999997,1,0.016603999999999997
select count(*) from pgbench_branches,0.016129,1,0.016129
select count(*) from pgbench_branches,0.016129,1,0.016129
select count(*) from pgbench_branches,0.016129,1,0.016129
select count(*) from pgbench_branches,0.016129,1,0.016129
select count(*) from pgbench_branches,0.016129,1,0.016129
"SELECT r.rulename, trim(trailing $1 from pg_catalog.pg_get_ruledef(r.oid, $2))
FROM pg_catalog.pg_rewrite r
WHERE r.ev_class = $3 AND r.rulename != $4 ORDER BY 1",0.013128999999999998,3,0.004376333333333333
"SELECT r.rulename, trim(trailing $1 from pg_catalog.pg_get_ruledef(r.oid, $2))
FROM pg_catalog.pg_rewrite r
WHERE r.ev_class = $3 AND r.rulename != $4 ORDER BY 1",0.013128999999999998,3,0.004376333333333333
"SELECT r.rulename, trim(trailing $1 from pg_catalog.pg_get_ruledef(r.oid, $2))
FROM pg_catalog.pg_rewrite r
WHERE r.ev_class = $3 AND r.rulename != $4 ORDER BY 1",0.013128999999999998,3,0.004376333333333333
"SELECT r.rulename, trim(trailing $1 from pg_catalog.pg_get_ruledef(r.oid, $2))
FROM pg_catalog.pg_rewrite r
WHERE r.ev_class = $3 AND r.rulename != $4 ORDER BY 1",0.013128999999999998,3,0.004376333333333333
"SELECT r.rulename, trim(trailing $1 from pg_catalog.pg_get_ruledef(r.oid, $2))
FROM pg_catalog.pg_rewrite r
WHERE r.ev_class = $3 AND r.rulename != $4 ORDER BY 1",0.013128999999999998,3,0.004376333333333333
SELECT extversion FROM pg_extension WHERE extname = $1,0.010574,1,0.010574
SELECT extversion FROM pg_extension WHERE extname = $1,0.010574,1,0.010574
SELECT extversion FROM pg_extension WHERE extname = $1,0.010574,1,0.010574
SELECT extversion FROM pg_extension WHERE extname = $1,0.010574,1,0.010574
SELECT extversion FROM pg_extension WHERE extname = $1,0.010574,1,0.010574
select now(),0.008301999999999999,1,0.008301999999999999
select now(),0.008301999999999999,1,0.008301999999999999
select now(),0.008301999999999999,1,0.008301999999999999
select now(),0.008301999999999999,1,0.008301999999999999
select now(),0.008301999999999999,1,0.008301999999999999
select * from statistics.ash_session_sample,0.00822,1,0.00822
select * from statistics.ash_session_sample,0.00822,1,0.00822
select * from statistics.ash_session_sample,0.00822,1,0.00822
select * from statistics.ash_session_sample,0.00822,1,0.00822
select * from statistics.ash_session_sample,0.00822,1,0.00822
SHOW log_destination,0.007421,1,0.007421
SHOW log_destination,0.007421,1,0.007421
SHOW log_destination,0.007421,1,0.007421
SHOW log_destination,0.007421,1,0.007421
SHOW log_destination,0.007421,1,0.007421
SHOW pg_wait_sampling.history_size,0.005769,1,0.005769
SHOW pg_wait_sampling.history_size,0.005769,1,0.005769
SHOW pg_wait_sampling.history_size,0.005769,1,0.005769
SHOW pg_wait_sampling.history_size,0.005769,1,0.005769
SHOW pg_wait_sampling.history_size,0.005769,1,0.005769
"select round($1,$2)",0.004569,1,0.004569
"select round($1,$2)",0.004569,1,0.004569
"select round($1,$2)",0.004569,1,0.004569
"select round($1,$2)",0.004569,1,0.004569
"select round($1,$2)",0.004569,1,0.004569
SHOW pg_wait_sampling.history_period,0.004518,1,0.004518
SHOW pg_wait_sampling.history_period,0.004518,1,0.004518
SHOW pg_wait_sampling.history_period,0.004518,1,0.004518
SHOW pg_wait_sampling.history_period,0.004518,1,0.004518
SHOW pg_wait_sampling.history_period,0.004518,1,0.004518
